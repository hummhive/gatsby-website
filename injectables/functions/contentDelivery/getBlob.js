
  const bucketName = "hummhive-1668997927694-1bc1700390e308d2-content-delivery-data";
  const accessKey = "ju4exqc62no3rahiw7lmdo3hxxhq";
  const secretKey = "j2plu5rfmmwesfruky3mwzp7k4dmw62bgloml3ocmnuvmvuu66mbe";
  const endpoint = "https://gateway.storjshare.io";
  /*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@aws-crypto/crc32/build/aws_crc32.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32/build/aws_crc32.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsCrc32 = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js\");\nvar util_1 = __webpack_require__(/*! @aws-crypto/util */ \"./node_modules/@aws-crypto/util/build/index.js\");\nvar index_1 = __webpack_require__(/*! ./index */ \"./node_modules/@aws-crypto/crc32/build/index.js\");\nvar AwsCrc32 = /** @class */ (function () {\n    function AwsCrc32() {\n        this.crc32 = new index_1.Crc32();\n    }\n    AwsCrc32.prototype.update = function (toHash) {\n        if ((0, util_1.isEmptyData)(toHash))\n            return;\n        this.crc32.update((0, util_1.convertToBuffer)(toHash));\n    };\n    AwsCrc32.prototype.digest = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            return (0, tslib_1.__generator)(this, function (_a) {\n                return [2 /*return*/, (0, util_1.numToUint8)(this.crc32.digest())];\n            });\n        });\n    };\n    return AwsCrc32;\n}());\nexports.AwsCrc32 = AwsCrc32;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzX2NyYzMyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2F3c19jcmMzMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7OztBQUd0Qyx5Q0FBNEU7QUFDNUUsaUNBQWdDO0FBRWhDO0lBQUE7UUFDbUIsVUFBSyxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7SUFXdkMsQ0FBQztJQVRDLHlCQUFNLEdBQU4sVUFBTyxNQUFrQjtRQUN2QixJQUFJLElBQUEsa0JBQVcsRUFBQyxNQUFNLENBQUM7WUFBRSxPQUFPO1FBRWhDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUEsc0JBQWUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFSyx5QkFBTSxHQUFaOzs7Z0JBQ0Usc0JBQU8sSUFBQSxpQkFBVSxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBQzs7O0tBQ3hDO0lBQ0gsZUFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgY29udmVydFRvQnVmZmVyLCBpc0VtcHR5RGF0YSwgbnVtVG9VaW50OCB9IGZyb20gXCJAYXdzLWNyeXB0by91dGlsXCI7XG5pbXBvcnQgeyBDcmMzMiB9IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBBd3NDcmMzMiBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIHJlYWRvbmx5IGNyYzMyID0gbmV3IENyYzMyKCk7XG5cbiAgdXBkYXRlKHRvSGFzaDogU291cmNlRGF0YSkge1xuICAgIGlmIChpc0VtcHR5RGF0YSh0b0hhc2gpKSByZXR1cm47XG5cbiAgICB0aGlzLmNyYzMyLnVwZGF0ZShjb252ZXJ0VG9CdWZmZXIodG9IYXNoKSk7XG4gIH1cblxuICBhc3luYyBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIG51bVRvVWludDgodGhpcy5jcmMzMi5kaWdlc3QoKSk7XG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/crc32/build/aws_crc32.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32/build/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32/build/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js\");\nvar util_1 = __webpack_require__(/*! @aws-crypto/util */ \"./node_modules/@aws-crypto/util/build/index.js\");\nfunction crc32(data) {\n    return new Crc32().update(data).digest();\n}\nexports.crc32 = crc32;\nvar Crc32 = /** @class */ (function () {\n    function Crc32() {\n        this.checksum = 0xffffffff;\n    }\n    Crc32.prototype.update = function (data) {\n        var e_1, _a;\n        try {\n            for (var data_1 = (0, tslib_1.__values)(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n                var byte = data_1_1.value;\n                this.checksum =\n                    (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    Crc32.prototype.digest = function () {\n        return (this.checksum ^ 0xffffffff) >>> 0;\n    };\n    return Crc32;\n}());\nexports.Crc32 = Crc32;\n// prettier-ignore\nvar a_lookUpTable = [\n    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,\n    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,\n    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\n    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,\n    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,\n    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,\n    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,\n    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,\n    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,\n    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,\n    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,\n    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\n    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,\n    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,\n    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,\n    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,\n    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,\n    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,\n    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,\n    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\n    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,\n    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,\n    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,\n    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\n    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,\n    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,\n    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\n    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,\n    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,\n    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,\n    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,\n    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,\n];\nvar lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);\nvar aws_crc32_1 = __webpack_require__(/*! ./aws_crc32 */ \"./node_modules/@aws-crypto/crc32/build/aws_crc32.js\");\nObject.defineProperty(exports, \"AwsCrc32\", ({ enumerable: true, get: function () { return aws_crc32_1.AwsCrc32; } }));\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/crc32/build/index.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__values\": () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32c/build/aws_crc32c.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32c/build/aws_crc32c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsCrc32c = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js\");\nvar util_1 = __webpack_require__(/*! @aws-crypto/util */ \"./node_modules/@aws-crypto/util/build/index.js\");\nvar index_1 = __webpack_require__(/*! ./index */ \"./node_modules/@aws-crypto/crc32c/build/index.js\");\nvar AwsCrc32c = /** @class */ (function () {\n    function AwsCrc32c() {\n        this.crc32c = new index_1.Crc32c();\n    }\n    AwsCrc32c.prototype.update = function (toHash) {\n        if ((0, util_1.isEmptyData)(toHash))\n            return;\n        this.crc32c.update((0, util_1.convertToBuffer)(toHash));\n    };\n    AwsCrc32c.prototype.digest = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            return (0, tslib_1.__generator)(this, function (_a) {\n                return [2 /*return*/, (0, util_1.numToUint8)(this.crc32c.digest())];\n            });\n        });\n    };\n    return AwsCrc32c;\n}());\nexports.AwsCrc32c = AwsCrc32c;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzX2NyYzMyYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hd3NfY3JjMzJjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOzs7O0FBR3RDLHlDQUE0RTtBQUM1RSxpQ0FBaUM7QUFFakM7SUFBQTtRQUNtQixXQUFNLEdBQUcsSUFBSSxjQUFNLEVBQUUsQ0FBQztJQVd6QyxDQUFDO0lBVEMsMEJBQU0sR0FBTixVQUFPLE1BQWtCO1FBQ3ZCLElBQUksSUFBQSxrQkFBVyxFQUFDLE1BQU0sQ0FBQztZQUFFLE9BQU87UUFFaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBQSxzQkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVLLDBCQUFNLEdBQVo7OztnQkFDRSxzQkFBTyxJQUFBLGlCQUFVLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFDOzs7S0FDekM7SUFDSCxnQkFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksOEJBQVMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgY29udmVydFRvQnVmZmVyLCBpc0VtcHR5RGF0YSwgbnVtVG9VaW50OCB9IGZyb20gXCJAYXdzLWNyeXB0by91dGlsXCI7XG5pbXBvcnQgeyBDcmMzMmMgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgY2xhc3MgQXdzQ3JjMzJjIGltcGxlbWVudHMgSGFzaCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY3JjMzJjID0gbmV3IENyYzMyYygpO1xuXG4gIHVwZGF0ZSh0b0hhc2g6IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoaXNFbXB0eURhdGEodG9IYXNoKSkgcmV0dXJuO1xuXG4gICAgdGhpcy5jcmMzMmMudXBkYXRlKGNvbnZlcnRUb0J1ZmZlcih0b0hhc2gpKTtcbiAgfVxuXG4gIGFzeW5jIGRpZ2VzdCgpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICByZXR1cm4gbnVtVG9VaW50OCh0aGlzLmNyYzMyYy5kaWdlc3QoKSk7XG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/crc32c/build/aws_crc32c.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32c/build/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32c/build/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsCrc32c = exports.Crc32c = exports.crc32c = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js\");\nvar util_1 = __webpack_require__(/*! @aws-crypto/util */ \"./node_modules/@aws-crypto/util/build/index.js\");\nfunction crc32c(data) {\n    return new Crc32c().update(data).digest();\n}\nexports.crc32c = crc32c;\nvar Crc32c = /** @class */ (function () {\n    function Crc32c() {\n        this.checksum = 0xffffffff;\n    }\n    Crc32c.prototype.update = function (data) {\n        var e_1, _a;\n        try {\n            for (var data_1 = (0, tslib_1.__values)(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n                var byte = data_1_1.value;\n                this.checksum =\n                    (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    Crc32c.prototype.digest = function () {\n        return (this.checksum ^ 0xffffffff) >>> 0;\n    };\n    return Crc32c;\n}());\nexports.Crc32c = Crc32c;\n// prettier-ignore\nvar a_lookupTable = [\n    0x00000000, 0xF26B8303, 0xE13B70F7, 0x1350F3F4, 0xC79A971F, 0x35F1141C, 0x26A1E7E8, 0xD4CA64EB,\n    0x8AD958CF, 0x78B2DBCC, 0x6BE22838, 0x9989AB3B, 0x4D43CFD0, 0xBF284CD3, 0xAC78BF27, 0x5E133C24,\n    0x105EC76F, 0xE235446C, 0xF165B798, 0x030E349B, 0xD7C45070, 0x25AFD373, 0x36FF2087, 0xC494A384,\n    0x9A879FA0, 0x68EC1CA3, 0x7BBCEF57, 0x89D76C54, 0x5D1D08BF, 0xAF768BBC, 0xBC267848, 0x4E4DFB4B,\n    0x20BD8EDE, 0xD2D60DDD, 0xC186FE29, 0x33ED7D2A, 0xE72719C1, 0x154C9AC2, 0x061C6936, 0xF477EA35,\n    0xAA64D611, 0x580F5512, 0x4B5FA6E6, 0xB93425E5, 0x6DFE410E, 0x9F95C20D, 0x8CC531F9, 0x7EAEB2FA,\n    0x30E349B1, 0xC288CAB2, 0xD1D83946, 0x23B3BA45, 0xF779DEAE, 0x05125DAD, 0x1642AE59, 0xE4292D5A,\n    0xBA3A117E, 0x4851927D, 0x5B016189, 0xA96AE28A, 0x7DA08661, 0x8FCB0562, 0x9C9BF696, 0x6EF07595,\n    0x417B1DBC, 0xB3109EBF, 0xA0406D4B, 0x522BEE48, 0x86E18AA3, 0x748A09A0, 0x67DAFA54, 0x95B17957,\n    0xCBA24573, 0x39C9C670, 0x2A993584, 0xD8F2B687, 0x0C38D26C, 0xFE53516F, 0xED03A29B, 0x1F682198,\n    0x5125DAD3, 0xA34E59D0, 0xB01EAA24, 0x42752927, 0x96BF4DCC, 0x64D4CECF, 0x77843D3B, 0x85EFBE38,\n    0xDBFC821C, 0x2997011F, 0x3AC7F2EB, 0xC8AC71E8, 0x1C661503, 0xEE0D9600, 0xFD5D65F4, 0x0F36E6F7,\n    0x61C69362, 0x93AD1061, 0x80FDE395, 0x72966096, 0xA65C047D, 0x5437877E, 0x4767748A, 0xB50CF789,\n    0xEB1FCBAD, 0x197448AE, 0x0A24BB5A, 0xF84F3859, 0x2C855CB2, 0xDEEEDFB1, 0xCDBE2C45, 0x3FD5AF46,\n    0x7198540D, 0x83F3D70E, 0x90A324FA, 0x62C8A7F9, 0xB602C312, 0x44694011, 0x5739B3E5, 0xA55230E6,\n    0xFB410CC2, 0x092A8FC1, 0x1A7A7C35, 0xE811FF36, 0x3CDB9BDD, 0xCEB018DE, 0xDDE0EB2A, 0x2F8B6829,\n    0x82F63B78, 0x709DB87B, 0x63CD4B8F, 0x91A6C88C, 0x456CAC67, 0xB7072F64, 0xA457DC90, 0x563C5F93,\n    0x082F63B7, 0xFA44E0B4, 0xE9141340, 0x1B7F9043, 0xCFB5F4A8, 0x3DDE77AB, 0x2E8E845F, 0xDCE5075C,\n    0x92A8FC17, 0x60C37F14, 0x73938CE0, 0x81F80FE3, 0x55326B08, 0xA759E80B, 0xB4091BFF, 0x466298FC,\n    0x1871A4D8, 0xEA1A27DB, 0xF94AD42F, 0x0B21572C, 0xDFEB33C7, 0x2D80B0C4, 0x3ED04330, 0xCCBBC033,\n    0xA24BB5A6, 0x502036A5, 0x4370C551, 0xB11B4652, 0x65D122B9, 0x97BAA1BA, 0x84EA524E, 0x7681D14D,\n    0x2892ED69, 0xDAF96E6A, 0xC9A99D9E, 0x3BC21E9D, 0xEF087A76, 0x1D63F975, 0x0E330A81, 0xFC588982,\n    0xB21572C9, 0x407EF1CA, 0x532E023E, 0xA145813D, 0x758FE5D6, 0x87E466D5, 0x94B49521, 0x66DF1622,\n    0x38CC2A06, 0xCAA7A905, 0xD9F75AF1, 0x2B9CD9F2, 0xFF56BD19, 0x0D3D3E1A, 0x1E6DCDEE, 0xEC064EED,\n    0xC38D26C4, 0x31E6A5C7, 0x22B65633, 0xD0DDD530, 0x0417B1DB, 0xF67C32D8, 0xE52CC12C, 0x1747422F,\n    0x49547E0B, 0xBB3FFD08, 0xA86F0EFC, 0x5A048DFF, 0x8ECEE914, 0x7CA56A17, 0x6FF599E3, 0x9D9E1AE0,\n    0xD3D3E1AB, 0x21B862A8, 0x32E8915C, 0xC083125F, 0x144976B4, 0xE622F5B7, 0xF5720643, 0x07198540,\n    0x590AB964, 0xAB613A67, 0xB831C993, 0x4A5A4A90, 0x9E902E7B, 0x6CFBAD78, 0x7FAB5E8C, 0x8DC0DD8F,\n    0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1,\n    0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E,\n    0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E,\n    0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351,\n];\nvar lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);\nvar aws_crc32c_1 = __webpack_require__(/*! ./aws_crc32c */ \"./node_modules/@aws-crypto/crc32c/build/aws_crc32c.js\");\nObject.defineProperty(exports, \"AwsCrc32c\", ({ enumerable: true, get: function () { return aws_crc32c_1.AwsCrc32c; } }));\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/crc32c/build/index.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__values\": () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=CryptoOperation.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/Key.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/Key.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=Key.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/ie11-detection/build/Key.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=KeyOperation.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=MsSubtleCrypto.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/MsWindow.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/MsWindow.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isMsWindow = void 0;\nvar msSubtleCryptoMethods = [\n    \"decrypt\",\n    \"digest\",\n    \"encrypt\",\n    \"exportKey\",\n    \"generateKey\",\n    \"importKey\",\n    \"sign\",\n    \"verify\"\n];\nfunction quacksLikeAnMsWindow(window) {\n    return \"MSInputMethodContext\" in window && \"msCrypto\" in window;\n}\n/**\n * Determines if the provided window is (or is like) the window object one would\n * expect to encounter in Internet Explorer 11.\n */\nfunction isMsWindow(window) {\n    if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {\n        var _a = window.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;\n        return msSubtleCryptoMethods\n            .map(function (methodName) { return subtle_1[methodName]; })\n            .concat(getRandomValues)\n            .every(function (method) { return typeof method === \"function\"; });\n    }\n    return false;\n}\nexports.isMsWindow = isMsWindow;\n//# sourceMappingURL=MsWindow.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/ie11-detection/build/MsWindow.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/build/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/build/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./CryptoOperation */ \"./node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./Key */ \"./node_modules/@aws-crypto/ie11-detection/build/Key.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./KeyOperation */ \"./node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./MsSubtleCrypto */ \"./node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./MsWindow */ \"./node_modules/@aws-crypto/ie11-detection/build/MsWindow.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/ie11-detection/build/index.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__values\": () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/ie11-detection/node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EMPTY_DATA_SHA_1 = exports.SHA_1_HMAC_ALGO = exports.SHA_1_HASH = void 0;\nexports.SHA_1_HASH = { name: \"SHA-1\" };\nexports.SHA_1_HMAC_ALGO = {\n    name: \"HMAC\",\n    hash: exports.SHA_1_HASH,\n};\nexports.EMPTY_DATA_SHA_1 = new Uint8Array([\n    218,\n    57,\n    163,\n    238,\n    94,\n    107,\n    75,\n    13,\n    50,\n    85,\n    191,\n    239,\n    149,\n    96,\n    24,\n    144,\n    175,\n    216,\n    7,\n    9,\n]);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBYSxRQUFBLFVBQVUsR0FBc0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFFbEQsUUFBQSxlQUFlLEdBQThDO0lBQ3hFLElBQUksRUFBRSxNQUFNO0lBQ1osSUFBSSxFQUFFLGtCQUFVO0NBQ2pCLENBQUM7QUFFVyxRQUFBLGdCQUFnQixHQUFHLElBQUksVUFBVSxDQUFDO0lBQzdDLEdBQUc7SUFDSCxFQUFFO0lBQ0YsR0FBRztJQUNILEdBQUc7SUFDSCxFQUFFO0lBQ0YsR0FBRztJQUNILEVBQUU7SUFDRixFQUFFO0lBQ0YsRUFBRTtJQUNGLEVBQUU7SUFDRixHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxFQUFFO0lBQ0YsRUFBRTtJQUNGLEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILENBQUM7SUFDRCxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFNIQV8xX0hBU0g6IHsgbmFtZTogXCJTSEEtMVwiIH0gPSB7IG5hbWU6IFwiU0hBLTFcIiB9O1xuXG5leHBvcnQgY29uc3QgU0hBXzFfSE1BQ19BTEdPOiB7IG5hbWU6IFwiSE1BQ1wiOyBoYXNoOiB7IG5hbWU6IFwiU0hBLTFcIiB9IH0gPSB7XG4gIG5hbWU6IFwiSE1BQ1wiLFxuICBoYXNoOiBTSEFfMV9IQVNILFxufTtcblxuZXhwb3J0IGNvbnN0IEVNUFRZX0RBVEFfU0hBXzEgPSBuZXcgVWludDhBcnJheShbXG4gIDIxOCxcbiAgNTcsXG4gIDE2MyxcbiAgMjM4LFxuICA5NCxcbiAgMTA3LFxuICA3NSxcbiAgMTMsXG4gIDUwLFxuICA4NSxcbiAgMTkxLFxuICAyMzksXG4gIDE0OSxcbiAgOTYsXG4gIDI0LFxuICAxNDQsXG4gIDE3NSxcbiAgMjE2LFxuICA3LFxuICA5LFxuXSk7XG4iXX0=\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha1-browser/build/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/crossPlatformSha1.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/crossPlatformSha1.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sha1 = void 0;\nvar ie11Sha1_1 = __webpack_require__(/*! ./ie11Sha1 */ \"./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js\");\nvar webCryptoSha1_1 = __webpack_require__(/*! ./webCryptoSha1 */ \"./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js\");\nvar supports_web_crypto_1 = __webpack_require__(/*! @aws-crypto/supports-web-crypto */ \"./node_modules/@aws-crypto/supports-web-crypto/build/index.js\");\nvar ie11_detection_1 = __webpack_require__(/*! @aws-crypto/ie11-detection */ \"./node_modules/@aws-crypto/ie11-detection/build/index.js\");\nvar util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ \"./node_modules/@aws-sdk/util-locate-window/dist-es/index.js\");\nvar Sha1 = /** @class */ (function () {\n    function Sha1(secret) {\n        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {\n            this.hash = new webCryptoSha1_1.Sha1(secret);\n        }\n        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {\n            this.hash = new ie11Sha1_1.Sha1(secret);\n        }\n        else {\n            throw new Error(\"SHA1 not supported\");\n        }\n    }\n    Sha1.prototype.update = function (data, encoding) {\n        this.hash.update(data, encoding);\n    };\n    Sha1.prototype.digest = function () {\n        return this.hash.digest();\n    };\n    return Sha1;\n}());\nexports.Sha1 = Sha1;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3NQbGF0Zm9ybVNoYTEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY3Jvc3NQbGF0Zm9ybVNoYTEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQThDO0FBQzlDLGlEQUF3RDtBQUV4RCx1RUFBb0U7QUFDcEUsNkRBQXdEO0FBQ3hELGtFQUEyRDtBQUUzRDtJQUdFLGNBQVksTUFBbUI7UUFDN0IsSUFBSSxJQUFBLHVDQUFpQixFQUFDLElBQUEsaUNBQVksR0FBRSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLG9CQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkM7YUFBTSxJQUFJLElBQUEsMkJBQVUsRUFBQyxJQUFBLGlDQUFZLEdBQUUsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxlQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEM7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7SUFFRCxxQkFBTSxHQUFOLFVBQU8sSUFBZ0IsRUFBRSxRQUFzQztRQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHFCQUFNLEdBQU47UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNILFdBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBcEJZLG9CQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhMSBhcyBJZTExU2hhMSB9IGZyb20gXCIuL2llMTFTaGExXCI7XG5pbXBvcnQgeyBTaGExIGFzIFdlYkNyeXB0b1NoYTEgfSBmcm9tIFwiLi93ZWJDcnlwdG9TaGExXCI7XG5pbXBvcnQgeyBIYXNoLCBTb3VyY2VEYXRhIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBzdXBwb3J0c1dlYkNyeXB0byB9IGZyb20gXCJAYXdzLWNyeXB0by9zdXBwb3J0cy13ZWItY3J5cHRvXCI7XG5pbXBvcnQgeyBpc01zV2luZG93IH0gZnJvbSBcIkBhd3MtY3J5cHRvL2llMTEtZGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBsb2NhdGVXaW5kb3cgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1sb2NhdGUtd2luZG93XCI7XG5cbmV4cG9ydCBjbGFzcyBTaGExIGltcGxlbWVudHMgSGFzaCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGFzaDogSGFzaDtcblxuICBjb25zdHJ1Y3RvcihzZWNyZXQ/OiBTb3VyY2VEYXRhKSB7XG4gICAgaWYgKHN1cHBvcnRzV2ViQ3J5cHRvKGxvY2F0ZVdpbmRvdygpKSkge1xuICAgICAgdGhpcy5oYXNoID0gbmV3IFdlYkNyeXB0b1NoYTEoc2VjcmV0KTtcbiAgICB9IGVsc2UgaWYgKGlzTXNXaW5kb3cobG9jYXRlV2luZG93KCkpKSB7XG4gICAgICB0aGlzLmhhc2ggPSBuZXcgSWUxMVNoYTEoc2VjcmV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU0hBMSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShkYXRhOiBTb3VyY2VEYXRhLCBlbmNvZGluZz86IFwidXRmOFwiIHwgXCJhc2NpaVwiIHwgXCJsYXRpbjFcIik6IHZvaWQge1xuICAgIHRoaXMuaGFzaC51cGRhdGUoZGF0YSwgZW5jb2RpbmcpO1xuICB9XG5cbiAgZGlnZXN0KCk6IFByb21pc2U8VWludDhBcnJheT4ge1xuICAgIHJldHVybiB0aGlzLmhhc2guZGlnZXN0KCk7XG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha1-browser/build/crossPlatformSha1.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sha1 = void 0;\nvar isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */ \"./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-crypto/sha1-browser/build/constants.js\");\nvar util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js\");\nvar util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ \"./node_modules/@aws-sdk/util-locate-window/dist-es/index.js\");\nvar Sha1 = /** @class */ (function () {\n    function Sha1(secret) {\n        if (secret) {\n            this.operation = getKeyPromise(secret).then(function (keyData) {\n                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, keyData);\n            });\n            this.operation.catch(function () { });\n        }\n        else {\n            this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-1\"));\n        }\n    }\n    Sha1.prototype.update = function (toHash) {\n        var _this = this;\n        if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n            return;\n        }\n        this.operation = this.operation.then(function (operation) {\n            operation.onerror = function () {\n                _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n            };\n            operation.process(toArrayBufferView(toHash));\n            return operation;\n        });\n        this.operation.catch(function () { });\n    };\n    Sha1.prototype.digest = function () {\n        return this.operation.then(function (operation) {\n            return new Promise(function (resolve, reject) {\n                operation.onerror = function () {\n                    reject(new Error(\"Error encountered finalizing hash\"));\n                };\n                operation.oncomplete = function () {\n                    if (operation.result) {\n                        resolve(new Uint8Array(operation.result));\n                    }\n                    reject(new Error(\"Error encountered finalizing hash\"));\n                };\n                operation.finish();\n            });\n        });\n    };\n    return Sha1;\n}());\nexports.Sha1 = Sha1;\nfunction getKeyPromise(secret) {\n    return new Promise(function (resolve, reject) {\n        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_1_HMAC_ALGO, false, [\"sign\"]);\n        keyOperation.oncomplete = function () {\n            if (keyOperation.result) {\n                resolve(keyOperation.result);\n            }\n            reject(new Error(\"ImportKey completed without importing key.\"));\n        };\n        keyOperation.onerror = function () {\n            reject(new Error(\"ImportKey failed to import key.\"));\n        };\n    });\n}\nfunction toArrayBufferView(data) {\n    if (typeof data === \"string\") {\n        return (0, util_utf8_browser_1.fromUtf8)(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWUxMVNoYTEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaWUxMVNoYTEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTRDO0FBQzVDLHlDQUE4QztBQUU5QyxnRUFBc0Q7QUFFdEQsa0VBQTJEO0FBRTNEO0lBR0UsY0FBWSxNQUFtQjtRQUM3QixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE9BQU87Z0JBQ2xELE9BQUMsSUFBQSxpQ0FBWSxHQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQy9DLDJCQUFlLEVBQ2YsT0FBTyxDQUNSO1lBSEQsQ0FHQyxDQUNGLENBQUM7WUFDRixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2hDO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQzdCLElBQUEsaUNBQVksR0FBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUM3RCxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQscUJBQU0sR0FBTixVQUFPLE1BQWtCO1FBQXpCLGlCQWdCQztRQWZDLElBQUksSUFBQSx5QkFBVyxFQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3ZCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBQyxTQUFTO1lBQzdDLFNBQVMsQ0FBQyxPQUFPLEdBQUc7Z0JBQ2xCLEtBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDN0IsSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FDN0MsQ0FBQztZQUNKLENBQUMsQ0FBQztZQUNGLFNBQVMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUU3QyxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGNBQU8sQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELHFCQUFNLEdBQU47UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUN4QixVQUFDLFNBQVM7WUFDUixPQUFBLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07Z0JBQzFCLFNBQVMsQ0FBQyxPQUFPLEdBQUc7b0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELENBQUMsQ0FBQztnQkFDRixTQUFTLENBQUMsVUFBVSxHQUFHO29CQUNyQixJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7d0JBQ3BCLE9BQU8sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztxQkFDM0M7b0JBQ0QsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxDQUFDO2dCQUVGLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNyQixDQUFDLENBQUM7UUFaRixDQVlFLENBQ0wsQ0FBQztJQUNKLENBQUM7SUFDSCxXQUFDO0FBQUQsQ0FBQyxBQXZERCxJQXVEQztBQXZEWSxvQkFBSTtBQXlEakIsU0FBUyxhQUFhLENBQUMsTUFBa0I7SUFDdkMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLElBQU0sWUFBWSxHQUFJLElBQUEsaUNBQVksR0FBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUN6RSxLQUFLLEVBQ0wsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQ3pCLDJCQUFlLEVBQ2YsS0FBSyxFQUNMLENBQUMsTUFBTSxDQUFDLENBQ1QsQ0FBQztRQUVGLFlBQVksQ0FBQyxVQUFVLEdBQUc7WUFDeEIsSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO2dCQUN2QixPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzlCO1lBRUQsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUM7UUFDRixZQUFZLENBQUMsT0FBTyxHQUFHO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxJQUFnQjtJQUN6QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixPQUFPLElBQUEsNEJBQVEsRUFBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtJQUVELElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLElBQUksVUFBVSxDQUNuQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQy9DLENBQUM7S0FDSDtJQUVELE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRW1wdHlEYXRhIH0gZnJvbSBcIi4vaXNFbXB0eURhdGFcIjtcbmltcG9ydCB7IFNIQV8xX0hNQUNfQUxHTyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZnJvbVV0ZjggfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC11dGY4LWJyb3dzZXJcIjtcbmltcG9ydCB7IENyeXB0b09wZXJhdGlvbiwgS2V5LCBNc1dpbmRvdyB9IGZyb20gXCJAYXdzLWNyeXB0by9pZTExLWRldGVjdGlvblwiO1xuaW1wb3J0IHsgbG9jYXRlV2luZG93IH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtbG9jYXRlLXdpbmRvd1wiO1xuXG5leHBvcnQgY2xhc3MgU2hhMSBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIG9wZXJhdGlvbjogUHJvbWlzZTxDcnlwdG9PcGVyYXRpb24+O1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0KSB7XG4gICAgICB0aGlzLm9wZXJhdGlvbiA9IGdldEtleVByb21pc2Uoc2VjcmV0KS50aGVuKChrZXlEYXRhKSA9PlxuICAgICAgICAobG9jYXRlV2luZG93KCkgYXMgTXNXaW5kb3cpLm1zQ3J5cHRvLnN1YnRsZS5zaWduKFxuICAgICAgICAgIFNIQV8xX0hNQUNfQUxHTyxcbiAgICAgICAgICBrZXlEYXRhXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICB0aGlzLm9wZXJhdGlvbi5jYXRjaCgoKSA9PiB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlcmF0aW9uID0gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAobG9jYXRlV2luZG93KCkgYXMgTXNXaW5kb3cpLm1zQ3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMVwiKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUodG9IYXNoOiBTb3VyY2VEYXRhKTogdm9pZCB7XG4gICAgaWYgKGlzRW1wdHlEYXRhKHRvSGFzaCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm9wZXJhdGlvbiA9IHRoaXMub3BlcmF0aW9uLnRoZW4oKG9wZXJhdGlvbikgPT4ge1xuICAgICAgb3BlcmF0aW9uLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgbmV3IEVycm9yKFwiRXJyb3IgZW5jb3VudGVyZWQgdXBkYXRpbmcgaGFzaFwiKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICAgIG9wZXJhdGlvbi5wcm9jZXNzKHRvQXJyYXlCdWZmZXJWaWV3KHRvSGFzaCkpO1xuXG4gICAgICByZXR1cm4gb3BlcmF0aW9uO1xuICAgIH0pO1xuICAgIHRoaXMub3BlcmF0aW9uLmNhdGNoKCgpID0+IHt9KTtcbiAgfVxuXG4gIGRpZ2VzdCgpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb24udGhlbjxVaW50OEFycmF5PihcbiAgICAgIChvcGVyYXRpb24pID0+XG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBvcGVyYXRpb24ub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJFcnJvciBlbmNvdW50ZXJlZCBmaW5hbGl6aW5nIGhhc2hcIikpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgb3BlcmF0aW9uLm9uY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uLnJlc3VsdCkge1xuICAgICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KG9wZXJhdGlvbi5yZXN1bHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJFcnJvciBlbmNvdW50ZXJlZCBmaW5hbGl6aW5nIGhhc2hcIikpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBvcGVyYXRpb24uZmluaXNoKCk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRLZXlQcm9taXNlKHNlY3JldDogU291cmNlRGF0YSk6IFByb21pc2U8S2V5PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qga2V5T3BlcmF0aW9uID0gKGxvY2F0ZVdpbmRvdygpIGFzIE1zV2luZG93KS5tc0NyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgXCJyYXdcIixcbiAgICAgIHRvQXJyYXlCdWZmZXJWaWV3KHNlY3JldCksXG4gICAgICBTSEFfMV9ITUFDX0FMR08sXG4gICAgICBmYWxzZSxcbiAgICAgIFtcInNpZ25cIl1cbiAgICApO1xuXG4gICAga2V5T3BlcmF0aW9uLm9uY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBpZiAoa2V5T3BlcmF0aW9uLnJlc3VsdCkge1xuICAgICAgICByZXNvbHZlKGtleU9wZXJhdGlvbi5yZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEVycm9yKFwiSW1wb3J0S2V5IGNvbXBsZXRlZCB3aXRob3V0IGltcG9ydGluZyBrZXkuXCIpKTtcbiAgICB9O1xuICAgIGtleU9wZXJhdGlvbi5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkltcG9ydEtleSBmYWlsZWQgdG8gaW1wb3J0IGtleS5cIikpO1xuICAgIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5QnVmZmVyVmlldyhkYXRhOiBTb3VyY2VEYXRhKTogVWludDhBcnJheSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmcm9tVXRmOChkYXRhKTtcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICBkYXRhLmJ1ZmZlcixcbiAgICAgIGRhdGEuYnl0ZU9mZnNldCxcbiAgICAgIGRhdGEuYnl0ZUxlbmd0aCAvIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlRcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xufVxuIl19\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebCryptoSha1 = exports.Ie11Sha1 = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/sha1-browser/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./crossPlatformSha1 */ \"./node_modules/@aws-crypto/sha1-browser/build/crossPlatformSha1.js\"), exports);\nvar ie11Sha1_1 = __webpack_require__(/*! ./ie11Sha1 */ \"./node_modules/@aws-crypto/sha1-browser/build/ie11Sha1.js\");\nObject.defineProperty(exports, \"Ie11Sha1\", ({ enumerable: true, get: function () { return ie11Sha1_1.Sha1; } }));\nvar webCryptoSha1_1 = __webpack_require__(/*! ./webCryptoSha1 */ \"./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js\");\nObject.defineProperty(exports, \"WebCryptoSha1\", ({ enumerable: true, get: function () { return webCryptoSha1_1.Sha1; } }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG1FQUFvQztBQUNwQyx1Q0FBOEM7QUFBckMsb0dBQUEsSUFBSSxPQUFZO0FBQ3pCLGlEQUF3RDtBQUEvQyw4R0FBQSxJQUFJLE9BQWlCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY3Jvc3NQbGF0Zm9ybVNoYTFcIjtcbmV4cG9ydCB7IFNoYTEgYXMgSWUxMVNoYTEgfSBmcm9tIFwiLi9pZTExU2hhMVwiO1xuZXhwb3J0IHsgU2hhMSBhcyBXZWJDcnlwdG9TaGExIH0gZnJvbSBcIi4vd2ViQ3J5cHRvU2hhMVwiO1xuIl19\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha1-browser/build/index.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEmptyData = void 0;\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nexports.isEmptyData = isEmptyData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFbXB0eURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaXNFbXB0eURhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsV0FBVyxDQUFDLElBQWdCO0lBQzFDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7S0FDMUI7SUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFORCxrQ0FNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlEYXRhKGRhdGE6IFNvdXJjZURhdGEpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aCA9PT0gMDtcbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sha1 = void 0;\nvar util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js\");\nvar isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */ \"./node_modules/@aws-crypto/sha1-browser/build/isEmptyData.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-crypto/sha1-browser/build/constants.js\");\nvar util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ \"./node_modules/@aws-sdk/util-locate-window/dist-es/index.js\");\nvar Sha1 = /** @class */ (function () {\n    function Sha1(secret) {\n        this.toHash = new Uint8Array(0);\n        if (secret !== void 0) {\n            this.key = new Promise(function (resolve, reject) {\n                (0, util_locate_window_1.locateWindow)()\n                    .crypto.subtle.importKey(\"raw\", convertToBuffer(secret), constants_1.SHA_1_HMAC_ALGO, false, [\"sign\"])\n                    .then(resolve, reject);\n            });\n            this.key.catch(function () { });\n        }\n    }\n    Sha1.prototype.update = function (data) {\n        if ((0, isEmptyData_1.isEmptyData)(data)) {\n            return;\n        }\n        var update = convertToBuffer(data);\n        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n        typedArray.set(this.toHash, 0);\n        typedArray.set(update, this.toHash.byteLength);\n        this.toHash = typedArray;\n    };\n    Sha1.prototype.digest = function () {\n        var _this = this;\n        if (this.key) {\n            return this.key.then(function (key) {\n                return (0, util_locate_window_1.locateWindow)()\n                    .crypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, key, _this.toHash)\n                    .then(function (data) { return new Uint8Array(data); });\n            });\n        }\n        if ((0, isEmptyData_1.isEmptyData)(this.toHash)) {\n            return Promise.resolve(constants_1.EMPTY_DATA_SHA_1);\n        }\n        return Promise.resolve()\n            .then(function () { return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_1_HASH, _this.toHash); })\n            .then(function (data) { return Promise.resolve(new Uint8Array(data)); });\n    };\n    return Sha1;\n}());\nexports.Sha1 = Sha1;\nfunction convertToBuffer(data) {\n    if (typeof data === \"string\") {\n        return (0, util_utf8_browser_1.fromUtf8)(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViQ3J5cHRvU2hhMS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy93ZWJDcnlwdG9TaGExLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGdFQUFzRDtBQUN0RCw2Q0FBNEM7QUFDNUMseUNBQTRFO0FBQzVFLGtFQUEyRDtBQUUzRDtJQUlFLGNBQVksTUFBbUI7UUFGdkIsV0FBTSxHQUFlLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRzdDLElBQUksTUFBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtnQkFDckMsSUFBQSxpQ0FBWSxHQUFFO3FCQUNYLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUN0QixLQUFLLEVBQ0wsZUFBZSxDQUFDLE1BQU0sQ0FBQyxFQUN2QiwyQkFBZSxFQUNmLEtBQUssRUFDTCxDQUFDLE1BQU0sQ0FBQyxDQUNUO3FCQUNBLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELHFCQUFNLEdBQU4sVUFBTyxJQUFnQjtRQUNyQixJQUFJLElBQUEseUJBQVcsRUFBQyxJQUFJLENBQUMsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFFRCxJQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQzNDLENBQUM7UUFDRixVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQscUJBQU0sR0FBTjtRQUFBLGlCQWdCQztRQWZDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHO2dCQUN2QixPQUFBLElBQUEsaUNBQVksR0FBRTtxQkFDWCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQywyQkFBZSxFQUFFLEdBQUcsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDO3FCQUNyRCxJQUFJLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQztZQUZ2QyxDQUV1QyxDQUN4QyxDQUFDO1NBQ0g7UUFFRCxJQUFJLElBQUEseUJBQVcsRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLDRCQUFnQixDQUFDLENBQUM7U0FDMUM7UUFFRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUU7YUFDckIsSUFBSSxDQUFDLGNBQU0sT0FBQSxJQUFBLGlDQUFZLEdBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxzQkFBVSxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsRUFBNUQsQ0FBNEQsQ0FBQzthQUN4RSxJQUFJLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQXJDLENBQXFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQ0gsV0FBQztBQUFELENBQUMsQUFwREQsSUFvREM7QUFwRFksb0JBQUk7QUFzRGpCLFNBQVMsZUFBZSxDQUFDLElBQWdCO0lBQ3ZDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE9BQU8sSUFBQSw0QkFBUSxFQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3ZCO0lBRUQsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzVCLE9BQU8sSUFBSSxVQUFVLENBQ25CLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLFVBQVUsRUFDZixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsQ0FDL0MsQ0FBQztLQUNIO0lBRUQsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZnJvbVV0ZjggfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC11dGY4LWJyb3dzZXJcIjtcbmltcG9ydCB7IGlzRW1wdHlEYXRhIH0gZnJvbSBcIi4vaXNFbXB0eURhdGFcIjtcbmltcG9ydCB7IEVNUFRZX0RBVEFfU0hBXzEsIFNIQV8xX0hBU0gsIFNIQV8xX0hNQUNfQUxHTyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgbG9jYXRlV2luZG93IH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtbG9jYXRlLXdpbmRvd1wiO1xuXG5leHBvcnQgY2xhc3MgU2hhMSBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIHJlYWRvbmx5IGtleTogUHJvbWlzZTxDcnlwdG9LZXk+IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHRvSGFzaDogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KDApO1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMua2V5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsb2NhdGVXaW5kb3coKVxuICAgICAgICAgIC5jcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAgIFwicmF3XCIsXG4gICAgICAgICAgICBjb252ZXJ0VG9CdWZmZXIoc2VjcmV0KSxcbiAgICAgICAgICAgIFNIQV8xX0hNQUNfQUxHTyxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgW1wic2lnblwiXVxuICAgICAgICAgIClcbiAgICAgICAgICAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmtleS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKGRhdGE6IFNvdXJjZURhdGEpOiB2b2lkIHtcbiAgICBpZiAoaXNFbXB0eURhdGEoZGF0YSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGUgPSBjb252ZXJ0VG9CdWZmZXIoZGF0YSk7XG4gICAgY29uc3QgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgdGhpcy50b0hhc2guYnl0ZUxlbmd0aCArIHVwZGF0ZS5ieXRlTGVuZ3RoXG4gICAgKTtcbiAgICB0eXBlZEFycmF5LnNldCh0aGlzLnRvSGFzaCwgMCk7XG4gICAgdHlwZWRBcnJheS5zZXQodXBkYXRlLCB0aGlzLnRvSGFzaC5ieXRlTGVuZ3RoKTtcbiAgICB0aGlzLnRvSGFzaCA9IHR5cGVkQXJyYXk7XG4gIH1cblxuICBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgaWYgKHRoaXMua2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5rZXkudGhlbigoa2V5KSA9PlxuICAgICAgICBsb2NhdGVXaW5kb3coKVxuICAgICAgICAgIC5jcnlwdG8uc3VidGxlLnNpZ24oU0hBXzFfSE1BQ19BTEdPLCBrZXksIHRoaXMudG9IYXNoKVxuICAgICAgICAgIC50aGVuKChkYXRhKSA9PiBuZXcgVWludDhBcnJheShkYXRhKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlzRW1wdHlEYXRhKHRoaXMudG9IYXNoKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShFTVBUWV9EQVRBX1NIQV8xKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IGxvY2F0ZVdpbmRvdygpLmNyeXB0by5zdWJ0bGUuZGlnZXN0KFNIQV8xX0hBU0gsIHRoaXMudG9IYXNoKSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiBQcm9taXNlLnJlc29sdmUobmV3IFVpbnQ4QXJyYXkoZGF0YSkpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0VG9CdWZmZXIoZGF0YTogU291cmNlRGF0YSk6IFVpbnQ4QXJyYXkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZnJvbVV0ZjgoZGF0YSk7XG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgICAgZGF0YS5idWZmZXIsXG4gICAgICBkYXRhLmJ5dGVPZmZzZXQsXG4gICAgICBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTtcbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha1-browser/build/webCryptoSha1.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha1-browser/node_modules/tslib/tslib.es6.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha1-browser/node_modules/tslib/tslib.es6.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__values\": () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha1-browser/node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/constants.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/constants.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;\nexports.SHA_256_HASH = { name: \"SHA-256\" };\nexports.SHA_256_HMAC_ALGO = {\n    name: \"HMAC\",\n    hash: exports.SHA_256_HASH\n};\nexports.EMPTY_DATA_SHA_256 = new Uint8Array([\n    227,\n    176,\n    196,\n    66,\n    152,\n    252,\n    28,\n    20,\n    154,\n    251,\n    244,\n    200,\n    153,\n    111,\n    185,\n    36,\n    39,\n    174,\n    65,\n    228,\n    100,\n    155,\n    147,\n    76,\n    164,\n    149,\n    153,\n    27,\n    120,\n    82,\n    184,\n    85\n]);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBYSxRQUFBLFlBQVksR0FBd0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7QUFFeEQsUUFBQSxpQkFBaUIsR0FBZ0Q7SUFDNUUsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsb0JBQVk7Q0FDbkIsQ0FBQztBQUVXLFFBQUEsa0JBQWtCLEdBQUcsSUFBSSxVQUFVLENBQUM7SUFDL0MsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsRUFBRTtJQUNGLEdBQUc7SUFDSCxHQUFHO0lBQ0gsRUFBRTtJQUNGLEVBQUU7SUFDRixHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsRUFBRTtJQUNGLEVBQUU7SUFDRixHQUFHO0lBQ0gsRUFBRTtJQUNGLEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxFQUFFO0lBQ0YsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsRUFBRTtJQUNGLEdBQUc7SUFDSCxFQUFFO0lBQ0YsR0FBRztJQUNILEVBQUU7Q0FDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgU0hBXzI1Nl9IQVNIOiB7IG5hbWU6IFwiU0hBLTI1NlwiIH0gPSB7IG5hbWU6IFwiU0hBLTI1NlwiIH07XG5cbmV4cG9ydCBjb25zdCBTSEFfMjU2X0hNQUNfQUxHTzogeyBuYW1lOiBcIkhNQUNcIjsgaGFzaDogeyBuYW1lOiBcIlNIQS0yNTZcIiB9IH0gPSB7XG4gIG5hbWU6IFwiSE1BQ1wiLFxuICBoYXNoOiBTSEFfMjU2X0hBU0hcbn07XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9EQVRBX1NIQV8yNTYgPSBuZXcgVWludDhBcnJheShbXG4gIDIyNyxcbiAgMTc2LFxuICAxOTYsXG4gIDY2LFxuICAxNTIsXG4gIDI1MixcbiAgMjgsXG4gIDIwLFxuICAxNTQsXG4gIDI1MSxcbiAgMjQ0LFxuICAyMDAsXG4gIDE1MyxcbiAgMTExLFxuICAxODUsXG4gIDM2LFxuICAzOSxcbiAgMTc0LFxuICA2NSxcbiAgMjI4LFxuICAxMDAsXG4gIDE1NSxcbiAgMTQ3LFxuICA3NixcbiAgMTY0LFxuICAxNDksXG4gIDE1MyxcbiAgMjcsXG4gIDEyMCxcbiAgODIsXG4gIDE4NCxcbiAgODVcbl0pO1xuIl19\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-browser/build/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sha256 = void 0;\nvar ie11Sha256_1 = __webpack_require__(/*! ./ie11Sha256 */ \"./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js\");\nvar webCryptoSha256_1 = __webpack_require__(/*! ./webCryptoSha256 */ \"./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js\");\nvar sha256_js_1 = __webpack_require__(/*! @aws-crypto/sha256-js */ \"./node_modules/@aws-crypto/sha256-js/build/index.js\");\nvar supports_web_crypto_1 = __webpack_require__(/*! @aws-crypto/supports-web-crypto */ \"./node_modules/@aws-crypto/supports-web-crypto/build/index.js\");\nvar ie11_detection_1 = __webpack_require__(/*! @aws-crypto/ie11-detection */ \"./node_modules/@aws-crypto/ie11-detection/build/index.js\");\nvar util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ \"./node_modules/@aws-sdk/util-locate-window/dist-es/index.js\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {\n            this.hash = new webCryptoSha256_1.Sha256(secret);\n        }\n        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {\n            this.hash = new ie11Sha256_1.Sha256(secret);\n        }\n        else {\n            this.hash = new sha256_js_1.Sha256(secret);\n        }\n    }\n    Sha256.prototype.update = function (data, encoding) {\n        this.hash.update(data, encoding);\n    };\n    Sha256.prototype.digest = function () {\n        return this.hash.digest();\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3NQbGF0Zm9ybVNoYTI1Ni5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jcm9zc1BsYXRmb3JtU2hhMjU2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUFvRDtBQUNwRCxxREFBOEQ7QUFDOUQsbURBQTJEO0FBRTNELHVFQUFvRTtBQUNwRSw2REFBd0Q7QUFDeEQsa0VBQTJEO0FBRTNEO0lBR0UsZ0JBQVksTUFBbUI7UUFDN0IsSUFBSSxJQUFBLHVDQUFpQixFQUFDLElBQUEsaUNBQVksR0FBRSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLHdCQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekM7YUFBTSxJQUFJLElBQUEsMkJBQVUsRUFBQyxJQUFBLGlDQUFZLEdBQUUsQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxtQkFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BDO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksa0JBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFRCx1QkFBTSxHQUFOLFVBQU8sSUFBZ0IsRUFBRSxRQUFzQztRQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHVCQUFNLEdBQU47UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBcEJELElBb0JDO0FBcEJZLHdCQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhMjU2IGFzIEllMTFTaGEyNTYgfSBmcm9tIFwiLi9pZTExU2hhMjU2XCI7XG5pbXBvcnQgeyBTaGEyNTYgYXMgV2ViQ3J5cHRvU2hhMjU2IH0gZnJvbSBcIi4vd2ViQ3J5cHRvU2hhMjU2XCI7XG5pbXBvcnQgeyBTaGEyNTYgYXMgSnNTaGEyNTYgfSBmcm9tIFwiQGF3cy1jcnlwdG8vc2hhMjU2LWpzXCI7XG5pbXBvcnQgeyBIYXNoLCBTb3VyY2VEYXRhIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBzdXBwb3J0c1dlYkNyeXB0byB9IGZyb20gXCJAYXdzLWNyeXB0by9zdXBwb3J0cy13ZWItY3J5cHRvXCI7XG5pbXBvcnQgeyBpc01zV2luZG93IH0gZnJvbSBcIkBhd3MtY3J5cHRvL2llMTEtZGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBsb2NhdGVXaW5kb3cgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1sb2NhdGUtd2luZG93XCI7XG5cbmV4cG9ydCBjbGFzcyBTaGEyNTYgaW1wbGVtZW50cyBIYXNoIHtcbiAgcHJpdmF0ZSByZWFkb25seSBoYXNoOiBIYXNoO1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc3VwcG9ydHNXZWJDcnlwdG8obG9jYXRlV2luZG93KCkpKSB7XG4gICAgICB0aGlzLmhhc2ggPSBuZXcgV2ViQ3J5cHRvU2hhMjU2KHNlY3JldCk7XG4gICAgfSBlbHNlIGlmIChpc01zV2luZG93KGxvY2F0ZVdpbmRvdygpKSkge1xuICAgICAgdGhpcy5oYXNoID0gbmV3IEllMTFTaGEyNTYoc2VjcmV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oYXNoID0gbmV3IEpzU2hhMjU2KHNlY3JldCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKGRhdGE6IFNvdXJjZURhdGEsIGVuY29kaW5nPzogXCJ1dGY4XCIgfCBcImFzY2lpXCIgfCBcImxhdGluMVwiKTogdm9pZCB7XG4gICAgdGhpcy5oYXNoLnVwZGF0ZShkYXRhLCBlbmNvZGluZyk7XG4gIH1cblxuICBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaC5kaWdlc3QoKTtcbiAgfVxufVxuIl19\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sha256 = void 0;\nvar isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */ \"./node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-crypto/sha256-browser/build/constants.js\");\nvar util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js\");\nvar util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ \"./node_modules/@aws-sdk/util-locate-window/dist-es/index.js\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        if (secret) {\n            this.operation = getKeyPromise(secret).then(function (keyData) {\n                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);\n            });\n            this.operation.catch(function () { });\n        }\n        else {\n            this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-256\"));\n        }\n    }\n    Sha256.prototype.update = function (toHash) {\n        var _this = this;\n        if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n            return;\n        }\n        this.operation = this.operation.then(function (operation) {\n            operation.onerror = function () {\n                _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n            };\n            operation.process(toArrayBufferView(toHash));\n            return operation;\n        });\n        this.operation.catch(function () { });\n    };\n    Sha256.prototype.digest = function () {\n        return this.operation.then(function (operation) {\n            return new Promise(function (resolve, reject) {\n                operation.onerror = function () {\n                    reject(new Error(\"Error encountered finalizing hash\"));\n                };\n                operation.oncomplete = function () {\n                    if (operation.result) {\n                        resolve(new Uint8Array(operation.result));\n                    }\n                    reject(new Error(\"Error encountered finalizing hash\"));\n                };\n                operation.finish();\n            });\n        });\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\nfunction getKeyPromise(secret) {\n    return new Promise(function (resolve, reject) {\n        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]);\n        keyOperation.oncomplete = function () {\n            if (keyOperation.result) {\n                resolve(keyOperation.result);\n            }\n            reject(new Error(\"ImportKey completed without importing key.\"));\n        };\n        keyOperation.onerror = function () {\n            reject(new Error(\"ImportKey failed to import key.\"));\n        };\n    });\n}\nfunction toArrayBufferView(data) {\n    if (typeof data === \"string\") {\n        return (0, util_utf8_browser_1.fromUtf8)(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWUxMVNoYTI1Ni5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pZTExU2hhMjU2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUE0QztBQUM1Qyx5Q0FBZ0Q7QUFFaEQsZ0VBQXNEO0FBRXRELGtFQUEyRDtBQUUzRDtJQUdFLGdCQUFZLE1BQW1CO1FBQzdCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTztnQkFDakQsT0FBQyxJQUFBLGlDQUFZLEdBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDL0MsNkJBQWlCLEVBQ2pCLE9BQU8sQ0FDUjtZQUhELENBR0MsQ0FDRixDQUFDO1lBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsY0FBTyxDQUFDLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUM3QixJQUFBLGlDQUFZLEdBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FDL0QsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELHVCQUFNLEdBQU4sVUFBTyxNQUFrQjtRQUF6QixpQkFnQkM7UUFmQyxJQUFJLElBQUEseUJBQVcsRUFBQyxNQUFNLENBQUMsRUFBRTtZQUN2QixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQUEsU0FBUztZQUM1QyxTQUFTLENBQUMsT0FBTyxHQUFHO2dCQUNsQixLQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQzdCLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQzdDLENBQUM7WUFDSixDQUFDLENBQUM7WUFDRixTQUFTLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFN0MsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCx1QkFBTSxHQUFOO1FBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDeEIsVUFBQSxTQUFTO1lBQ1AsT0FBQSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO2dCQUMxQixTQUFTLENBQUMsT0FBTyxHQUFHO29CQUNsQixNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDLENBQUM7Z0JBQ0YsU0FBUyxDQUFDLFVBQVUsR0FBRztvQkFDckIsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO3dCQUNwQixPQUFPLENBQUMsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQzNDO29CQUNELE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELENBQUMsQ0FBQztnQkFFRixTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDckIsQ0FBQyxDQUFDO1FBWkYsQ0FZRSxDQUNMLENBQUM7SUFDSixDQUFDO0lBQ0gsYUFBQztBQUFELENBQUMsQUF2REQsSUF1REM7QUF2RFksd0JBQU07QUF5RG5CLFNBQVMsYUFBYSxDQUFDLE1BQWtCO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxJQUFNLFlBQVksR0FBSSxJQUFBLGlDQUFZLEdBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FDekUsS0FBSyxFQUNMLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUN6Qiw2QkFBaUIsRUFDakIsS0FBSyxFQUNMLENBQUMsTUFBTSxDQUFDLENBQ1QsQ0FBQztRQUVGLFlBQVksQ0FBQyxVQUFVLEdBQUc7WUFDeEIsSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO2dCQUN2QixPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzlCO1lBRUQsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUM7UUFDRixZQUFZLENBQUMsT0FBTyxHQUFHO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxJQUFnQjtJQUN6QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixPQUFPLElBQUEsNEJBQVEsRUFBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtJQUVELElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLElBQUksVUFBVSxDQUNuQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQy9DLENBQUM7S0FDSDtJQUVELE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRW1wdHlEYXRhIH0gZnJvbSBcIi4vaXNFbXB0eURhdGFcIjtcbmltcG9ydCB7IFNIQV8yNTZfSE1BQ19BTEdPIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBIYXNoLCBTb3VyY2VEYXRhIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBmcm9tVXRmOCB9IGZyb20gXCJAYXdzLXNkay91dGlsLXV0ZjgtYnJvd3NlclwiO1xuaW1wb3J0IHsgQ3J5cHRvT3BlcmF0aW9uLCBLZXksIE1zV2luZG93IH0gZnJvbSBcIkBhd3MtY3J5cHRvL2llMTEtZGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBsb2NhdGVXaW5kb3cgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1sb2NhdGUtd2luZG93XCI7XG5cbmV4cG9ydCBjbGFzcyBTaGEyNTYgaW1wbGVtZW50cyBIYXNoIHtcbiAgcHJpdmF0ZSBvcGVyYXRpb246IFByb21pc2U8Q3J5cHRvT3BlcmF0aW9uPjtcblxuICBjb25zdHJ1Y3RvcihzZWNyZXQ/OiBTb3VyY2VEYXRhKSB7XG4gICAgaWYgKHNlY3JldCkge1xuICAgICAgdGhpcy5vcGVyYXRpb24gPSBnZXRLZXlQcm9taXNlKHNlY3JldCkudGhlbihrZXlEYXRhID0+XG4gICAgICAgIChsb2NhdGVXaW5kb3coKSBhcyBNc1dpbmRvdykubXNDcnlwdG8uc3VidGxlLnNpZ24oXG4gICAgICAgICAgU0hBXzI1Nl9ITUFDX0FMR08sXG4gICAgICAgICAga2V5RGF0YVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgdGhpcy5vcGVyYXRpb24uY2F0Y2goKCkgPT4ge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wZXJhdGlvbiA9IFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgKGxvY2F0ZVdpbmRvdygpIGFzIE1zV2luZG93KS5tc0NyeXB0by5zdWJ0bGUuZGlnZXN0KFwiU0hBLTI1NlwiKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUodG9IYXNoOiBTb3VyY2VEYXRhKTogdm9pZCB7XG4gICAgaWYgKGlzRW1wdHlEYXRhKHRvSGFzaCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm9wZXJhdGlvbiA9IHRoaXMub3BlcmF0aW9uLnRoZW4ob3BlcmF0aW9uID0+IHtcbiAgICAgIG9wZXJhdGlvbi5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBFcnJvcihcIkVycm9yIGVuY291bnRlcmVkIHVwZGF0aW5nIGhhc2hcIilcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgICBvcGVyYXRpb24ucHJvY2Vzcyh0b0FycmF5QnVmZmVyVmlldyh0b0hhc2gpKTtcblxuICAgICAgcmV0dXJuIG9wZXJhdGlvbjtcbiAgICB9KTtcbiAgICB0aGlzLm9wZXJhdGlvbi5jYXRjaCgoKSA9PiB7fSk7XG4gIH1cblxuICBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIHRoaXMub3BlcmF0aW9uLnRoZW48VWludDhBcnJheT4oXG4gICAgICBvcGVyYXRpb24gPT5cbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIG9wZXJhdGlvbi5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkVycm9yIGVuY291bnRlcmVkIGZpbmFsaXppbmcgaGFzaFwiKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBvcGVyYXRpb24ub25jb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcGVyYXRpb24ucmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkob3BlcmF0aW9uLnJlc3VsdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkVycm9yIGVuY291bnRlcmVkIGZpbmFsaXppbmcgaGFzaFwiKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIG9wZXJhdGlvbi5maW5pc2goKTtcbiAgICAgICAgfSlcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEtleVByb21pc2Uoc2VjcmV0OiBTb3VyY2VEYXRhKTogUHJvbWlzZTxLZXk+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBrZXlPcGVyYXRpb24gPSAobG9jYXRlV2luZG93KCkgYXMgTXNXaW5kb3cpLm1zQ3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICBcInJhd1wiLFxuICAgICAgdG9BcnJheUJ1ZmZlclZpZXcoc2VjcmV0KSxcbiAgICAgIFNIQV8yNTZfSE1BQ19BTEdPLFxuICAgICAgZmFsc2UsXG4gICAgICBbXCJzaWduXCJdXG4gICAgKTtcblxuICAgIGtleU9wZXJhdGlvbi5vbmNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKGtleU9wZXJhdGlvbi5yZXN1bHQpIHtcbiAgICAgICAgcmVzb2x2ZShrZXlPcGVyYXRpb24ucmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkltcG9ydEtleSBjb21wbGV0ZWQgd2l0aG91dCBpbXBvcnRpbmcga2V5LlwiKSk7XG4gICAgfTtcbiAgICBrZXlPcGVyYXRpb24ub25lcnJvciA9ICgpID0+IHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJJbXBvcnRLZXkgZmFpbGVkIHRvIGltcG9ydCBrZXkuXCIpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheUJ1ZmZlclZpZXcoZGF0YTogU291cmNlRGF0YSk6IFVpbnQ4QXJyYXkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZnJvbVV0ZjgoZGF0YSk7XG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgICAgZGF0YS5idWZmZXIsXG4gICAgICBkYXRhLmJ5dGVPZmZzZXQsXG4gICAgICBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTtcbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./crossPlatformSha256 */ \"./node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js\"), exports);\nvar ie11Sha256_1 = __webpack_require__(/*! ./ie11Sha256 */ \"./node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js\");\nObject.defineProperty(exports, \"Ie11Sha256\", ({ enumerable: true, get: function () { return ie11Sha256_1.Sha256; } }));\nvar webCryptoSha256_1 = __webpack_require__(/*! ./webCryptoSha256 */ \"./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js\");\nObject.defineProperty(exports, \"WebCryptoSha256\", ({ enumerable: true, get: function () { return webCryptoSha256_1.Sha256; } }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHFFQUFzQztBQUN0QywyQ0FBb0Q7QUFBM0Msd0dBQUEsTUFBTSxPQUFjO0FBQzdCLHFEQUE4RDtBQUFyRCxrSEFBQSxNQUFNLE9BQW1CIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY3Jvc3NQbGF0Zm9ybVNoYTI1NlwiO1xuZXhwb3J0IHsgU2hhMjU2IGFzIEllMTFTaGEyNTYgfSBmcm9tIFwiLi9pZTExU2hhMjU2XCI7XG5leHBvcnQgeyBTaGEyNTYgYXMgV2ViQ3J5cHRvU2hhMjU2IH0gZnJvbSBcIi4vd2ViQ3J5cHRvU2hhMjU2XCI7XG4iXX0=\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-browser/build/index.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEmptyData = void 0;\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nexports.isEmptyData = isEmptyData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFbXB0eURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaXNFbXB0eURhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsV0FBVyxDQUFDLElBQWdCO0lBQzFDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7S0FDMUI7SUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFORCxrQ0FNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlEYXRhKGRhdGE6IFNvdXJjZURhdGEpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aCA9PT0gMDtcbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sha256 = void 0;\nvar util_1 = __webpack_require__(/*! @aws-crypto/util */ \"./node_modules/@aws-crypto/util/build/index.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-crypto/sha256-browser/build/constants.js\");\nvar util_locate_window_1 = __webpack_require__(/*! @aws-sdk/util-locate-window */ \"./node_modules/@aws-sdk/util-locate-window/dist-es/index.js\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        this.toHash = new Uint8Array(0);\n        if (secret !== void 0) {\n            this.key = new Promise(function (resolve, reject) {\n                (0, util_locate_window_1.locateWindow)()\n                    .crypto.subtle.importKey(\"raw\", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"])\n                    .then(resolve, reject);\n            });\n            this.key.catch(function () { });\n        }\n    }\n    Sha256.prototype.update = function (data) {\n        if ((0, util_1.isEmptyData)(data)) {\n            return;\n        }\n        var update = (0, util_1.convertToBuffer)(data);\n        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n        typedArray.set(this.toHash, 0);\n        typedArray.set(update, this.toHash.byteLength);\n        this.toHash = typedArray;\n    };\n    Sha256.prototype.digest = function () {\n        var _this = this;\n        if (this.key) {\n            return this.key.then(function (key) {\n                return (0, util_locate_window_1.locateWindow)()\n                    .crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash)\n                    .then(function (data) { return new Uint8Array(data); });\n            });\n        }\n        if ((0, util_1.isEmptyData)(this.toHash)) {\n            return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);\n        }\n        return Promise.resolve()\n            .then(function () {\n            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);\n        })\n            .then(function (data) { return Promise.resolve(new Uint8Array(data)); });\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViQ3J5cHRvU2hhMjU2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dlYkNyeXB0b1NoYTI1Ni50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx5Q0FBZ0U7QUFDaEUseUNBSXFCO0FBQ3JCLGtFQUEyRDtBQUUzRDtJQUlFLGdCQUFZLE1BQW1CO1FBRnZCLFdBQU0sR0FBZSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUc3QyxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07Z0JBQ3JDLElBQUEsaUNBQVksR0FBRTtxQkFDWCxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FDdEIsS0FBSyxFQUNMLElBQUEsc0JBQWUsRUFBQyxNQUFNLENBQUMsRUFDdkIsNkJBQWlCLEVBQ2pCLEtBQUssRUFDTCxDQUFDLE1BQU0sQ0FBQyxDQUNUO3FCQUNBLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELHVCQUFNLEdBQU4sVUFBTyxJQUFnQjtRQUNyQixJQUFJLElBQUEsa0JBQVcsRUFBQyxJQUFJLENBQUMsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFFRCxJQUFNLE1BQU0sR0FBRyxJQUFBLHNCQUFlLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQzNDLENBQUM7UUFDRixVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQsdUJBQU0sR0FBTjtRQUFBLGlCQWtCQztRQWpCQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRztnQkFDdkIsT0FBQSxJQUFBLGlDQUFZLEdBQUU7cUJBQ1gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsNkJBQWlCLEVBQUUsR0FBRyxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUM7cUJBQ3ZELElBQUksQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFwQixDQUFvQixDQUFDO1lBRnZDLENBRXVDLENBQ3hDLENBQUM7U0FDSDtRQUVELElBQUksSUFBQSxrQkFBVyxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM1QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsOEJBQWtCLENBQUMsQ0FBQztTQUM1QztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRTthQUNyQixJQUFJLENBQUM7WUFDSixPQUFBLElBQUEsaUNBQVksR0FBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUFZLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQztRQUE5RCxDQUE4RCxDQUMvRDthQUNBLElBQUksQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBckMsQ0FBcUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFDSCxhQUFDO0FBQUQsQ0FBQyxBQXRERCxJQXNEQztBQXREWSx3QkFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhc2gsIFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IGlzRW1wdHlEYXRhLCBjb252ZXJ0VG9CdWZmZXIgfSBmcm9tIFwiQGF3cy1jcnlwdG8vdXRpbFwiO1xuaW1wb3J0IHtcbiAgRU1QVFlfREFUQV9TSEFfMjU2LFxuICBTSEFfMjU2X0hBU0gsXG4gIFNIQV8yNTZfSE1BQ19BTEdPLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGxvY2F0ZVdpbmRvdyB9IGZyb20gXCJAYXdzLXNkay91dGlsLWxvY2F0ZS13aW5kb3dcIjtcblxuZXhwb3J0IGNsYXNzIFNoYTI1NiBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIHJlYWRvbmx5IGtleTogUHJvbWlzZTxDcnlwdG9LZXk+IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHRvSGFzaDogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KDApO1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMua2V5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsb2NhdGVXaW5kb3coKVxuICAgICAgICAgIC5jcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAgIFwicmF3XCIsXG4gICAgICAgICAgICBjb252ZXJ0VG9CdWZmZXIoc2VjcmV0KSxcbiAgICAgICAgICAgIFNIQV8yNTZfSE1BQ19BTEdPLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBbXCJzaWduXCJdXG4gICAgICAgICAgKVxuICAgICAgICAgIC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMua2V5LmNhdGNoKCgpID0+IHt9KTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGUoZGF0YTogU291cmNlRGF0YSk6IHZvaWQge1xuICAgIGlmIChpc0VtcHR5RGF0YShkYXRhKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZSA9IGNvbnZlcnRUb0J1ZmZlcihkYXRhKTtcbiAgICBjb25zdCB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoXG4gICAgICB0aGlzLnRvSGFzaC5ieXRlTGVuZ3RoICsgdXBkYXRlLmJ5dGVMZW5ndGhcbiAgICApO1xuICAgIHR5cGVkQXJyYXkuc2V0KHRoaXMudG9IYXNoLCAwKTtcbiAgICB0eXBlZEFycmF5LnNldCh1cGRhdGUsIHRoaXMudG9IYXNoLmJ5dGVMZW5ndGgpO1xuICAgIHRoaXMudG9IYXNoID0gdHlwZWRBcnJheTtcbiAgfVxuXG4gIGRpZ2VzdCgpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICBpZiAodGhpcy5rZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmtleS50aGVuKChrZXkpID0+XG4gICAgICAgIGxvY2F0ZVdpbmRvdygpXG4gICAgICAgICAgLmNyeXB0by5zdWJ0bGUuc2lnbihTSEFfMjU2X0hNQUNfQUxHTywga2V5LCB0aGlzLnRvSGFzaClcbiAgICAgICAgICAudGhlbigoZGF0YSkgPT4gbmV3IFVpbnQ4QXJyYXkoZGF0YSkpXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChpc0VtcHR5RGF0YSh0aGlzLnRvSGFzaCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoRU1QVFlfREFUQV9TSEFfMjU2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+XG4gICAgICAgIGxvY2F0ZVdpbmRvdygpLmNyeXB0by5zdWJ0bGUuZGlnZXN0KFNIQV8yNTZfSEFTSCwgdGhpcy50b0hhc2gpXG4gICAgICApXG4gICAgICAudGhlbigoZGF0YSkgPT4gUHJvbWlzZS5yZXNvbHZlKG5ldyBVaW50OEFycmF5KGRhdGEpKSk7XG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__values\": () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-browser/node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/build/RawSha256.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/build/RawSha256.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RawSha256 = void 0;\nvar constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-crypto/sha256-js/build/constants.js\");\n/**\n * @internal\n */\nvar RawSha256 = /** @class */ (function () {\n    function RawSha256() {\n        this.state = Int32Array.from(constants_1.INIT);\n        this.temp = new Int32Array(64);\n        this.buffer = new Uint8Array(64);\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        /**\n         * @internal\n         */\n        this.finished = false;\n    }\n    RawSha256.prototype.update = function (data) {\n        if (this.finished) {\n            throw new Error(\"Attempted to update an already finished hash.\");\n        }\n        var position = 0;\n        var byteLength = data.byteLength;\n        this.bytesHashed += byteLength;\n        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {\n            throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n        }\n        while (byteLength > 0) {\n            this.buffer[this.bufferLength++] = data[position++];\n            byteLength--;\n            if (this.bufferLength === constants_1.BLOCK_SIZE) {\n                this.hashBuffer();\n                this.bufferLength = 0;\n            }\n        }\n    };\n    RawSha256.prototype.digest = function () {\n        if (!this.finished) {\n            var bitsHashed = this.bytesHashed * 8;\n            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n            var undecoratedLength = this.bufferLength;\n            bufferView.setUint8(this.bufferLength++, 0x80);\n            // Ensure the final block has enough room for the hashed length\n            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {\n                for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {\n                    bufferView.setUint8(i, 0);\n                }\n                this.hashBuffer();\n                this.bufferLength = 0;\n            }\n            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {\n                bufferView.setUint8(i, 0);\n            }\n            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);\n            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);\n            this.hashBuffer();\n            this.finished = true;\n        }\n        // The value in state is little-endian rather than big-endian, so flip\n        // each word into a new Uint8Array\n        var out = new Uint8Array(constants_1.DIGEST_LENGTH);\n        for (var i = 0; i < 8; i++) {\n            out[i * 4] = (this.state[i] >>> 24) & 0xff;\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n        }\n        return out;\n    };\n    RawSha256.prototype.hashBuffer = function () {\n        var _a = this, buffer = _a.buffer, state = _a.state;\n        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];\n        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n            if (i < 16) {\n                this.temp[i] =\n                    ((buffer[i * 4] & 0xff) << 24) |\n                        ((buffer[i * 4 + 1] & 0xff) << 16) |\n                        ((buffer[i * 4 + 2] & 0xff) << 8) |\n                        (buffer[i * 4 + 3] & 0xff);\n            }\n            else {\n                var u = this.temp[i - 2];\n                var t1_1 = ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);\n                u = this.temp[i - 15];\n                var t2_1 = ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);\n                this.temp[i] =\n                    ((t1_1 + this.temp[i - 7]) | 0) + ((t2_1 + this.temp[i - 16]) | 0);\n            }\n            var t1 = ((((((state4 >>> 6) | (state4 << 26)) ^\n                ((state4 >>> 11) | (state4 << 21)) ^\n                ((state4 >>> 25) | (state4 << 7))) +\n                ((state4 & state5) ^ (~state4 & state6))) |\n                0) +\n                ((state7 + ((constants_1.KEY[i] + this.temp[i]) | 0)) | 0)) |\n                0;\n            var t2 = ((((state0 >>> 2) | (state0 << 30)) ^\n                ((state0 >>> 13) | (state0 << 19)) ^\n                ((state0 >>> 22) | (state0 << 10))) +\n                ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |\n                0;\n            state7 = state6;\n            state6 = state5;\n            state5 = state4;\n            state4 = (state3 + t1) | 0;\n            state3 = state2;\n            state2 = state1;\n            state1 = state0;\n            state0 = (t1 + t2) | 0;\n        }\n        state[0] += state0;\n        state[1] += state1;\n        state[2] += state2;\n        state[3] += state3;\n        state[4] += state4;\n        state[5] += state5;\n        state[6] += state6;\n        state[7] += state7;\n    };\n    return RawSha256;\n}());\nexports.RawSha256 = RawSha256;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-js/build/RawSha256.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/build/constants.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/build/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;\n/**\n * @internal\n */\nexports.BLOCK_SIZE = 64;\n/**\n * @internal\n */\nexports.DIGEST_LENGTH = 32;\n/**\n * @internal\n */\nexports.KEY = new Uint32Array([\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n]);\n/**\n * @internal\n */\nexports.INIT = [\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n];\n/**\n * @internal\n */\nexports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNVLFFBQUEsVUFBVSxHQUFXLEVBQUUsQ0FBQztBQUVyQzs7R0FFRztBQUNVLFFBQUEsYUFBYSxHQUFXLEVBQUUsQ0FBQztBQUV4Qzs7R0FFRztBQUNVLFFBQUEsR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDO0lBQ2pDLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7Q0FDWCxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNVLFFBQUEsSUFBSSxHQUFHO0lBQ2xCLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0NBQ1gsQ0FBQztBQUVGOztHQUVHO0FBQ1UsUUFBQSxtQkFBbUIsR0FBRyxTQUFBLENBQUMsRUFBSSxFQUFFLENBQUEsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQkxPQ0tfU0laRTogbnVtYmVyID0gNjQ7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBESUdFU1RfTEVOR1RIOiBudW1iZXIgPSAzMjtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEtFWSA9IG5ldyBVaW50MzJBcnJheShbXG4gIDB4NDI4YTJmOTgsXG4gIDB4NzEzNzQ0OTEsXG4gIDB4YjVjMGZiY2YsXG4gIDB4ZTliNWRiYTUsXG4gIDB4Mzk1NmMyNWIsXG4gIDB4NTlmMTExZjEsXG4gIDB4OTIzZjgyYTQsXG4gIDB4YWIxYzVlZDUsXG4gIDB4ZDgwN2FhOTgsXG4gIDB4MTI4MzViMDEsXG4gIDB4MjQzMTg1YmUsXG4gIDB4NTUwYzdkYzMsXG4gIDB4NzJiZTVkNzQsXG4gIDB4ODBkZWIxZmUsXG4gIDB4OWJkYzA2YTcsXG4gIDB4YzE5YmYxNzQsXG4gIDB4ZTQ5YjY5YzEsXG4gIDB4ZWZiZTQ3ODYsXG4gIDB4MGZjMTlkYzYsXG4gIDB4MjQwY2ExY2MsXG4gIDB4MmRlOTJjNmYsXG4gIDB4NGE3NDg0YWEsXG4gIDB4NWNiMGE5ZGMsXG4gIDB4NzZmOTg4ZGEsXG4gIDB4OTgzZTUxNTIsXG4gIDB4YTgzMWM2NmQsXG4gIDB4YjAwMzI3YzgsXG4gIDB4YmY1OTdmYzcsXG4gIDB4YzZlMDBiZjMsXG4gIDB4ZDVhNzkxNDcsXG4gIDB4MDZjYTYzNTEsXG4gIDB4MTQyOTI5NjcsXG4gIDB4MjdiNzBhODUsXG4gIDB4MmUxYjIxMzgsXG4gIDB4NGQyYzZkZmMsXG4gIDB4NTMzODBkMTMsXG4gIDB4NjUwYTczNTQsXG4gIDB4NzY2YTBhYmIsXG4gIDB4ODFjMmM5MmUsXG4gIDB4OTI3MjJjODUsXG4gIDB4YTJiZmU4YTEsXG4gIDB4YTgxYTY2NGIsXG4gIDB4YzI0YjhiNzAsXG4gIDB4Yzc2YzUxYTMsXG4gIDB4ZDE5MmU4MTksXG4gIDB4ZDY5OTA2MjQsXG4gIDB4ZjQwZTM1ODUsXG4gIDB4MTA2YWEwNzAsXG4gIDB4MTlhNGMxMTYsXG4gIDB4MWUzNzZjMDgsXG4gIDB4Mjc0ODc3NGMsXG4gIDB4MzRiMGJjYjUsXG4gIDB4MzkxYzBjYjMsXG4gIDB4NGVkOGFhNGEsXG4gIDB4NWI5Y2NhNGYsXG4gIDB4NjgyZTZmZjMsXG4gIDB4NzQ4ZjgyZWUsXG4gIDB4NzhhNTYzNmYsXG4gIDB4ODRjODc4MTQsXG4gIDB4OGNjNzAyMDgsXG4gIDB4OTBiZWZmZmEsXG4gIDB4YTQ1MDZjZWIsXG4gIDB4YmVmOWEzZjcsXG4gIDB4YzY3MTc4ZjJcbl0pO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgSU5JVCA9IFtcbiAgMHg2YTA5ZTY2NyxcbiAgMHhiYjY3YWU4NSxcbiAgMHgzYzZlZjM3MixcbiAgMHhhNTRmZjUzYSxcbiAgMHg1MTBlNTI3ZixcbiAgMHg5YjA1Njg4YyxcbiAgMHgxZjgzZDlhYixcbiAgMHg1YmUwY2QxOVxuXTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9IQVNIQUJMRV9MRU5HVEggPSAyICoqIDUzIC0gMTtcbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-js/build/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/build/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/build/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js\");\n(0, tslib_1.__exportStar)(__webpack_require__(/*! ./jsSha256 */ \"./node_modules/@aws-crypto/sha256-js/build/jsSha256.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vanNTaGEyNTZcIjtcbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-js/build/index.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/build/jsSha256.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/build/jsSha256.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Sha256 = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-crypto/sha256-js/build/constants.js\");\nvar RawSha256_1 = __webpack_require__(/*! ./RawSha256 */ \"./node_modules/@aws-crypto/sha256-js/build/RawSha256.js\");\nvar util_1 = __webpack_require__(/*! @aws-crypto/util */ \"./node_modules/@aws-crypto/util/build/index.js\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        this.hash = new RawSha256_1.RawSha256();\n        if (secret) {\n            this.outer = new RawSha256_1.RawSha256();\n            var inner = bufferFromSecret(secret);\n            var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n            outer.set(inner);\n            for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n                inner[i] ^= 0x36;\n                outer[i] ^= 0x5c;\n            }\n            this.hash.update(inner);\n            this.outer.update(outer);\n            // overwrite the copied key in memory\n            for (var i = 0; i < inner.byteLength; i++) {\n                inner[i] = 0;\n            }\n        }\n    }\n    Sha256.prototype.update = function (toHash) {\n        if ((0, util_1.isEmptyData)(toHash) || this.error) {\n            return;\n        }\n        try {\n            this.hash.update((0, util_1.convertToBuffer)(toHash));\n        }\n        catch (e) {\n            this.error = e;\n        }\n    };\n    /* This synchronous method keeps compatibility\n     * with the v2 aws-sdk.\n     */\n    Sha256.prototype.digestSync = function () {\n        if (this.error) {\n            throw this.error;\n        }\n        if (this.outer) {\n            if (!this.outer.finished) {\n                this.outer.update(this.hash.digest());\n            }\n            return this.outer.digest();\n        }\n        return this.hash.digest();\n    };\n    /* The underlying digest method here is synchronous.\n     * To keep the same interface with the other hash functions\n     * the default is to expose this as an async method.\n     * However, it can sometimes be useful to have a sync method.\n     */\n    Sha256.prototype.digest = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            return (0, tslib_1.__generator)(this, function (_a) {\n                return [2 /*return*/, this.digestSync()];\n            });\n        });\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n    var input = (0, util_1.convertToBuffer)(secret);\n    if (input.byteLength > constants_1.BLOCK_SIZE) {\n        var bufferHash = new RawSha256_1.RawSha256();\n        bufferHash.update(input);\n        input = bufferHash.digest();\n    }\n    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n    buffer.set(input);\n    return buffer;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNTaGEyNTYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvanNTaGEyNTYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHlDQUF5QztBQUN6Qyx5Q0FBd0M7QUFFeEMseUNBQWdFO0FBRWhFO0lBS0UsZ0JBQVksTUFBbUI7UUFKZCxTQUFJLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUM7UUFLdEMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUkscUJBQVMsRUFBRSxDQUFDO1lBQzdCLElBQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZDLElBQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLHNCQUFVLENBQUMsQ0FBQztZQUN6QyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxzQkFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO2dCQUNqQixLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO2FBQ2xCO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFekIscUNBQXFDO1lBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN6QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2Q7U0FDRjtJQUNILENBQUM7SUFFRCx1QkFBTSxHQUFOLFVBQU8sTUFBa0I7UUFDdkIsSUFBSSxJQUFBLGtCQUFXLEVBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJO1lBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBQSxzQkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMkJBQVUsR0FBVjtRQUNFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNsQjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZDO1lBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzVCO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0csdUJBQU0sR0FBWjs7O2dCQUNFLHNCQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBQzs7O0tBQzFCO0lBQ0gsYUFBQztBQUFELENBQUMsQUFsRUQsSUFrRUM7QUFsRVksd0JBQU07QUFvRW5CLFNBQVMsZ0JBQWdCLENBQUMsTUFBa0I7SUFDMUMsSUFBSSxLQUFLLEdBQUcsSUFBQSxzQkFBZSxFQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXBDLElBQUksS0FBSyxDQUFDLFVBQVUsR0FBRyxzQkFBVSxFQUFFO1FBQ2pDLElBQU0sVUFBVSxHQUFHLElBQUkscUJBQVMsRUFBRSxDQUFDO1FBQ25DLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUM3QjtJQUVELElBQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLHNCQUFVLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xCLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCTE9DS19TSVpFIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBSYXdTaGEyNTYgfSBmcm9tIFwiLi9SYXdTaGEyNTZcIjtcbmltcG9ydCB7IEhhc2gsIFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IGlzRW1wdHlEYXRhLCBjb252ZXJ0VG9CdWZmZXIgfSBmcm9tIFwiQGF3cy1jcnlwdG8vdXRpbFwiO1xuXG5leHBvcnQgY2xhc3MgU2hhMjU2IGltcGxlbWVudHMgSGFzaCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGFzaCA9IG5ldyBSYXdTaGEyNTYoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRlcj86IFJhd1NoYTI1NjtcbiAgcHJpdmF0ZSBlcnJvcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHNlY3JldD86IFNvdXJjZURhdGEpIHtcbiAgICBpZiAoc2VjcmV0KSB7XG4gICAgICB0aGlzLm91dGVyID0gbmV3IFJhd1NoYTI1NigpO1xuICAgICAgY29uc3QgaW5uZXIgPSBidWZmZXJGcm9tU2VjcmV0KHNlY3JldCk7XG4gICAgICBjb25zdCBvdXRlciA9IG5ldyBVaW50OEFycmF5KEJMT0NLX1NJWkUpO1xuICAgICAgb3V0ZXIuc2V0KGlubmVyKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBCTE9DS19TSVpFOyBpKyspIHtcbiAgICAgICAgaW5uZXJbaV0gXj0gMHgzNjtcbiAgICAgICAgb3V0ZXJbaV0gXj0gMHg1YztcbiAgICAgIH1cblxuICAgICAgdGhpcy5oYXNoLnVwZGF0ZShpbm5lcik7XG4gICAgICB0aGlzLm91dGVyLnVwZGF0ZShvdXRlcik7XG5cbiAgICAgIC8vIG92ZXJ3cml0ZSB0aGUgY29waWVkIGtleSBpbiBtZW1vcnlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5uZXIuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlubmVyW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUodG9IYXNoOiBTb3VyY2VEYXRhKTogdm9pZCB7XG4gICAgaWYgKGlzRW1wdHlEYXRhKHRvSGFzaCkgfHwgdGhpcy5lcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmhhc2gudXBkYXRlKGNvbnZlcnRUb0J1ZmZlcih0b0hhc2gpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yID0gZTtcbiAgICB9XG4gIH1cblxuICAvKiBUaGlzIHN5bmNocm9ub3VzIG1ldGhvZCBrZWVwcyBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggdGhlIHYyIGF3cy1zZGsuXG4gICAqL1xuICBkaWdlc3RTeW5jKCk6IFVpbnQ4QXJyYXkge1xuICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICB0aHJvdyB0aGlzLmVycm9yO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm91dGVyKSB7XG4gICAgICBpZiAoIXRoaXMub3V0ZXIuZmluaXNoZWQpIHtcbiAgICAgICAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5oYXNoLmRpZ2VzdCgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaGFzaC5kaWdlc3QoKTtcbiAgfVxuXG4gIC8qIFRoZSB1bmRlcmx5aW5nIGRpZ2VzdCBtZXRob2QgaGVyZSBpcyBzeW5jaHJvbm91cy5cbiAgICogVG8ga2VlcCB0aGUgc2FtZSBpbnRlcmZhY2Ugd2l0aCB0aGUgb3RoZXIgaGFzaCBmdW5jdGlvbnNcbiAgICogdGhlIGRlZmF1bHQgaXMgdG8gZXhwb3NlIHRoaXMgYXMgYW4gYXN5bmMgbWV0aG9kLlxuICAgKiBIb3dldmVyLCBpdCBjYW4gc29tZXRpbWVzIGJlIHVzZWZ1bCB0byBoYXZlIGEgc3luYyBtZXRob2QuXG4gICAqL1xuICBhc3luYyBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIHRoaXMuZGlnZXN0U3luYygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckZyb21TZWNyZXQoc2VjcmV0OiBTb3VyY2VEYXRhKTogVWludDhBcnJheSB7XG4gIGxldCBpbnB1dCA9IGNvbnZlcnRUb0J1ZmZlcihzZWNyZXQpO1xuXG4gIGlmIChpbnB1dC5ieXRlTGVuZ3RoID4gQkxPQ0tfU0laRSkge1xuICAgIGNvbnN0IGJ1ZmZlckhhc2ggPSBuZXcgUmF3U2hhMjU2KCk7XG4gICAgYnVmZmVySGFzaC51cGRhdGUoaW5wdXQpO1xuICAgIGlucHV0ID0gYnVmZmVySGFzaC5kaWdlc3QoKTtcbiAgfVxuXG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KEJMT0NLX1NJWkUpO1xuICBidWZmZXIuc2V0KGlucHV0KTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-js/build/jsSha256.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__values\": () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/sha256-js/node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/supports-web-crypto/build/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-crypto/supports-web-crypto/build/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./supportsWebCrypto */ \"./node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vc3VwcG9ydHNXZWJDcnlwdG9cIjtcbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/supports-web-crypto/build/index.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js\");\nvar subtleCryptoMethods = [\n    \"decrypt\",\n    \"digest\",\n    \"encrypt\",\n    \"exportKey\",\n    \"generateKey\",\n    \"importKey\",\n    \"sign\",\n    \"verify\"\n];\nfunction supportsWebCrypto(window) {\n    if (supportsSecureRandom(window) &&\n        typeof window.crypto.subtle === \"object\") {\n        var subtle = window.crypto.subtle;\n        return supportsSubtleCrypto(subtle);\n    }\n    return false;\n}\nexports.supportsWebCrypto = supportsWebCrypto;\nfunction supportsSecureRandom(window) {\n    if (typeof window === \"object\" && typeof window.crypto === \"object\") {\n        var getRandomValues = window.crypto.getRandomValues;\n        return typeof getRandomValues === \"function\";\n    }\n    return false;\n}\nexports.supportsSecureRandom = supportsSecureRandom;\nfunction supportsSubtleCrypto(subtle) {\n    return (subtle &&\n        subtleCryptoMethods.every(function (methodName) { return typeof subtle[methodName] === \"function\"; }));\n}\nexports.supportsSubtleCrypto = supportsSubtleCrypto;\nfunction supportsZeroByteGCM(subtle) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var key, zeroByteAuthTag, _a;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!supportsSubtleCrypto(subtle))\n                        return [2 /*return*/, false];\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 4, , 5]);\n                    return [4 /*yield*/, subtle.generateKey({ name: \"AES-GCM\", length: 128 }, false, [\"encrypt\"])];\n                case 2:\n                    key = _b.sent();\n                    return [4 /*yield*/, subtle.encrypt({\n                            name: \"AES-GCM\",\n                            iv: new Uint8Array(Array(12)),\n                            additionalData: new Uint8Array(Array(16)),\n                            tagLength: 128\n                        }, key, new Uint8Array(0))];\n                case 3:\n                    zeroByteAuthTag = _b.sent();\n                    return [2 /*return*/, zeroByteAuthTag.byteLength === 16];\n                case 4:\n                    _a = _b.sent();\n                    return [2 /*return*/, false];\n                case 5: return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.supportsZeroByteGCM = supportsZeroByteGCM;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcG9ydHNXZWJDcnlwdG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3VwcG9ydHNXZWJDcnlwdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQVVBLElBQU0sbUJBQW1CLEdBQThCO0lBQ3JELFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxhQUFhO0lBQ2IsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0NBQ1QsQ0FBQztBQUVGLFNBQWdCLGlCQUFpQixDQUFDLE1BQWM7SUFDOUMsSUFDRSxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7UUFDNUIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQ3hDO1FBQ1EsSUFBQSxNQUFNLEdBQUssTUFBTSxDQUFDLE1BQU0sT0FBbEIsQ0FBbUI7UUFFakMsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNyQztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVhELDhDQVdDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBYztJQUNqRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzNELElBQUEsZUFBZSxHQUFLLE1BQU0sQ0FBQyxNQUFNLGdCQUFsQixDQUFtQjtRQUUxQyxPQUFPLE9BQU8sZUFBZSxLQUFLLFVBQVUsQ0FBQztLQUM5QztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVJELG9EQVFDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsTUFBb0I7SUFDdkQsT0FBTyxDQUNMLE1BQU07UUFDTixtQkFBbUIsQ0FBQyxLQUFLLENBQ3ZCLFVBQUEsVUFBVSxJQUFJLE9BQUEsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssVUFBVSxFQUF4QyxDQUF3QyxDQUN2RCxDQUNGLENBQUM7QUFDSixDQUFDO0FBUEQsb0RBT0M7QUFFRCxTQUFzQixtQkFBbUIsQ0FBQyxNQUFvQjs7Ozs7O29CQUM1RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDO3dCQUFFLHNCQUFPLEtBQUssRUFBQzs7OztvQkFFbEMscUJBQU0sTUFBTSxDQUFDLFdBQVcsQ0FDbEMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFDaEMsS0FBSyxFQUNMLENBQUMsU0FBUyxDQUFDLENBQ1osRUFBQTs7b0JBSkssR0FBRyxHQUFHLFNBSVg7b0JBQ3VCLHFCQUFNLE1BQU0sQ0FBQyxPQUFPLENBQzFDOzRCQUNFLElBQUksRUFBRSxTQUFTOzRCQUNmLEVBQUUsRUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQzdCLGNBQWMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQ3pDLFNBQVMsRUFBRSxHQUFHO3lCQUNmLEVBQ0QsR0FBRyxFQUNILElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUNsQixFQUFBOztvQkFUSyxlQUFlLEdBQUcsU0FTdkI7b0JBQ0Qsc0JBQU8sZUFBZSxDQUFDLFVBQVUsS0FBSyxFQUFFLEVBQUM7OztvQkFFekMsc0JBQU8sS0FBSyxFQUFDOzs7OztDQUVoQjtBQXRCRCxrREFzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFN1YnRsZUNyeXB0b01ldGhvZCA9XG4gIHwgXCJkZWNyeXB0XCJcbiAgfCBcImRpZ2VzdFwiXG4gIHwgXCJlbmNyeXB0XCJcbiAgfCBcImV4cG9ydEtleVwiXG4gIHwgXCJnZW5lcmF0ZUtleVwiXG4gIHwgXCJpbXBvcnRLZXlcIlxuICB8IFwic2lnblwiXG4gIHwgXCJ2ZXJpZnlcIjtcblxuY29uc3Qgc3VidGxlQ3J5cHRvTWV0aG9kczogQXJyYXk8U3VidGxlQ3J5cHRvTWV0aG9kPiA9IFtcbiAgXCJkZWNyeXB0XCIsXG4gIFwiZGlnZXN0XCIsXG4gIFwiZW5jcnlwdFwiLFxuICBcImV4cG9ydEtleVwiLFxuICBcImdlbmVyYXRlS2V5XCIsXG4gIFwiaW1wb3J0S2V5XCIsXG4gIFwic2lnblwiLFxuICBcInZlcmlmeVwiXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNXZWJDcnlwdG8od2luZG93OiBXaW5kb3cpOiBib29sZWFuIHtcbiAgaWYgKFxuICAgIHN1cHBvcnRzU2VjdXJlUmFuZG9tKHdpbmRvdykgJiZcbiAgICB0eXBlb2Ygd2luZG93LmNyeXB0by5zdWJ0bGUgPT09IFwib2JqZWN0XCJcbiAgKSB7XG4gICAgY29uc3QgeyBzdWJ0bGUgfSA9IHdpbmRvdy5jcnlwdG87XG5cbiAgICByZXR1cm4gc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzU2VjdXJlUmFuZG9tKHdpbmRvdzogV2luZG93KTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB3aW5kb3cuY3J5cHRvID09PSBcIm9iamVjdFwiKSB7XG4gICAgY29uc3QgeyBnZXRSYW5kb21WYWx1ZXMgfSA9IHdpbmRvdy5jcnlwdG87XG5cbiAgICByZXR1cm4gdHlwZW9mIGdldFJhbmRvbVZhbHVlcyA9PT0gXCJmdW5jdGlvblwiO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlOiBTdWJ0bGVDcnlwdG8pIHtcbiAgcmV0dXJuIChcbiAgICBzdWJ0bGUgJiZcbiAgICBzdWJ0bGVDcnlwdG9NZXRob2RzLmV2ZXJ5KFxuICAgICAgbWV0aG9kTmFtZSA9PiB0eXBlb2Ygc3VidGxlW21ldGhvZE5hbWVdID09PSBcImZ1bmN0aW9uXCJcbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdXBwb3J0c1plcm9CeXRlR0NNKHN1YnRsZTogU3VidGxlQ3J5cHRvKSB7XG4gIGlmICghc3VwcG9ydHNTdWJ0bGVDcnlwdG8oc3VidGxlKSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0IGtleSA9IGF3YWl0IHN1YnRsZS5nZW5lcmF0ZUtleShcbiAgICAgIHsgbmFtZTogXCJBRVMtR0NNXCIsIGxlbmd0aDogMTI4IH0sXG4gICAgICBmYWxzZSxcbiAgICAgIFtcImVuY3J5cHRcIl1cbiAgICApO1xuICAgIGNvbnN0IHplcm9CeXRlQXV0aFRhZyA9IGF3YWl0IHN1YnRsZS5lbmNyeXB0KFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIkFFUy1HQ01cIixcbiAgICAgICAgaXY6IG5ldyBVaW50OEFycmF5KEFycmF5KDEyKSksXG4gICAgICAgIGFkZGl0aW9uYWxEYXRhOiBuZXcgVWludDhBcnJheShBcnJheSgxNikpLFxuICAgICAgICB0YWdMZW5ndGg6IDEyOFxuICAgICAgfSxcbiAgICAgIGtleSxcbiAgICAgIG5ldyBVaW50OEFycmF5KDApXG4gICAgKTtcbiAgICByZXR1cm4gemVyb0J5dGVBdXRoVGFnLmJ5dGVMZW5ndGggPT09IDE2O1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__values\": () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/supports-web-crypto/node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/convertToBuffer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/convertToBuffer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.convertToBuffer = void 0;\nvar util_utf8_browser_1 = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js\");\n// Quick polyfill\nvar fromUtf8 = typeof Buffer !== \"undefined\" && Buffer.from\n    ? function (input) { return Buffer.from(input, \"utf8\"); }\n    : util_utf8_browser_1.fromUtf8;\nfunction convertToBuffer(data) {\n    // Already a Uint8, do nothing\n    if (data instanceof Uint8Array)\n        return data;\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\nexports.convertToBuffer = convertToBuffer;\n//# sourceMappingURL=convertToBuffer.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/util/build/convertToBuffer.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;\nvar convertToBuffer_1 = __webpack_require__(/*! ./convertToBuffer */ \"./node_modules/@aws-crypto/util/build/convertToBuffer.js\");\nObject.defineProperty(exports, \"convertToBuffer\", ({ enumerable: true, get: function () { return convertToBuffer_1.convertToBuffer; } }));\nvar isEmptyData_1 = __webpack_require__(/*! ./isEmptyData */ \"./node_modules/@aws-crypto/util/build/isEmptyData.js\");\nObject.defineProperty(exports, \"isEmptyData\", ({ enumerable: true, get: function () { return isEmptyData_1.isEmptyData; } }));\nvar numToUint8_1 = __webpack_require__(/*! ./numToUint8 */ \"./node_modules/@aws-crypto/util/build/numToUint8.js\");\nObject.defineProperty(exports, \"numToUint8\", ({ enumerable: true, get: function () { return numToUint8_1.numToUint8; } }));\nvar uint32ArrayFrom_1 = __webpack_require__(/*! ./uint32ArrayFrom */ \"./node_modules/@aws-crypto/util/build/uint32ArrayFrom.js\");\nObject.defineProperty(exports, \"uint32ArrayFrom\", ({ enumerable: true, get: function () { return uint32ArrayFrom_1.uint32ArrayFrom; } }));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/util/build/index.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/isEmptyData.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/isEmptyData.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isEmptyData = void 0;\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nexports.isEmptyData = isEmptyData;\n//# sourceMappingURL=isEmptyData.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/util/build/isEmptyData.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/numToUint8.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/numToUint8.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.numToUint8 = void 0;\nfunction numToUint8(num) {\n    return new Uint8Array([\n        (num & 0xff000000) >> 24,\n        (num & 0x00ff0000) >> 16,\n        (num & 0x0000ff00) >> 8,\n        num & 0x000000ff,\n    ]);\n}\nexports.numToUint8 = numToUint8;\n//# sourceMappingURL=numToUint8.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/util/build/numToUint8.js?");

/***/ }),

/***/ "./node_modules/@aws-crypto/util/build/uint32ArrayFrom.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-crypto/util/build/uint32ArrayFrom.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.uint32ArrayFrom = void 0;\n// IE 11 does not support Array.from, so we do it manually\nfunction uint32ArrayFrom(a_lookUpTable) {\n    if (!Uint32Array.from) {\n        var return_array = new Uint32Array(a_lookUpTable.length);\n        var a_index = 0;\n        while (a_index < a_lookUpTable.length) {\n            return_array[a_index] = a_lookUpTable[a_index];\n            a_index += 1;\n        }\n        return return_array;\n    }\n    return Uint32Array.from(a_lookUpTable);\n}\nexports.uint32ArrayFrom = uint32ArrayFrom;\n//# sourceMappingURL=uint32ArrayFrom.js.map\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-crypto/util/build/uint32ArrayFrom.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"blobReader\": () => (/* binding */ blobReader)\n/* harmony export */ });\nfunction blobReader(blob, onChunk, chunkSize = 1024 * 1024) {\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.addEventListener(\"error\", reject);\n        fileReader.addEventListener(\"abort\", reject);\n        const size = blob.size;\n        let totalBytesRead = 0;\n        function read() {\n            if (totalBytesRead >= size) {\n                resolve();\n                return;\n            }\n            fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n        }\n        fileReader.addEventListener(\"load\", (event) => {\n            const result = event.target.result;\n            onChunk(new Uint8Array(result));\n            totalBytesRead += result.byteLength;\n            read();\n        });\n        read();\n    });\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/S3.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/S3.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"S3\": () => (/* binding */ S3)\n/* harmony export */ });\n/* harmony import */ var _commands_AbortMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commands/AbortMultipartUploadCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js\");\n/* harmony import */ var _commands_CompleteMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands/CompleteMultipartUploadCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js\");\n/* harmony import */ var _commands_CopyObjectCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commands/CopyObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js\");\n/* harmony import */ var _commands_CreateBucketCommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commands/CreateBucketCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js\");\n/* harmony import */ var _commands_CreateMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commands/CreateMultipartUploadCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js\");\n/* harmony import */ var _commands_DeleteBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commands/DeleteBucketAnalyticsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js\");\n/* harmony import */ var _commands_DeleteBucketCommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commands/DeleteBucketCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js\");\n/* harmony import */ var _commands_DeleteBucketCorsCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commands/DeleteBucketCorsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js\");\n/* harmony import */ var _commands_DeleteBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commands/DeleteBucketEncryptionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js\");\n/* harmony import */ var _commands_DeleteBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commands/DeleteBucketIntelligentTieringConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js\");\n/* harmony import */ var _commands_DeleteBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./commands/DeleteBucketInventoryConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js\");\n/* harmony import */ var _commands_DeleteBucketLifecycleCommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commands/DeleteBucketLifecycleCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js\");\n/* harmony import */ var _commands_DeleteBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./commands/DeleteBucketMetricsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js\");\n/* harmony import */ var _commands_DeleteBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./commands/DeleteBucketOwnershipControlsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js\");\n/* harmony import */ var _commands_DeleteBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./commands/DeleteBucketPolicyCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js\");\n/* harmony import */ var _commands_DeleteBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./commands/DeleteBucketReplicationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js\");\n/* harmony import */ var _commands_DeleteBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./commands/DeleteBucketTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js\");\n/* harmony import */ var _commands_DeleteBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./commands/DeleteBucketWebsiteCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js\");\n/* harmony import */ var _commands_DeleteObjectCommand__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./commands/DeleteObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js\");\n/* harmony import */ var _commands_DeleteObjectsCommand__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./commands/DeleteObjectsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js\");\n/* harmony import */ var _commands_DeleteObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./commands/DeleteObjectTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js\");\n/* harmony import */ var _commands_DeletePublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./commands/DeletePublicAccessBlockCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js\");\n/* harmony import */ var _commands_GetBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./commands/GetBucketAccelerateConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js\");\n/* harmony import */ var _commands_GetBucketAclCommand__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./commands/GetBucketAclCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js\");\n/* harmony import */ var _commands_GetBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./commands/GetBucketAnalyticsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js\");\n/* harmony import */ var _commands_GetBucketCorsCommand__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./commands/GetBucketCorsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js\");\n/* harmony import */ var _commands_GetBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./commands/GetBucketEncryptionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js\");\n/* harmony import */ var _commands_GetBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./commands/GetBucketIntelligentTieringConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js\");\n/* harmony import */ var _commands_GetBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./commands/GetBucketInventoryConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js\");\n/* harmony import */ var _commands_GetBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./commands/GetBucketLifecycleConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js\");\n/* harmony import */ var _commands_GetBucketLocationCommand__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./commands/GetBucketLocationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js\");\n/* harmony import */ var _commands_GetBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./commands/GetBucketLoggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js\");\n/* harmony import */ var _commands_GetBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./commands/GetBucketMetricsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js\");\n/* harmony import */ var _commands_GetBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./commands/GetBucketNotificationConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js\");\n/* harmony import */ var _commands_GetBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./commands/GetBucketOwnershipControlsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js\");\n/* harmony import */ var _commands_GetBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./commands/GetBucketPolicyCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js\");\n/* harmony import */ var _commands_GetBucketPolicyStatusCommand__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./commands/GetBucketPolicyStatusCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js\");\n/* harmony import */ var _commands_GetBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./commands/GetBucketReplicationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js\");\n/* harmony import */ var _commands_GetBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./commands/GetBucketRequestPaymentCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js\");\n/* harmony import */ var _commands_GetBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./commands/GetBucketTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js\");\n/* harmony import */ var _commands_GetBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./commands/GetBucketVersioningCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js\");\n/* harmony import */ var _commands_GetBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./commands/GetBucketWebsiteCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js\");\n/* harmony import */ var _commands_GetObjectAclCommand__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./commands/GetObjectAclCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js\");\n/* harmony import */ var _commands_GetObjectAttributesCommand__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./commands/GetObjectAttributesCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js\");\n/* harmony import */ var _commands_GetObjectCommand__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./commands/GetObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js\");\n/* harmony import */ var _commands_GetObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./commands/GetObjectLegalHoldCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js\");\n/* harmony import */ var _commands_GetObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./commands/GetObjectLockConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js\");\n/* harmony import */ var _commands_GetObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./commands/GetObjectRetentionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js\");\n/* harmony import */ var _commands_GetObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./commands/GetObjectTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js\");\n/* harmony import */ var _commands_GetObjectTorrentCommand__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./commands/GetObjectTorrentCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js\");\n/* harmony import */ var _commands_GetPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./commands/GetPublicAccessBlockCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js\");\n/* harmony import */ var _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./commands/HeadBucketCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js\");\n/* harmony import */ var _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./commands/HeadObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js\");\n/* harmony import */ var _commands_ListBucketAnalyticsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./commands/ListBucketAnalyticsConfigurationsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js\");\n/* harmony import */ var _commands_ListBucketIntelligentTieringConfigurationsCommand__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./commands/ListBucketIntelligentTieringConfigurationsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js\");\n/* harmony import */ var _commands_ListBucketInventoryConfigurationsCommand__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./commands/ListBucketInventoryConfigurationsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js\");\n/* harmony import */ var _commands_ListBucketMetricsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./commands/ListBucketMetricsConfigurationsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js\");\n/* harmony import */ var _commands_ListBucketsCommand__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./commands/ListBucketsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js\");\n/* harmony import */ var _commands_ListMultipartUploadsCommand__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./commands/ListMultipartUploadsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js\");\n/* harmony import */ var _commands_ListObjectsCommand__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./commands/ListObjectsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js\");\n/* harmony import */ var _commands_ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./commands/ListObjectsV2Command */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js\");\n/* harmony import */ var _commands_ListObjectVersionsCommand__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./commands/ListObjectVersionsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js\");\n/* harmony import */ var _commands_ListPartsCommand__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./commands/ListPartsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js\");\n/* harmony import */ var _commands_PutBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./commands/PutBucketAccelerateConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js\");\n/* harmony import */ var _commands_PutBucketAclCommand__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./commands/PutBucketAclCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js\");\n/* harmony import */ var _commands_PutBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./commands/PutBucketAnalyticsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js\");\n/* harmony import */ var _commands_PutBucketCorsCommand__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./commands/PutBucketCorsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js\");\n/* harmony import */ var _commands_PutBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./commands/PutBucketEncryptionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js\");\n/* harmony import */ var _commands_PutBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./commands/PutBucketIntelligentTieringConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js\");\n/* harmony import */ var _commands_PutBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./commands/PutBucketInventoryConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js\");\n/* harmony import */ var _commands_PutBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./commands/PutBucketLifecycleConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js\");\n/* harmony import */ var _commands_PutBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./commands/PutBucketLoggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js\");\n/* harmony import */ var _commands_PutBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./commands/PutBucketMetricsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js\");\n/* harmony import */ var _commands_PutBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./commands/PutBucketNotificationConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js\");\n/* harmony import */ var _commands_PutBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./commands/PutBucketOwnershipControlsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js\");\n/* harmony import */ var _commands_PutBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./commands/PutBucketPolicyCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js\");\n/* harmony import */ var _commands_PutBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./commands/PutBucketReplicationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js\");\n/* harmony import */ var _commands_PutBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./commands/PutBucketRequestPaymentCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js\");\n/* harmony import */ var _commands_PutBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./commands/PutBucketTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js\");\n/* harmony import */ var _commands_PutBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./commands/PutBucketVersioningCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js\");\n/* harmony import */ var _commands_PutBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./commands/PutBucketWebsiteCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js\");\n/* harmony import */ var _commands_PutObjectAclCommand__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./commands/PutObjectAclCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js\");\n/* harmony import */ var _commands_PutObjectCommand__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./commands/PutObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js\");\n/* harmony import */ var _commands_PutObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./commands/PutObjectLegalHoldCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js\");\n/* harmony import */ var _commands_PutObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./commands/PutObjectLockConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js\");\n/* harmony import */ var _commands_PutObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./commands/PutObjectRetentionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js\");\n/* harmony import */ var _commands_PutObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./commands/PutObjectTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js\");\n/* harmony import */ var _commands_PutPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./commands/PutPublicAccessBlockCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js\");\n/* harmony import */ var _commands_RestoreObjectCommand__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./commands/RestoreObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js\");\n/* harmony import */ var _commands_SelectObjectContentCommand__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./commands/SelectObjectContentCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js\");\n/* harmony import */ var _commands_UploadPartCommand__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./commands/UploadPartCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js\");\n/* harmony import */ var _commands_UploadPartCopyCommand__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./commands/UploadPartCopyCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js\");\n/* harmony import */ var _commands_WriteGetObjectResponseCommand__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./commands/WriteGetObjectResponseCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js\");\n/* harmony import */ var _S3Client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./S3Client */ \"./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass S3 extends _S3Client__WEBPACK_IMPORTED_MODULE_0__.S3Client {\n    abortMultipartUpload(args, optionsOrCb, cb) {\n        const command = new _commands_AbortMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_1__.AbortMultipartUploadCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    completeMultipartUpload(args, optionsOrCb, cb) {\n        const command = new _commands_CompleteMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_2__.CompleteMultipartUploadCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    copyObject(args, optionsOrCb, cb) {\n        const command = new _commands_CopyObjectCommand__WEBPACK_IMPORTED_MODULE_3__.CopyObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createBucket(args, optionsOrCb, cb) {\n        const command = new _commands_CreateBucketCommand__WEBPACK_IMPORTED_MODULE_4__.CreateBucketCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createMultipartUpload(args, optionsOrCb, cb) {\n        const command = new _commands_CreateMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_5__.CreateMultipartUploadCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucket(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketCommand__WEBPACK_IMPORTED_MODULE_6__.DeleteBucketCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketAnalyticsConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_7__.DeleteBucketAnalyticsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketCors(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketCorsCommand__WEBPACK_IMPORTED_MODULE_8__.DeleteBucketCorsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketEncryption(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_9__.DeleteBucketEncryptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_10__.DeleteBucketIntelligentTieringConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketInventoryConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_11__.DeleteBucketInventoryConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketLifecycle(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketLifecycleCommand__WEBPACK_IMPORTED_MODULE_12__.DeleteBucketLifecycleCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketMetricsConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_13__.DeleteBucketMetricsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketOwnershipControls(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_14__.DeleteBucketOwnershipControlsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketPolicy(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_15__.DeleteBucketPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketReplication(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_16__.DeleteBucketReplicationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketTagging(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_17__.DeleteBucketTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketWebsite(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_18__.DeleteBucketWebsiteCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteObject(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteObjectCommand__WEBPACK_IMPORTED_MODULE_19__.DeleteObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteObjects(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteObjectsCommand__WEBPACK_IMPORTED_MODULE_20__.DeleteObjectsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteObjectTagging(args, optionsOrCb, cb) {\n        const command = new _commands_DeleteObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_21__.DeleteObjectTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deletePublicAccessBlock(args, optionsOrCb, cb) {\n        const command = new _commands_DeletePublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_22__.DeletePublicAccessBlockCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketAccelerateConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_23__.GetBucketAccelerateConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketAcl(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketAclCommand__WEBPACK_IMPORTED_MODULE_24__.GetBucketAclCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketAnalyticsConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_25__.GetBucketAnalyticsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketCors(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketCorsCommand__WEBPACK_IMPORTED_MODULE_26__.GetBucketCorsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketEncryption(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_27__.GetBucketEncryptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_28__.GetBucketIntelligentTieringConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketInventoryConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_29__.GetBucketInventoryConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketLifecycleConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_30__.GetBucketLifecycleConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketLocation(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketLocationCommand__WEBPACK_IMPORTED_MODULE_31__.GetBucketLocationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketLogging(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_32__.GetBucketLoggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketMetricsConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_33__.GetBucketMetricsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketNotificationConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_34__.GetBucketNotificationConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketOwnershipControls(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_35__.GetBucketOwnershipControlsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketPolicy(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_36__.GetBucketPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketPolicyStatus(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketPolicyStatusCommand__WEBPACK_IMPORTED_MODULE_37__.GetBucketPolicyStatusCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketReplication(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_38__.GetBucketReplicationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketRequestPayment(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_39__.GetBucketRequestPaymentCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketTagging(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_40__.GetBucketTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketVersioning(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_41__.GetBucketVersioningCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketWebsite(args, optionsOrCb, cb) {\n        const command = new _commands_GetBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_42__.GetBucketWebsiteCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObject(args, optionsOrCb, cb) {\n        const command = new _commands_GetObjectCommand__WEBPACK_IMPORTED_MODULE_43__.GetObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectAcl(args, optionsOrCb, cb) {\n        const command = new _commands_GetObjectAclCommand__WEBPACK_IMPORTED_MODULE_44__.GetObjectAclCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectAttributes(args, optionsOrCb, cb) {\n        const command = new _commands_GetObjectAttributesCommand__WEBPACK_IMPORTED_MODULE_45__.GetObjectAttributesCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectLegalHold(args, optionsOrCb, cb) {\n        const command = new _commands_GetObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_46__.GetObjectLegalHoldCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectLockConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_GetObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_47__.GetObjectLockConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectRetention(args, optionsOrCb, cb) {\n        const command = new _commands_GetObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_48__.GetObjectRetentionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectTagging(args, optionsOrCb, cb) {\n        const command = new _commands_GetObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_49__.GetObjectTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectTorrent(args, optionsOrCb, cb) {\n        const command = new _commands_GetObjectTorrentCommand__WEBPACK_IMPORTED_MODULE_50__.GetObjectTorrentCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getPublicAccessBlock(args, optionsOrCb, cb) {\n        const command = new _commands_GetPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_51__.GetPublicAccessBlockCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    headBucket(args, optionsOrCb, cb) {\n        const command = new _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_52__.HeadBucketCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    headObject(args, optionsOrCb, cb) {\n        const command = new _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_53__.HeadObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBucketAnalyticsConfigurations(args, optionsOrCb, cb) {\n        const command = new _commands_ListBucketAnalyticsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_54__.ListBucketAnalyticsConfigurationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBucketIntelligentTieringConfigurations(args, optionsOrCb, cb) {\n        const command = new _commands_ListBucketIntelligentTieringConfigurationsCommand__WEBPACK_IMPORTED_MODULE_55__.ListBucketIntelligentTieringConfigurationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBucketInventoryConfigurations(args, optionsOrCb, cb) {\n        const command = new _commands_ListBucketInventoryConfigurationsCommand__WEBPACK_IMPORTED_MODULE_56__.ListBucketInventoryConfigurationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBucketMetricsConfigurations(args, optionsOrCb, cb) {\n        const command = new _commands_ListBucketMetricsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_57__.ListBucketMetricsConfigurationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBuckets(args, optionsOrCb, cb) {\n        const command = new _commands_ListBucketsCommand__WEBPACK_IMPORTED_MODULE_58__.ListBucketsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listMultipartUploads(args, optionsOrCb, cb) {\n        const command = new _commands_ListMultipartUploadsCommand__WEBPACK_IMPORTED_MODULE_59__.ListMultipartUploadsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listObjects(args, optionsOrCb, cb) {\n        const command = new _commands_ListObjectsCommand__WEBPACK_IMPORTED_MODULE_60__.ListObjectsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listObjectsV2(args, optionsOrCb, cb) {\n        const command = new _commands_ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_61__.ListObjectsV2Command(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listObjectVersions(args, optionsOrCb, cb) {\n        const command = new _commands_ListObjectVersionsCommand__WEBPACK_IMPORTED_MODULE_62__.ListObjectVersionsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listParts(args, optionsOrCb, cb) {\n        const command = new _commands_ListPartsCommand__WEBPACK_IMPORTED_MODULE_63__.ListPartsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketAccelerateConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_64__.PutBucketAccelerateConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketAcl(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketAclCommand__WEBPACK_IMPORTED_MODULE_65__.PutBucketAclCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketAnalyticsConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_66__.PutBucketAnalyticsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketCors(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketCorsCommand__WEBPACK_IMPORTED_MODULE_67__.PutBucketCorsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketEncryption(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_68__.PutBucketEncryptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_69__.PutBucketIntelligentTieringConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketInventoryConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_70__.PutBucketInventoryConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketLifecycleConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_71__.PutBucketLifecycleConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketLogging(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_72__.PutBucketLoggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketMetricsConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_73__.PutBucketMetricsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketNotificationConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_74__.PutBucketNotificationConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketOwnershipControls(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_75__.PutBucketOwnershipControlsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketPolicy(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_76__.PutBucketPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketReplication(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_77__.PutBucketReplicationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketRequestPayment(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_78__.PutBucketRequestPaymentCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketTagging(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_79__.PutBucketTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketVersioning(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_80__.PutBucketVersioningCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketWebsite(args, optionsOrCb, cb) {\n        const command = new _commands_PutBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_81__.PutBucketWebsiteCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObject(args, optionsOrCb, cb) {\n        const command = new _commands_PutObjectCommand__WEBPACK_IMPORTED_MODULE_82__.PutObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectAcl(args, optionsOrCb, cb) {\n        const command = new _commands_PutObjectAclCommand__WEBPACK_IMPORTED_MODULE_83__.PutObjectAclCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectLegalHold(args, optionsOrCb, cb) {\n        const command = new _commands_PutObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_84__.PutObjectLegalHoldCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectLockConfiguration(args, optionsOrCb, cb) {\n        const command = new _commands_PutObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_85__.PutObjectLockConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectRetention(args, optionsOrCb, cb) {\n        const command = new _commands_PutObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_86__.PutObjectRetentionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectTagging(args, optionsOrCb, cb) {\n        const command = new _commands_PutObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_87__.PutObjectTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putPublicAccessBlock(args, optionsOrCb, cb) {\n        const command = new _commands_PutPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_88__.PutPublicAccessBlockCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    restoreObject(args, optionsOrCb, cb) {\n        const command = new _commands_RestoreObjectCommand__WEBPACK_IMPORTED_MODULE_89__.RestoreObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    selectObjectContent(args, optionsOrCb, cb) {\n        const command = new _commands_SelectObjectContentCommand__WEBPACK_IMPORTED_MODULE_90__.SelectObjectContentCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    uploadPart(args, optionsOrCb, cb) {\n        const command = new _commands_UploadPartCommand__WEBPACK_IMPORTED_MODULE_91__.UploadPartCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    uploadPartCopy(args, optionsOrCb, cb) {\n        const command = new _commands_UploadPartCopyCommand__WEBPACK_IMPORTED_MODULE_92__.UploadPartCopyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    writeGetObjectResponse(args, optionsOrCb, cb) {\n        const command = new _commands_WriteGetObjectResponseCommand__WEBPACK_IMPORTED_MODULE_93__.WriteGetObjectResponseCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/S3.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"S3Client\": () => (/* binding */ S3Client)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/config-resolver */ \"./node_modules/@aws-sdk/config-resolver/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_eventstream_serde_config_resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/eventstream-serde-config-resolver */ \"./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_content_length__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-content-length */ \"./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_expect_continue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/middleware-expect-continue */ \"./node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/middleware-host-header */ \"./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/middleware-logger */ \"./node_modules/@aws-sdk/middleware-logger/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/middleware-recursion-detection */ \"./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/middleware-retry */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ \"./node_modules/@aws-sdk/middleware-signing/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @aws-sdk/middleware-user-agent */ \"./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./endpoint/EndpointParameters */ \"./node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js\");\n/* harmony import */ var _runtimeConfig__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./runtimeConfig */ \"./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass S3Client extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_12__.Client {\n    constructor(configuration) {\n        const _config_0 = (0,_runtimeConfig__WEBPACK_IMPORTED_MODULE_13__.getRuntimeConfig)(configuration);\n        const _config_1 = (0,_endpoint_EndpointParameters__WEBPACK_IMPORTED_MODULE_14__.resolveClientEndpointParameters)(_config_0);\n        const _config_2 = (0,_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__.resolveRegionConfig)(_config_1);\n        const _config_3 = (0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_3__.resolveEndpointConfig)(_config_2);\n        const _config_4 = (0,_aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__.resolveRetryConfig)(_config_3);\n        const _config_5 = (0,_aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_5__.resolveHostHeaderConfig)(_config_4);\n        const _config_6 = (0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_10__.resolveAwsAuthConfig)(_config_5);\n        const _config_7 = (0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_9__.resolveS3Config)(_config_6);\n        const _config_8 = (0,_aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_11__.resolveUserAgentConfig)(_config_7);\n        const _config_9 = (0,_aws_sdk_eventstream_serde_config_resolver__WEBPACK_IMPORTED_MODULE_1__.resolveEventStreamSerdeConfig)(_config_8);\n        super(_config_9);\n        this.config = _config_9;\n        this.middlewareStack.use((0,_aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__.getRetryPlugin)(this.config));\n        this.middlewareStack.use((0,_aws_sdk_middleware_content_length__WEBPACK_IMPORTED_MODULE_2__.getContentLengthPlugin)(this.config));\n        this.middlewareStack.use((0,_aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_5__.getHostHeaderPlugin)(this.config));\n        this.middlewareStack.use((0,_aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_6__.getLoggerPlugin)(this.config));\n        this.middlewareStack.use((0,_aws_sdk_middleware_recursion_detection__WEBPACK_IMPORTED_MODULE_7__.getRecursionDetectionPlugin)(this.config));\n        this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_10__.getAwsAuthPlugin)(this.config));\n        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_9__.getValidateBucketNamePlugin)(this.config));\n        this.middlewareStack.use((0,_aws_sdk_middleware_expect_continue__WEBPACK_IMPORTED_MODULE_4__.getAddExpectContinuePlugin)(this.config));\n        this.middlewareStack.use((0,_aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_11__.getUserAgentPlugin)(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbortMultipartUploadCommand\": () => (/* binding */ AbortMultipartUploadCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass AbortMultipartUploadCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, AbortMultipartUploadCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"AbortMultipartUploadCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.AbortMultipartUploadRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.AbortMultipartUploadOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlAbortMultipartUploadCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlAbortMultipartUploadCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompleteMultipartUploadCommand\": () => (/* binding */ CompleteMultipartUploadCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\n\nclass CompleteMultipartUploadCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CompleteMultipartUploadCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__.getThrow200ExceptionsPlugin)(configuration));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"CompleteMultipartUploadCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.CompleteMultipartUploadRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.CompleteMultipartUploadOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlCompleteMultipartUploadCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlCompleteMultipartUploadCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CopyObjectCommand\": () => (/* binding */ CopyObjectCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\n\nclass CopyObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CopyObjectCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__.getThrow200ExceptionsPlugin)(configuration));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"CopyObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.CopyObjectRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.CopyObjectOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlCopyObjectCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlCopyObjectCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CreateBucketCommand\": () => (/* binding */ CreateBucketCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_location_constraint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-location-constraint */ \"./node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass CreateBucketCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CreateBucketCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_location_constraint__WEBPACK_IMPORTED_MODULE_1__.getLocationConstraintPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"CreateBucketCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateBucketRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateBucketOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlCreateBucketCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlCreateBucketCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CreateMultipartUploadCommand\": () => (/* binding */ CreateMultipartUploadCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass CreateMultipartUploadCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, CreateMultipartUploadCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"CreateMultipartUploadCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateMultipartUploadRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.CreateMultipartUploadOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlCreateMultipartUploadCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlCreateMultipartUploadCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketAnalyticsConfigurationCommand\": () => (/* binding */ DeleteBucketAnalyticsConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketAnalyticsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketAnalyticsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketCommand\": () => (/* binding */ DeleteBucketCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketCorsCommand\": () => (/* binding */ DeleteBucketCorsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketCorsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketCorsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketCorsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketCorsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketCorsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketCorsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketEncryptionCommand\": () => (/* binding */ DeleteBucketEncryptionCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketEncryptionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketEncryptionCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketEncryptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketEncryptionRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketEncryptionCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketEncryptionCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ DeleteBucketIntelligentTieringConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketIntelligentTieringConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketIntelligentTieringConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketInventoryConfigurationCommand\": () => (/* binding */ DeleteBucketInventoryConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketInventoryConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketInventoryConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketLifecycleCommand\": () => (/* binding */ DeleteBucketLifecycleCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketLifecycleCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketLifecycleCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketLifecycleCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketLifecycleRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketLifecycleCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketLifecycleCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketMetricsConfigurationCommand\": () => (/* binding */ DeleteBucketMetricsConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketMetricsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketMetricsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketOwnershipControlsCommand\": () => (/* binding */ DeleteBucketOwnershipControlsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketOwnershipControlsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketOwnershipControlsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketOwnershipControlsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketOwnershipControlsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketOwnershipControlsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketPolicyCommand\": () => (/* binding */ DeleteBucketPolicyCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketPolicyCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketPolicyCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketPolicyRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketPolicyCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketPolicyCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketReplicationCommand\": () => (/* binding */ DeleteBucketReplicationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketReplicationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketReplicationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketReplicationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketReplicationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketReplicationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketReplicationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketTaggingCommand\": () => (/* binding */ DeleteBucketTaggingCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketTaggingCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketTaggingRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketTaggingCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketTaggingCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteBucketWebsiteCommand\": () => (/* binding */ DeleteBucketWebsiteCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteBucketWebsiteCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteBucketWebsiteCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketWebsiteCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketWebsiteRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteBucketWebsiteCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteBucketWebsiteCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteObjectCommand\": () => (/* binding */ DeleteObjectCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteObjectCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteObjectCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteObjectCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteObjectTaggingCommand\": () => (/* binding */ DeleteObjectTaggingCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeleteObjectTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteObjectTaggingCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteObjectTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectTaggingRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectTaggingOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeleteObjectTaggingCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeleteObjectTaggingCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeleteObjectsCommand\": () => (/* binding */ DeleteObjectsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass DeleteObjectsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeleteObjectsCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteObjectsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DeleteObjectsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.DeleteObjectsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlDeleteObjectsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlDeleteObjectsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DeletePublicAccessBlockCommand\": () => (/* binding */ DeletePublicAccessBlockCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass DeletePublicAccessBlockCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, DeletePublicAccessBlockCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeletePublicAccessBlockCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.DeletePublicAccessBlockRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlDeletePublicAccessBlockCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlDeletePublicAccessBlockCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketAccelerateConfigurationCommand\": () => (/* binding */ GetBucketAccelerateConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketAccelerateConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketAccelerateConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAccelerateConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAccelerateConfigurationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketAccelerateConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketAclCommand\": () => (/* binding */ GetBucketAclCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketAclCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketAclCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketAclCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAclRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAclOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketAclCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketAclCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketAnalyticsConfigurationCommand\": () => (/* binding */ GetBucketAnalyticsConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketAnalyticsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketAnalyticsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketCorsCommand\": () => (/* binding */ GetBucketCorsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketCorsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketCorsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketCorsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketCorsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketCorsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketCorsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketCorsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketEncryptionCommand\": () => (/* binding */ GetBucketEncryptionCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketEncryptionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketEncryptionCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketEncryptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketEncryptionRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketEncryptionOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketEncryptionCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketEncryptionCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ GetBucketIntelligentTieringConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketIntelligentTieringConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketIntelligentTieringConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketInventoryConfigurationCommand\": () => (/* binding */ GetBucketInventoryConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketInventoryConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketInventoryConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketInventoryConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketInventoryConfigurationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketInventoryConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketInventoryConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketLifecycleConfigurationCommand\": () => (/* binding */ GetBucketLifecycleConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketLifecycleConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketLifecycleConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLifecycleConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLifecycleConfigurationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketLifecycleConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketLocationCommand\": () => (/* binding */ GetBucketLocationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketLocationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketLocationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketLocationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLocationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLocationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketLocationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketLocationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketLoggingCommand\": () => (/* binding */ GetBucketLoggingCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketLoggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketLoggingCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketLoggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLoggingRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketLoggingOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketLoggingCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketLoggingCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketMetricsConfigurationCommand\": () => (/* binding */ GetBucketMetricsConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketMetricsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketMetricsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketMetricsConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketMetricsConfigurationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketMetricsConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketMetricsConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketNotificationConfigurationCommand\": () => (/* binding */ GetBucketNotificationConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketNotificationConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketNotificationConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketNotificationConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.NotificationConfigurationFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketNotificationConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketNotificationConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketOwnershipControlsCommand\": () => (/* binding */ GetBucketOwnershipControlsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketOwnershipControlsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketOwnershipControlsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketOwnershipControlsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketOwnershipControlsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketOwnershipControlsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketOwnershipControlsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketOwnershipControlsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketPolicyCommand\": () => (/* binding */ GetBucketPolicyCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketPolicyCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketPolicyCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketPolicyCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketPolicyCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketPolicyStatusCommand\": () => (/* binding */ GetBucketPolicyStatusCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketPolicyStatusCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketPolicyStatusCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketPolicyStatusCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyStatusRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyStatusOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketPolicyStatusCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketPolicyStatusCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketReplicationCommand\": () => (/* binding */ GetBucketReplicationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketReplicationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketReplicationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketReplicationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketReplicationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketReplicationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketReplicationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketReplicationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketRequestPaymentCommand\": () => (/* binding */ GetBucketRequestPaymentCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketRequestPaymentCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketRequestPaymentCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketRequestPaymentCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketRequestPaymentRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketRequestPaymentOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketRequestPaymentCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketRequestPaymentCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketTaggingCommand\": () => (/* binding */ GetBucketTaggingCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketTaggingCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketTaggingRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketTaggingOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketTaggingCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketTaggingCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketVersioningCommand\": () => (/* binding */ GetBucketVersioningCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketVersioningCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketVersioningCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketVersioningCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketVersioningRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketVersioningOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketVersioningCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketVersioningCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetBucketWebsiteCommand\": () => (/* binding */ GetBucketWebsiteCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetBucketWebsiteCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetBucketWebsiteCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketWebsiteCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketWebsiteRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetBucketWebsiteOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetBucketWebsiteCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetBucketWebsiteCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetObjectAclCommand\": () => (/* binding */ GetObjectAclCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetObjectAclCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectAclCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectAclCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectAclRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectAclOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectAclCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectAclCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetObjectAttributesCommand\": () => (/* binding */ GetObjectAttributesCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass GetObjectAttributesCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectAttributesCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectAttributesCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetObjectAttributesRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.GetObjectAttributesOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlGetObjectAttributesCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlGetObjectAttributesCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetObjectCommand\": () => (/* binding */ GetObjectCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\n\nclass GetObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestChecksumRequired: false,\n            requestValidationModeMember: \"ChecksumMode\",\n            responseAlgorithms: [\"CRC32\", \"CRC32C\", \"SHA256\", \"SHA1\"],\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.GetObjectRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_5__.GetObjectOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlGetObjectCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlGetObjectCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetObjectLegalHoldCommand\": () => (/* binding */ GetObjectLegalHoldCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetObjectLegalHoldCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectLegalHoldCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectLegalHoldCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectLegalHoldRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectLegalHoldOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectLegalHoldCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectLegalHoldCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetObjectLockConfigurationCommand\": () => (/* binding */ GetObjectLockConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetObjectLockConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectLockConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectLockConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectLockConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectLockConfigurationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectLockConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectLockConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetObjectRetentionCommand\": () => (/* binding */ GetObjectRetentionCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetObjectRetentionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectRetentionCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectRetentionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectRetentionRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectRetentionOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectRetentionCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectRetentionCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetObjectTaggingCommand\": () => (/* binding */ GetObjectTaggingCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetObjectTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectTaggingCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectTaggingRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectTaggingOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectTaggingCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectTaggingCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetObjectTorrentCommand\": () => (/* binding */ GetObjectTorrentCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetObjectTorrentCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetObjectTorrentCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectTorrentCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectTorrentRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetObjectTorrentOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetObjectTorrentCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetObjectTorrentCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GetPublicAccessBlockCommand\": () => (/* binding */ GetPublicAccessBlockCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass GetPublicAccessBlockCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, GetPublicAccessBlockCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetPublicAccessBlockCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetPublicAccessBlockRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.GetPublicAccessBlockOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlGetPublicAccessBlockCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlGetPublicAccessBlockCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HeadBucketCommand\": () => (/* binding */ HeadBucketCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass HeadBucketCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, HeadBucketCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"HeadBucketCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.HeadBucketRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlHeadBucketCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlHeadBucketCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HeadObjectCommand\": () => (/* binding */ HeadObjectCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass HeadObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, HeadObjectCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"HeadObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.HeadObjectRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.HeadObjectOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlHeadObjectCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlHeadObjectCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListBucketAnalyticsConfigurationsCommand\": () => (/* binding */ ListBucketAnalyticsConfigurationsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListBucketAnalyticsConfigurationsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketAnalyticsConfigurationsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketAnalyticsConfigurationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsCommand\": () => (/* binding */ ListBucketIntelligentTieringConfigurationsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListBucketIntelligentTieringConfigurationsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketIntelligentTieringConfigurationsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketIntelligentTieringConfigurationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListBucketInventoryConfigurationsCommand\": () => (/* binding */ ListBucketInventoryConfigurationsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListBucketInventoryConfigurationsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketInventoryConfigurationsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketInventoryConfigurationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketInventoryConfigurationsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketInventoryConfigurationsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketInventoryConfigurationsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketInventoryConfigurationsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListBucketMetricsConfigurationsCommand\": () => (/* binding */ ListBucketMetricsConfigurationsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListBucketMetricsConfigurationsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketMetricsConfigurationsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketMetricsConfigurationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketMetricsConfigurationsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketMetricsConfigurationsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketMetricsConfigurationsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketMetricsConfigurationsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListBucketsCommand\": () => (/* binding */ ListBucketsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListBucketsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListBucketsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (input) => input,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListBucketsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListBucketsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListBucketsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListMultipartUploadsCommand\": () => (/* binding */ ListMultipartUploadsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListMultipartUploadsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListMultipartUploadsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListMultipartUploadsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListMultipartUploadsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListMultipartUploadsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListMultipartUploadsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListMultipartUploadsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListObjectVersionsCommand\": () => (/* binding */ ListObjectVersionsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListObjectVersionsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListObjectVersionsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListObjectVersionsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectVersionsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectVersionsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListObjectVersionsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListObjectVersionsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListObjectsCommand\": () => (/* binding */ ListObjectsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListObjectsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListObjectsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListObjectsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListObjectsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListObjectsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListObjectsV2Command\": () => (/* binding */ ListObjectsV2Command)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass ListObjectsV2Command extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListObjectsV2Command.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListObjectsV2Command\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectsV2RequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.ListObjectsV2OutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlListObjectsV2Command)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlListObjectsV2Command)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ListPartsCommand\": () => (/* binding */ ListPartsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass ListPartsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, ListPartsCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListPartsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListPartsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.ListPartsOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlListPartsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlListPartsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketAccelerateConfigurationCommand\": () => (/* binding */ PutBucketAccelerateConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketAccelerateConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: false,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketAccelerateConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketAccelerateConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketAccelerateConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketAclCommand\": () => (/* binding */ PutBucketAclCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketAclCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketAclCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketAclCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketAclRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketAclCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketAclCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketAnalyticsConfigurationCommand\": () => (/* binding */ PutBucketAnalyticsConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass PutBucketAnalyticsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketAnalyticsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketCorsCommand\": () => (/* binding */ PutBucketCorsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketCorsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketCorsCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketCorsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketCorsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketCorsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketCorsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketEncryptionCommand\": () => (/* binding */ PutBucketEncryptionCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketEncryptionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketEncryptionCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketEncryptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketEncryptionRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketEncryptionCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketEncryptionCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ PutBucketIntelligentTieringConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass PutBucketIntelligentTieringConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketIntelligentTieringConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketInventoryConfigurationCommand\": () => (/* binding */ PutBucketInventoryConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass PutBucketInventoryConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketInventoryConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketInventoryConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketInventoryConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketInventoryConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketLifecycleConfigurationCommand\": () => (/* binding */ PutBucketLifecycleConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketLifecycleConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketLifecycleConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketLifecycleConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketLifecycleConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketLoggingCommand\": () => (/* binding */ PutBucketLoggingCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketLoggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketLoggingCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketLoggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketLoggingRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketLoggingCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketLoggingCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketMetricsConfigurationCommand\": () => (/* binding */ PutBucketMetricsConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass PutBucketMetricsConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketMetricsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketMetricsConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketMetricsConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketMetricsConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketNotificationConfigurationCommand\": () => (/* binding */ PutBucketNotificationConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\nclass PutBucketNotificationConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_2__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketNotificationConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PutBucketNotificationConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restXmlPutBucketNotificationConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restXmlPutBucketNotificationConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketOwnershipControlsCommand\": () => (/* binding */ PutBucketOwnershipControlsCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketOwnershipControlsCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketOwnershipControlsCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, { input: this.input, requestChecksumRequired: true }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketOwnershipControlsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketOwnershipControlsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketOwnershipControlsCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketOwnershipControlsCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketPolicyCommand\": () => (/* binding */ PutBucketPolicyCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketPolicyCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketPolicyCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketPolicyRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketPolicyCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketPolicyCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketReplicationCommand\": () => (/* binding */ PutBucketReplicationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketReplicationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketReplicationCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketReplicationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketReplicationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketReplicationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketReplicationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketRequestPaymentCommand\": () => (/* binding */ PutBucketRequestPaymentCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketRequestPaymentCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketRequestPaymentCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketRequestPaymentCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketRequestPaymentRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketRequestPaymentCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketRequestPaymentCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketTaggingCommand\": () => (/* binding */ PutBucketTaggingCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketTaggingCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketTaggingRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketTaggingCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketTaggingCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketVersioningCommand\": () => (/* binding */ PutBucketVersioningCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketVersioningCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketVersioningCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketVersioningCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketVersioningRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketVersioningCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketVersioningCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutBucketWebsiteCommand\": () => (/* binding */ PutBucketWebsiteCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutBucketWebsiteCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutBucketWebsiteCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketWebsiteCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutBucketWebsiteRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutBucketWebsiteCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutBucketWebsiteCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutObjectAclCommand\": () => (/* binding */ PutObjectAclCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutObjectAclCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectAclCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectAclCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectAclRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectAclOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectAclCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectAclCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutObjectCommand\": () => (/* binding */ PutObjectCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\n\n\nclass PutObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_5__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_3__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_2__.getCheckContentLengthHeaderPlugin)(configuration));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_4__.getSsecPlugin)(configuration));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: false,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_6__.PutObjectRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_6__.PutObjectOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_7__.serializeAws_restXmlPutObjectCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_7__.deserializeAws_restXmlPutObjectCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutObjectLegalHoldCommand\": () => (/* binding */ PutObjectLegalHoldCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutObjectLegalHoldCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectLegalHoldCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectLegalHoldCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectLegalHoldRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectLegalHoldOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectLegalHoldCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectLegalHoldCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutObjectLockConfigurationCommand\": () => (/* binding */ PutObjectLockConfigurationCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutObjectLockConfigurationCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectLockConfigurationCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectLockConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectLockConfigurationRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_4__.PutObjectLockConfigurationOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectLockConfigurationCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectLockConfigurationCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutObjectRetentionCommand\": () => (/* binding */ PutObjectRetentionCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutObjectRetentionCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectRetentionCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectRetentionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutObjectRetentionRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutObjectRetentionOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectRetentionCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectRetentionCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutObjectTaggingCommand\": () => (/* binding */ PutObjectTaggingCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutObjectTaggingCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutObjectTaggingCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutObjectTaggingRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutObjectTaggingOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutObjectTaggingCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutObjectTaggingCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PutPublicAccessBlockCommand\": () => (/* binding */ PutPublicAccessBlockCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass PutPublicAccessBlockCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, PutPublicAccessBlockCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: true,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutPublicAccessBlockCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.PutPublicAccessBlockRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlPutPublicAccessBlockCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlPutPublicAccessBlockCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RestoreObjectCommand\": () => (/* binding */ RestoreObjectCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass RestoreObjectCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, RestoreObjectCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: false,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"RestoreObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.RestoreObjectRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.RestoreObjectOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlRestoreObjectCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlRestoreObjectCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SelectObjectContentCommand\": () => (/* binding */ SelectObjectContentCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass SelectObjectContentCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, SelectObjectContentCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_2__.getSsecPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"SelectObjectContentCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.SelectObjectContentRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.SelectObjectContentOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlSelectObjectContentCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlSelectObjectContentCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UploadPartCommand\": () => (/* binding */ UploadPartCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-flexible-checksums */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\n\nclass UploadPartCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, UploadPartCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));\n        this.middlewareStack.use((0,_aws_sdk_middleware_flexible_checksums__WEBPACK_IMPORTED_MODULE_1__.getFlexibleChecksumsPlugin)(configuration, {\n            input: this.input,\n            requestAlgorithmMember: \"ChecksumAlgorithm\",\n            requestChecksumRequired: false,\n        }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"UploadPartCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_5__.UploadPartRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_5__.UploadPartOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlUploadPartCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlUploadPartCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UploadPartCopyCommand\": () => (/* binding */ UploadPartCopyCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-ssec */ \"./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\n\nclass UploadPartCopyCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_4__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            Bucket: { type: \"contextParams\", name: \"Bucket\" },\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, UploadPartCopyCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__.getThrow200ExceptionsPlugin)(configuration));\n        this.middlewareStack.use((0,_aws_sdk_middleware_ssec__WEBPACK_IMPORTED_MODULE_3__.getSsecPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"UploadPartCopyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_5__.UploadPartCopyRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_5__.UploadPartCopyOutputFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.serializeAws_restXmlUploadPartCopyCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_6__.deserializeAws_restXmlUploadPartCopyCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WriteGetObjectResponseCommand\": () => (/* binding */ WriteGetObjectResponseCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-endpoint */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-sdk-s3 */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocols/Aws_restXml */ \"./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js\");\n\n\n\n\n\n\nclass WriteGetObjectResponseCommand extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_3__.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            ForcePathStyle: { type: \"clientContextParams\", name: \"forcePathStyle\" },\n            UseArnRegion: { type: \"clientContextParams\", name: \"useArnRegion\" },\n            DisableMultiRegionAccessPoints: { type: \"clientContextParams\", name: \"disableMultiregionAccessPoints\" },\n            Accelerate: { type: \"clientContextParams\", name: \"useAccelerateEndpoint\" },\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_2__.getSerdePlugin)(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use((0,_aws_sdk_middleware_endpoint__WEBPACK_IMPORTED_MODULE_0__.getEndpointPlugin)(configuration, WriteGetObjectResponseCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use((0,_aws_sdk_middleware_sdk_s3__WEBPACK_IMPORTED_MODULE_1__.getWriteGetObjectResponseEndpointPlugin)(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"WriteGetObjectResponseCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: _models_models_1__WEBPACK_IMPORTED_MODULE_4__.WriteGetObjectResponseRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.serializeAws_restXmlWriteGetObjectResponseCommand)(input, context);\n    }\n    deserialize(output, context) {\n        return (0,_protocols_Aws_restXml__WEBPACK_IMPORTED_MODULE_5__.deserializeAws_restXmlWriteGetObjectResponseCommand)(output, context);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/commands/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/commands/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbortMultipartUploadCommand\": () => (/* reexport safe */ _AbortMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_0__.AbortMultipartUploadCommand),\n/* harmony export */   \"CompleteMultipartUploadCommand\": () => (/* reexport safe */ _CompleteMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_1__.CompleteMultipartUploadCommand),\n/* harmony export */   \"CopyObjectCommand\": () => (/* reexport safe */ _CopyObjectCommand__WEBPACK_IMPORTED_MODULE_2__.CopyObjectCommand),\n/* harmony export */   \"CreateBucketCommand\": () => (/* reexport safe */ _CreateBucketCommand__WEBPACK_IMPORTED_MODULE_3__.CreateBucketCommand),\n/* harmony export */   \"CreateMultipartUploadCommand\": () => (/* reexport safe */ _CreateMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_4__.CreateMultipartUploadCommand),\n/* harmony export */   \"DeleteBucketAnalyticsConfigurationCommand\": () => (/* reexport safe */ _DeleteBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_5__.DeleteBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"DeleteBucketCommand\": () => (/* reexport safe */ _DeleteBucketCommand__WEBPACK_IMPORTED_MODULE_6__.DeleteBucketCommand),\n/* harmony export */   \"DeleteBucketCorsCommand\": () => (/* reexport safe */ _DeleteBucketCorsCommand__WEBPACK_IMPORTED_MODULE_7__.DeleteBucketCorsCommand),\n/* harmony export */   \"DeleteBucketEncryptionCommand\": () => (/* reexport safe */ _DeleteBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_8__.DeleteBucketEncryptionCommand),\n/* harmony export */   \"DeleteBucketIntelligentTieringConfigurationCommand\": () => (/* reexport safe */ _DeleteBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_9__.DeleteBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"DeleteBucketInventoryConfigurationCommand\": () => (/* reexport safe */ _DeleteBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_10__.DeleteBucketInventoryConfigurationCommand),\n/* harmony export */   \"DeleteBucketLifecycleCommand\": () => (/* reexport safe */ _DeleteBucketLifecycleCommand__WEBPACK_IMPORTED_MODULE_11__.DeleteBucketLifecycleCommand),\n/* harmony export */   \"DeleteBucketMetricsConfigurationCommand\": () => (/* reexport safe */ _DeleteBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_12__.DeleteBucketMetricsConfigurationCommand),\n/* harmony export */   \"DeleteBucketOwnershipControlsCommand\": () => (/* reexport safe */ _DeleteBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_13__.DeleteBucketOwnershipControlsCommand),\n/* harmony export */   \"DeleteBucketPolicyCommand\": () => (/* reexport safe */ _DeleteBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_14__.DeleteBucketPolicyCommand),\n/* harmony export */   \"DeleteBucketReplicationCommand\": () => (/* reexport safe */ _DeleteBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_15__.DeleteBucketReplicationCommand),\n/* harmony export */   \"DeleteBucketTaggingCommand\": () => (/* reexport safe */ _DeleteBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_16__.DeleteBucketTaggingCommand),\n/* harmony export */   \"DeleteBucketWebsiteCommand\": () => (/* reexport safe */ _DeleteBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_17__.DeleteBucketWebsiteCommand),\n/* harmony export */   \"DeleteObjectCommand\": () => (/* reexport safe */ _DeleteObjectCommand__WEBPACK_IMPORTED_MODULE_18__.DeleteObjectCommand),\n/* harmony export */   \"DeleteObjectTaggingCommand\": () => (/* reexport safe */ _DeleteObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_19__.DeleteObjectTaggingCommand),\n/* harmony export */   \"DeleteObjectsCommand\": () => (/* reexport safe */ _DeleteObjectsCommand__WEBPACK_IMPORTED_MODULE_20__.DeleteObjectsCommand),\n/* harmony export */   \"DeletePublicAccessBlockCommand\": () => (/* reexport safe */ _DeletePublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_21__.DeletePublicAccessBlockCommand),\n/* harmony export */   \"GetBucketAccelerateConfigurationCommand\": () => (/* reexport safe */ _GetBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_22__.GetBucketAccelerateConfigurationCommand),\n/* harmony export */   \"GetBucketAclCommand\": () => (/* reexport safe */ _GetBucketAclCommand__WEBPACK_IMPORTED_MODULE_23__.GetBucketAclCommand),\n/* harmony export */   \"GetBucketAnalyticsConfigurationCommand\": () => (/* reexport safe */ _GetBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_24__.GetBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"GetBucketCorsCommand\": () => (/* reexport safe */ _GetBucketCorsCommand__WEBPACK_IMPORTED_MODULE_25__.GetBucketCorsCommand),\n/* harmony export */   \"GetBucketEncryptionCommand\": () => (/* reexport safe */ _GetBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_26__.GetBucketEncryptionCommand),\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationCommand\": () => (/* reexport safe */ _GetBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_27__.GetBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"GetBucketInventoryConfigurationCommand\": () => (/* reexport safe */ _GetBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_28__.GetBucketInventoryConfigurationCommand),\n/* harmony export */   \"GetBucketLifecycleConfigurationCommand\": () => (/* reexport safe */ _GetBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_29__.GetBucketLifecycleConfigurationCommand),\n/* harmony export */   \"GetBucketLocationCommand\": () => (/* reexport safe */ _GetBucketLocationCommand__WEBPACK_IMPORTED_MODULE_30__.GetBucketLocationCommand),\n/* harmony export */   \"GetBucketLoggingCommand\": () => (/* reexport safe */ _GetBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_31__.GetBucketLoggingCommand),\n/* harmony export */   \"GetBucketMetricsConfigurationCommand\": () => (/* reexport safe */ _GetBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_32__.GetBucketMetricsConfigurationCommand),\n/* harmony export */   \"GetBucketNotificationConfigurationCommand\": () => (/* reexport safe */ _GetBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_33__.GetBucketNotificationConfigurationCommand),\n/* harmony export */   \"GetBucketOwnershipControlsCommand\": () => (/* reexport safe */ _GetBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_34__.GetBucketOwnershipControlsCommand),\n/* harmony export */   \"GetBucketPolicyCommand\": () => (/* reexport safe */ _GetBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_35__.GetBucketPolicyCommand),\n/* harmony export */   \"GetBucketPolicyStatusCommand\": () => (/* reexport safe */ _GetBucketPolicyStatusCommand__WEBPACK_IMPORTED_MODULE_36__.GetBucketPolicyStatusCommand),\n/* harmony export */   \"GetBucketReplicationCommand\": () => (/* reexport safe */ _GetBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_37__.GetBucketReplicationCommand),\n/* harmony export */   \"GetBucketRequestPaymentCommand\": () => (/* reexport safe */ _GetBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_38__.GetBucketRequestPaymentCommand),\n/* harmony export */   \"GetBucketTaggingCommand\": () => (/* reexport safe */ _GetBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_39__.GetBucketTaggingCommand),\n/* harmony export */   \"GetBucketVersioningCommand\": () => (/* reexport safe */ _GetBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_40__.GetBucketVersioningCommand),\n/* harmony export */   \"GetBucketWebsiteCommand\": () => (/* reexport safe */ _GetBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_41__.GetBucketWebsiteCommand),\n/* harmony export */   \"GetObjectAclCommand\": () => (/* reexport safe */ _GetObjectAclCommand__WEBPACK_IMPORTED_MODULE_42__.GetObjectAclCommand),\n/* harmony export */   \"GetObjectAttributesCommand\": () => (/* reexport safe */ _GetObjectAttributesCommand__WEBPACK_IMPORTED_MODULE_43__.GetObjectAttributesCommand),\n/* harmony export */   \"GetObjectCommand\": () => (/* reexport safe */ _GetObjectCommand__WEBPACK_IMPORTED_MODULE_44__.GetObjectCommand),\n/* harmony export */   \"GetObjectLegalHoldCommand\": () => (/* reexport safe */ _GetObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_45__.GetObjectLegalHoldCommand),\n/* harmony export */   \"GetObjectLockConfigurationCommand\": () => (/* reexport safe */ _GetObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_46__.GetObjectLockConfigurationCommand),\n/* harmony export */   \"GetObjectRetentionCommand\": () => (/* reexport safe */ _GetObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_47__.GetObjectRetentionCommand),\n/* harmony export */   \"GetObjectTaggingCommand\": () => (/* reexport safe */ _GetObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_48__.GetObjectTaggingCommand),\n/* harmony export */   \"GetObjectTorrentCommand\": () => (/* reexport safe */ _GetObjectTorrentCommand__WEBPACK_IMPORTED_MODULE_49__.GetObjectTorrentCommand),\n/* harmony export */   \"GetPublicAccessBlockCommand\": () => (/* reexport safe */ _GetPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_50__.GetPublicAccessBlockCommand),\n/* harmony export */   \"HeadBucketCommand\": () => (/* reexport safe */ _HeadBucketCommand__WEBPACK_IMPORTED_MODULE_51__.HeadBucketCommand),\n/* harmony export */   \"HeadObjectCommand\": () => (/* reexport safe */ _HeadObjectCommand__WEBPACK_IMPORTED_MODULE_52__.HeadObjectCommand),\n/* harmony export */   \"ListBucketAnalyticsConfigurationsCommand\": () => (/* reexport safe */ _ListBucketAnalyticsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_53__.ListBucketAnalyticsConfigurationsCommand),\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsCommand\": () => (/* reexport safe */ _ListBucketIntelligentTieringConfigurationsCommand__WEBPACK_IMPORTED_MODULE_54__.ListBucketIntelligentTieringConfigurationsCommand),\n/* harmony export */   \"ListBucketInventoryConfigurationsCommand\": () => (/* reexport safe */ _ListBucketInventoryConfigurationsCommand__WEBPACK_IMPORTED_MODULE_55__.ListBucketInventoryConfigurationsCommand),\n/* harmony export */   \"ListBucketMetricsConfigurationsCommand\": () => (/* reexport safe */ _ListBucketMetricsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_56__.ListBucketMetricsConfigurationsCommand),\n/* harmony export */   \"ListBucketsCommand\": () => (/* reexport safe */ _ListBucketsCommand__WEBPACK_IMPORTED_MODULE_57__.ListBucketsCommand),\n/* harmony export */   \"ListMultipartUploadsCommand\": () => (/* reexport safe */ _ListMultipartUploadsCommand__WEBPACK_IMPORTED_MODULE_58__.ListMultipartUploadsCommand),\n/* harmony export */   \"ListObjectVersionsCommand\": () => (/* reexport safe */ _ListObjectVersionsCommand__WEBPACK_IMPORTED_MODULE_59__.ListObjectVersionsCommand),\n/* harmony export */   \"ListObjectsCommand\": () => (/* reexport safe */ _ListObjectsCommand__WEBPACK_IMPORTED_MODULE_60__.ListObjectsCommand),\n/* harmony export */   \"ListObjectsV2Command\": () => (/* reexport safe */ _ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_61__.ListObjectsV2Command),\n/* harmony export */   \"ListPartsCommand\": () => (/* reexport safe */ _ListPartsCommand__WEBPACK_IMPORTED_MODULE_62__.ListPartsCommand),\n/* harmony export */   \"PutBucketAccelerateConfigurationCommand\": () => (/* reexport safe */ _PutBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_63__.PutBucketAccelerateConfigurationCommand),\n/* harmony export */   \"PutBucketAclCommand\": () => (/* reexport safe */ _PutBucketAclCommand__WEBPACK_IMPORTED_MODULE_64__.PutBucketAclCommand),\n/* harmony export */   \"PutBucketAnalyticsConfigurationCommand\": () => (/* reexport safe */ _PutBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_65__.PutBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"PutBucketCorsCommand\": () => (/* reexport safe */ _PutBucketCorsCommand__WEBPACK_IMPORTED_MODULE_66__.PutBucketCorsCommand),\n/* harmony export */   \"PutBucketEncryptionCommand\": () => (/* reexport safe */ _PutBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_67__.PutBucketEncryptionCommand),\n/* harmony export */   \"PutBucketIntelligentTieringConfigurationCommand\": () => (/* reexport safe */ _PutBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_68__.PutBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"PutBucketInventoryConfigurationCommand\": () => (/* reexport safe */ _PutBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_69__.PutBucketInventoryConfigurationCommand),\n/* harmony export */   \"PutBucketLifecycleConfigurationCommand\": () => (/* reexport safe */ _PutBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_70__.PutBucketLifecycleConfigurationCommand),\n/* harmony export */   \"PutBucketLoggingCommand\": () => (/* reexport safe */ _PutBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_71__.PutBucketLoggingCommand),\n/* harmony export */   \"PutBucketMetricsConfigurationCommand\": () => (/* reexport safe */ _PutBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_72__.PutBucketMetricsConfigurationCommand),\n/* harmony export */   \"PutBucketNotificationConfigurationCommand\": () => (/* reexport safe */ _PutBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_73__.PutBucketNotificationConfigurationCommand),\n/* harmony export */   \"PutBucketOwnershipControlsCommand\": () => (/* reexport safe */ _PutBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_74__.PutBucketOwnershipControlsCommand),\n/* harmony export */   \"PutBucketPolicyCommand\": () => (/* reexport safe */ _PutBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_75__.PutBucketPolicyCommand),\n/* harmony export */   \"PutBucketReplicationCommand\": () => (/* reexport safe */ _PutBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_76__.PutBucketReplicationCommand),\n/* harmony export */   \"PutBucketRequestPaymentCommand\": () => (/* reexport safe */ _PutBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_77__.PutBucketRequestPaymentCommand),\n/* harmony export */   \"PutBucketTaggingCommand\": () => (/* reexport safe */ _PutBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_78__.PutBucketTaggingCommand),\n/* harmony export */   \"PutBucketVersioningCommand\": () => (/* reexport safe */ _PutBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_79__.PutBucketVersioningCommand),\n/* harmony export */   \"PutBucketWebsiteCommand\": () => (/* reexport safe */ _PutBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_80__.PutBucketWebsiteCommand),\n/* harmony export */   \"PutObjectAclCommand\": () => (/* reexport safe */ _PutObjectAclCommand__WEBPACK_IMPORTED_MODULE_81__.PutObjectAclCommand),\n/* harmony export */   \"PutObjectCommand\": () => (/* reexport safe */ _PutObjectCommand__WEBPACK_IMPORTED_MODULE_82__.PutObjectCommand),\n/* harmony export */   \"PutObjectLegalHoldCommand\": () => (/* reexport safe */ _PutObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_83__.PutObjectLegalHoldCommand),\n/* harmony export */   \"PutObjectLockConfigurationCommand\": () => (/* reexport safe */ _PutObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_84__.PutObjectLockConfigurationCommand),\n/* harmony export */   \"PutObjectRetentionCommand\": () => (/* reexport safe */ _PutObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_85__.PutObjectRetentionCommand),\n/* harmony export */   \"PutObjectTaggingCommand\": () => (/* reexport safe */ _PutObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_86__.PutObjectTaggingCommand),\n/* harmony export */   \"PutPublicAccessBlockCommand\": () => (/* reexport safe */ _PutPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_87__.PutPublicAccessBlockCommand),\n/* harmony export */   \"RestoreObjectCommand\": () => (/* reexport safe */ _RestoreObjectCommand__WEBPACK_IMPORTED_MODULE_88__.RestoreObjectCommand),\n/* harmony export */   \"SelectObjectContentCommand\": () => (/* reexport safe */ _SelectObjectContentCommand__WEBPACK_IMPORTED_MODULE_89__.SelectObjectContentCommand),\n/* harmony export */   \"UploadPartCommand\": () => (/* reexport safe */ _UploadPartCommand__WEBPACK_IMPORTED_MODULE_90__.UploadPartCommand),\n/* harmony export */   \"UploadPartCopyCommand\": () => (/* reexport safe */ _UploadPartCopyCommand__WEBPACK_IMPORTED_MODULE_91__.UploadPartCopyCommand),\n/* harmony export */   \"WriteGetObjectResponseCommand\": () => (/* reexport safe */ _WriteGetObjectResponseCommand__WEBPACK_IMPORTED_MODULE_92__.WriteGetObjectResponseCommand)\n/* harmony export */ });\n/* harmony import */ var _AbortMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortMultipartUploadCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/AbortMultipartUploadCommand.js\");\n/* harmony import */ var _CompleteMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompleteMultipartUploadCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/CompleteMultipartUploadCommand.js\");\n/* harmony import */ var _CopyObjectCommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CopyObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/CopyObjectCommand.js\");\n/* harmony import */ var _CreateBucketCommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CreateBucketCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateBucketCommand.js\");\n/* harmony import */ var _CreateMultipartUploadCommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CreateMultipartUploadCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/CreateMultipartUploadCommand.js\");\n/* harmony import */ var _DeleteBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DeleteBucketAnalyticsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketAnalyticsConfigurationCommand.js\");\n/* harmony import */ var _DeleteBucketCommand__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DeleteBucketCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCommand.js\");\n/* harmony import */ var _DeleteBucketCorsCommand__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DeleteBucketCorsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketCorsCommand.js\");\n/* harmony import */ var _DeleteBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./DeleteBucketEncryptionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketEncryptionCommand.js\");\n/* harmony import */ var _DeleteBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DeleteBucketIntelligentTieringConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketIntelligentTieringConfigurationCommand.js\");\n/* harmony import */ var _DeleteBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DeleteBucketInventoryConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketInventoryConfigurationCommand.js\");\n/* harmony import */ var _DeleteBucketLifecycleCommand__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./DeleteBucketLifecycleCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketLifecycleCommand.js\");\n/* harmony import */ var _DeleteBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./DeleteBucketMetricsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketMetricsConfigurationCommand.js\");\n/* harmony import */ var _DeleteBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./DeleteBucketOwnershipControlsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketOwnershipControlsCommand.js\");\n/* harmony import */ var _DeleteBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./DeleteBucketPolicyCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketPolicyCommand.js\");\n/* harmony import */ var _DeleteBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./DeleteBucketReplicationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketReplicationCommand.js\");\n/* harmony import */ var _DeleteBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./DeleteBucketTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketTaggingCommand.js\");\n/* harmony import */ var _DeleteBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./DeleteBucketWebsiteCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteBucketWebsiteCommand.js\");\n/* harmony import */ var _DeleteObjectCommand__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./DeleteObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectCommand.js\");\n/* harmony import */ var _DeleteObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./DeleteObjectTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectTaggingCommand.js\");\n/* harmony import */ var _DeleteObjectsCommand__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./DeleteObjectsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeleteObjectsCommand.js\");\n/* harmony import */ var _DeletePublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./DeletePublicAccessBlockCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/DeletePublicAccessBlockCommand.js\");\n/* harmony import */ var _GetBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./GetBucketAccelerateConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAccelerateConfigurationCommand.js\");\n/* harmony import */ var _GetBucketAclCommand__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./GetBucketAclCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAclCommand.js\");\n/* harmony import */ var _GetBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./GetBucketAnalyticsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketAnalyticsConfigurationCommand.js\");\n/* harmony import */ var _GetBucketCorsCommand__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./GetBucketCorsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketCorsCommand.js\");\n/* harmony import */ var _GetBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./GetBucketEncryptionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketEncryptionCommand.js\");\n/* harmony import */ var _GetBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./GetBucketIntelligentTieringConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketIntelligentTieringConfigurationCommand.js\");\n/* harmony import */ var _GetBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./GetBucketInventoryConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketInventoryConfigurationCommand.js\");\n/* harmony import */ var _GetBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./GetBucketLifecycleConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLifecycleConfigurationCommand.js\");\n/* harmony import */ var _GetBucketLocationCommand__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./GetBucketLocationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLocationCommand.js\");\n/* harmony import */ var _GetBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./GetBucketLoggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketLoggingCommand.js\");\n/* harmony import */ var _GetBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./GetBucketMetricsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketMetricsConfigurationCommand.js\");\n/* harmony import */ var _GetBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./GetBucketNotificationConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketNotificationConfigurationCommand.js\");\n/* harmony import */ var _GetBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./GetBucketOwnershipControlsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketOwnershipControlsCommand.js\");\n/* harmony import */ var _GetBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./GetBucketPolicyCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyCommand.js\");\n/* harmony import */ var _GetBucketPolicyStatusCommand__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./GetBucketPolicyStatusCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketPolicyStatusCommand.js\");\n/* harmony import */ var _GetBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./GetBucketReplicationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketReplicationCommand.js\");\n/* harmony import */ var _GetBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./GetBucketRequestPaymentCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketRequestPaymentCommand.js\");\n/* harmony import */ var _GetBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./GetBucketTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketTaggingCommand.js\");\n/* harmony import */ var _GetBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./GetBucketVersioningCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketVersioningCommand.js\");\n/* harmony import */ var _GetBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./GetBucketWebsiteCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetBucketWebsiteCommand.js\");\n/* harmony import */ var _GetObjectAclCommand__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./GetObjectAclCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAclCommand.js\");\n/* harmony import */ var _GetObjectAttributesCommand__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./GetObjectAttributesCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectAttributesCommand.js\");\n/* harmony import */ var _GetObjectCommand__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./GetObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectCommand.js\");\n/* harmony import */ var _GetObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./GetObjectLegalHoldCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLegalHoldCommand.js\");\n/* harmony import */ var _GetObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./GetObjectLockConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectLockConfigurationCommand.js\");\n/* harmony import */ var _GetObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./GetObjectRetentionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectRetentionCommand.js\");\n/* harmony import */ var _GetObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./GetObjectTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTaggingCommand.js\");\n/* harmony import */ var _GetObjectTorrentCommand__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./GetObjectTorrentCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetObjectTorrentCommand.js\");\n/* harmony import */ var _GetPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./GetPublicAccessBlockCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/GetPublicAccessBlockCommand.js\");\n/* harmony import */ var _HeadBucketCommand__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./HeadBucketCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js\");\n/* harmony import */ var _HeadObjectCommand__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./HeadObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js\");\n/* harmony import */ var _ListBucketAnalyticsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./ListBucketAnalyticsConfigurationsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketAnalyticsConfigurationsCommand.js\");\n/* harmony import */ var _ListBucketIntelligentTieringConfigurationsCommand__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./ListBucketIntelligentTieringConfigurationsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketIntelligentTieringConfigurationsCommand.js\");\n/* harmony import */ var _ListBucketInventoryConfigurationsCommand__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./ListBucketInventoryConfigurationsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketInventoryConfigurationsCommand.js\");\n/* harmony import */ var _ListBucketMetricsConfigurationsCommand__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./ListBucketMetricsConfigurationsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketMetricsConfigurationsCommand.js\");\n/* harmony import */ var _ListBucketsCommand__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./ListBucketsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListBucketsCommand.js\");\n/* harmony import */ var _ListMultipartUploadsCommand__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./ListMultipartUploadsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListMultipartUploadsCommand.js\");\n/* harmony import */ var _ListObjectVersionsCommand__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./ListObjectVersionsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectVersionsCommand.js\");\n/* harmony import */ var _ListObjectsCommand__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./ListObjectsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsCommand.js\");\n/* harmony import */ var _ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./ListObjectsV2Command */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js\");\n/* harmony import */ var _ListPartsCommand__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./ListPartsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js\");\n/* harmony import */ var _PutBucketAccelerateConfigurationCommand__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./PutBucketAccelerateConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAccelerateConfigurationCommand.js\");\n/* harmony import */ var _PutBucketAclCommand__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./PutBucketAclCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAclCommand.js\");\n/* harmony import */ var _PutBucketAnalyticsConfigurationCommand__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./PutBucketAnalyticsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketAnalyticsConfigurationCommand.js\");\n/* harmony import */ var _PutBucketCorsCommand__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./PutBucketCorsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketCorsCommand.js\");\n/* harmony import */ var _PutBucketEncryptionCommand__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./PutBucketEncryptionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketEncryptionCommand.js\");\n/* harmony import */ var _PutBucketIntelligentTieringConfigurationCommand__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./PutBucketIntelligentTieringConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketIntelligentTieringConfigurationCommand.js\");\n/* harmony import */ var _PutBucketInventoryConfigurationCommand__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./PutBucketInventoryConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketInventoryConfigurationCommand.js\");\n/* harmony import */ var _PutBucketLifecycleConfigurationCommand__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./PutBucketLifecycleConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLifecycleConfigurationCommand.js\");\n/* harmony import */ var _PutBucketLoggingCommand__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./PutBucketLoggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketLoggingCommand.js\");\n/* harmony import */ var _PutBucketMetricsConfigurationCommand__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./PutBucketMetricsConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketMetricsConfigurationCommand.js\");\n/* harmony import */ var _PutBucketNotificationConfigurationCommand__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./PutBucketNotificationConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketNotificationConfigurationCommand.js\");\n/* harmony import */ var _PutBucketOwnershipControlsCommand__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./PutBucketOwnershipControlsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketOwnershipControlsCommand.js\");\n/* harmony import */ var _PutBucketPolicyCommand__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./PutBucketPolicyCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketPolicyCommand.js\");\n/* harmony import */ var _PutBucketReplicationCommand__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./PutBucketReplicationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketReplicationCommand.js\");\n/* harmony import */ var _PutBucketRequestPaymentCommand__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./PutBucketRequestPaymentCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketRequestPaymentCommand.js\");\n/* harmony import */ var _PutBucketTaggingCommand__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./PutBucketTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketTaggingCommand.js\");\n/* harmony import */ var _PutBucketVersioningCommand__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./PutBucketVersioningCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketVersioningCommand.js\");\n/* harmony import */ var _PutBucketWebsiteCommand__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./PutBucketWebsiteCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutBucketWebsiteCommand.js\");\n/* harmony import */ var _PutObjectAclCommand__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./PutObjectAclCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectAclCommand.js\");\n/* harmony import */ var _PutObjectCommand__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./PutObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectCommand.js\");\n/* harmony import */ var _PutObjectLegalHoldCommand__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./PutObjectLegalHoldCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLegalHoldCommand.js\");\n/* harmony import */ var _PutObjectLockConfigurationCommand__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./PutObjectLockConfigurationCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectLockConfigurationCommand.js\");\n/* harmony import */ var _PutObjectRetentionCommand__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./PutObjectRetentionCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectRetentionCommand.js\");\n/* harmony import */ var _PutObjectTaggingCommand__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./PutObjectTaggingCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutObjectTaggingCommand.js\");\n/* harmony import */ var _PutPublicAccessBlockCommand__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./PutPublicAccessBlockCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/PutPublicAccessBlockCommand.js\");\n/* harmony import */ var _RestoreObjectCommand__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./RestoreObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/RestoreObjectCommand.js\");\n/* harmony import */ var _SelectObjectContentCommand__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./SelectObjectContentCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/SelectObjectContentCommand.js\");\n/* harmony import */ var _UploadPartCommand__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./UploadPartCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCommand.js\");\n/* harmony import */ var _UploadPartCopyCommand__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./UploadPartCopyCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/UploadPartCopyCommand.js\");\n/* harmony import */ var _WriteGetObjectResponseCommand__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./WriteGetObjectResponseCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/WriteGetObjectResponseCommand.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/commands/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveClientEndpointParameters\": () => (/* binding */ resolveClientEndpointParameters)\n/* harmony export */ });\nconst resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,\n        useGlobalEndpoint: options.useGlobalEndpoint ?? false,\n        disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,\n        defaultSigningName: \"s3\",\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/endpoint/EndpointParameters.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultEndpointResolver\": () => (/* binding */ defaultEndpointResolver)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-endpoints */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/index.js\");\n/* harmony import */ var _ruleset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ruleset */ \"./node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js\");\n\n\nconst defaultEndpointResolver = (endpointParams, context = {}) => {\n    return (0,_aws_sdk_util_endpoints__WEBPACK_IMPORTED_MODULE_0__.resolveEndpoint)(_ruleset__WEBPACK_IMPORTED_MODULE_1__.ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ruleSet\": () => (/* binding */ ruleSet)\n/* harmony export */ });\nconst ruleSet = {\n    version: \"1.0\",\n    parameters: {\n        Bucket: {\n            required: false,\n            documentation: \"The S3 bucket used to send the request. This is an optional parameter that will be set automatically for operations that are scoped to an S3 bucket.\",\n            type: \"String\",\n        },\n        Region: {\n            builtIn: \"AWS::Region\",\n            required: false,\n            documentation: \"The AWS region used to dispatch the request.\",\n            type: \"String\",\n        },\n        UseFIPS: {\n            builtIn: \"AWS::UseFIPS\",\n            required: true,\n            default: false,\n            documentation: \"When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.\",\n            type: \"Boolean\",\n        },\n        UseDualStack: {\n            builtIn: \"AWS::UseDualStack\",\n            required: true,\n            default: false,\n            documentation: \"When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.\",\n            type: \"Boolean\",\n        },\n        Endpoint: {\n            builtIn: \"SDK::Endpoint\",\n            required: false,\n            documentation: \"Override the endpoint used to send this request\",\n            type: \"String\",\n        },\n        ForcePathStyle: {\n            builtIn: \"AWS::S3::ForcePathStyle\",\n            required: false,\n            documentation: \"When true, force a path-style endpoint to be used where the bucket name is part of the path.\",\n            type: \"Boolean\",\n        },\n        Accelerate: {\n            builtIn: \"AWS::S3::Accelerate\",\n            required: true,\n            default: false,\n            documentation: \"When true, use S3 Accelerate. NOTE: Not all regions support S3 accelerate.\",\n            type: \"Boolean\",\n        },\n        UseGlobalEndpoint: {\n            builtIn: \"AWS::S3::UseGlobalEndpoint\",\n            required: true,\n            default: false,\n            documentation: \"Whether the global endpoint should be used, rather then the regional endpoint for us-east-1.\",\n            type: \"Boolean\",\n        },\n        UseObjectLambdaEndpoint: {\n            required: false,\n            documentation: \"Internal parameter to use object lambda endpoint for an operation (eg: WriteGetObjectResponse)\",\n            type: \"Boolean\",\n        },\n        DisableAccessPoints: {\n            required: false,\n            documentation: \"Internal parameter to disable Access Point Buckets\",\n            type: \"Boolean\",\n        },\n        DisableMultiRegionAccessPoints: {\n            builtIn: \"AWS::S3::DisableMultiRegionAccessPoints\",\n            required: true,\n            default: false,\n            documentation: \"Whether multi-region access points (MRAP) should be disabled.\",\n            type: \"Boolean\",\n        },\n        UseArnRegion: {\n            builtIn: \"AWS::S3::UseArnRegion\",\n            required: false,\n            documentation: \"When an Access Point ARN is provided and this flag is enabled, the SDK MUST use the ARN's region when constructing the endpoint instead of the client's configured region.\",\n            type: \"Boolean\",\n        },\n    },\n    rules: [\n        {\n            conditions: [],\n            type: \"tree\",\n            rules: [\n                {\n                    conditions: [\n                        {\n                            fn: \"isSet\",\n                            argv: [\n                                {\n                                    ref: \"Region\",\n                                },\n                            ],\n                        },\n                    ],\n                    type: \"tree\",\n                    rules: [\n                        {\n                            conditions: [],\n                            type: \"tree\",\n                            rules: [\n                                {\n                                    conditions: [\n                                        {\n                                            fn: \"isSet\",\n                                            argv: [\n                                                {\n                                                    ref: \"Bucket\",\n                                                },\n                                            ],\n                                        },\n                                        {\n                                            fn: \"substring\",\n                                            argv: [\n                                                {\n                                                    ref: \"Bucket\",\n                                                },\n                                                49,\n                                                50,\n                                                true,\n                                            ],\n                                            assign: \"hardwareType\",\n                                        },\n                                        {\n                                            fn: \"substring\",\n                                            argv: [\n                                                {\n                                                    ref: \"Bucket\",\n                                                },\n                                                8,\n                                                12,\n                                                true,\n                                            ],\n                                            assign: \"regionPrefix\",\n                                        },\n                                        {\n                                            fn: \"substring\",\n                                            argv: [\n                                                {\n                                                    ref: \"Bucket\",\n                                                },\n                                                0,\n                                                7,\n                                                true,\n                                            ],\n                                            assign: \"abbaSuffix\",\n                                        },\n                                        {\n                                            fn: \"substring\",\n                                            argv: [\n                                                {\n                                                    ref: \"Bucket\",\n                                                },\n                                                32,\n                                                49,\n                                                true,\n                                            ],\n                                            assign: \"outpostId\",\n                                        },\n                                        {\n                                            fn: \"aws.partition\",\n                                            argv: [\n                                                {\n                                                    ref: \"Region\",\n                                                },\n                                            ],\n                                            assign: \"regionPartition\",\n                                        },\n                                        {\n                                            fn: \"stringEquals\",\n                                            argv: [\n                                                {\n                                                    ref: \"abbaSuffix\",\n                                                },\n                                                \"--op-s3\",\n                                            ],\n                                        },\n                                    ],\n                                    type: \"tree\",\n                                    rules: [\n                                        {\n                                            conditions: [\n                                                {\n                                                    fn: \"isValidHostLabel\",\n                                                    argv: [\n                                                        {\n                                                            ref: \"outpostId\",\n                                                        },\n                                                        false,\n                                                    ],\n                                                },\n                                            ],\n                                            type: \"tree\",\n                                            rules: [\n                                                {\n                                                    conditions: [],\n                                                    type: \"tree\",\n                                                    rules: [\n                                                        {\n                                                            conditions: [\n                                                                {\n                                                                    fn: \"stringEquals\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"hardwareType\",\n                                                                        },\n                                                                        \"e\",\n                                                                    ],\n                                                                },\n                                                            ],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [\n                                                                        {\n                                                                            fn: \"stringEquals\",\n                                                                            argv: [\n                                                                                {\n                                                                                    ref: \"regionPrefix\",\n                                                                                },\n                                                                                \"beta\",\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"not\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            error: \"Expected a endpoint to be specified but no endpoint was found\",\n                                                                            type: \"error\",\n                                                                        },\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"isSet\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"Endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    fn: \"parseURL\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"Endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                    assign: \"url\",\n                                                                                },\n                                                                            ],\n                                                                            endpoint: {\n                                                                                url: \"https://{Bucket}.ec2.{url#authority}\",\n                                                                                properties: {\n                                                                                    authSchemes: [\n                                                                                        {\n                                                                                            name: \"sigv4\",\n                                                                                            signingName: \"s3-outposts\",\n                                                                                            disableDoubleEncoding: true,\n                                                                                            signingRegion: \"{Region}\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                headers: {},\n                                                                            },\n                                                                            type: \"endpoint\",\n                                                                        },\n                                                                    ],\n                                                                },\n                                                                {\n                                                                    conditions: [],\n                                                                    endpoint: {\n                                                                        url: \"https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}\",\n                                                                        properties: {\n                                                                            authSchemes: [\n                                                                                {\n                                                                                    name: \"sigv4\",\n                                                                                    signingName: \"s3-outposts\",\n                                                                                    disableDoubleEncoding: true,\n                                                                                    signingRegion: \"{Region}\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                        headers: {},\n                                                                    },\n                                                                    type: \"endpoint\",\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            conditions: [\n                                                                {\n                                                                    fn: \"stringEquals\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"hardwareType\",\n                                                                        },\n                                                                        \"o\",\n                                                                    ],\n                                                                },\n                                                            ],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [\n                                                                        {\n                                                                            fn: \"stringEquals\",\n                                                                            argv: [\n                                                                                {\n                                                                                    ref: \"regionPrefix\",\n                                                                                },\n                                                                                \"beta\",\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"not\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            error: \"Expected a endpoint to be specified but no endpoint was found\",\n                                                                            type: \"error\",\n                                                                        },\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"isSet\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"Endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    fn: \"parseURL\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"Endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                    assign: \"url\",\n                                                                                },\n                                                                            ],\n                                                                            endpoint: {\n                                                                                url: \"https://{Bucket}.op-{outpostId}.{url#authority}\",\n                                                                                properties: {\n                                                                                    authSchemes: [\n                                                                                        {\n                                                                                            name: \"sigv4\",\n                                                                                            signingName: \"s3-outposts\",\n                                                                                            disableDoubleEncoding: true,\n                                                                                            signingRegion: \"{Region}\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                headers: {},\n                                                                            },\n                                                                            type: \"endpoint\",\n                                                                        },\n                                                                    ],\n                                                                },\n                                                                {\n                                                                    conditions: [],\n                                                                    endpoint: {\n                                                                        url: \"https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}\",\n                                                                        properties: {\n                                                                            authSchemes: [\n                                                                                {\n                                                                                    name: \"sigv4\",\n                                                                                    signingName: \"s3-outposts\",\n                                                                                    disableDoubleEncoding: true,\n                                                                                    signingRegion: \"{Region}\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                        headers: {},\n                                                                    },\n                                                                    type: \"endpoint\",\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            conditions: [],\n                                                            error: `Unrecognized hardware type: \"Expected hardware type o or e but got {hardwareType}\"`,\n                                                            type: \"error\",\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                        },\n                                        {\n                                            conditions: [],\n                                            error: \"Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.\",\n                                            type: \"error\",\n                                        },\n                                    ],\n                                },\n                                {\n                                    conditions: [\n                                        {\n                                            fn: \"isSet\",\n                                            argv: [\n                                                {\n                                                    ref: \"Bucket\",\n                                                },\n                                            ],\n                                        },\n                                    ],\n                                    type: \"tree\",\n                                    rules: [\n                                        {\n                                            conditions: [\n                                                {\n                                                    fn: \"isSet\",\n                                                    argv: [\n                                                        {\n                                                            ref: \"Endpoint\",\n                                                        },\n                                                    ],\n                                                },\n                                                {\n                                                    fn: \"not\",\n                                                    argv: [\n                                                        {\n                                                            fn: \"isSet\",\n                                                            argv: [\n                                                                {\n                                                                    fn: \"parseURL\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"Endpoint\",\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                            error: \"Custom endpoint `{Endpoint}` was not a valid URI\",\n                                            type: \"error\",\n                                        },\n                                        {\n                                            conditions: [],\n                                            type: \"tree\",\n                                            rules: [\n                                                {\n                                                    conditions: [\n                                                        {\n                                                            fn: \"isSet\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"ForcePathStyle\",\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            fn: \"booleanEquals\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"ForcePathStyle\",\n                                                                },\n                                                                true,\n                                                            ],\n                                                        },\n                                                    ],\n                                                    type: \"tree\",\n                                                    rules: [\n                                                        {\n                                                            conditions: [],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [\n                                                                        {\n                                                                            fn: \"aws.parseArn\",\n                                                                            argv: [\n                                                                                {\n                                                                                    ref: \"Bucket\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                    error: \"Path-style addressing cannot be used with ARN buckets\",\n                                                                    type: \"error\",\n                                                                },\n                                                                {\n                                                                    conditions: [\n                                                                        {\n                                                                            fn: \"uriEncode\",\n                                                                            argv: [\n                                                                                {\n                                                                                    ref: \"Bucket\",\n                                                                                },\n                                                                            ],\n                                                                            assign: \"uri_encoded_bucket\",\n                                                                        },\n                                                                    ],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"booleanEquals\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"UseDualStack\",\n                                                                                        },\n                                                                                        true,\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    fn: \"isSet\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"Endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            error: \"Cannot set dual-stack in combination with a custom endpoint.\",\n                                                                            type: \"error\",\n                                                                        },\n                                                                        {\n                                                                            conditions: [],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"aws.partition\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"partitionResult\",\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            type: \"tree\",\n                                                                                            rules: [\n                                                                                                {\n                                                                                                    conditions: [\n                                                                                                        {\n                                                                                                            fn: \"booleanEquals\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"Accelerate\",\n                                                                                                                },\n                                                                                                                false,\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                    type: \"tree\",\n                                                                                                    rules: [\n                                                                                                        {\n                                                                                                            conditions: [],\n                                                                                                            type: \"tree\",\n                                                                                                            rules: [\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseFIPS\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            type: \"tree\",\n                                                                                                                            rules: [\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                },\n                                                                                                                                                \"aws-global\",\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                },\n                                                                                                                                                \"aws-global\",\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    type: \"tree\",\n                                                                                                                                    rules: [\n                                                                                                                                        {\n                                                                                                                                            conditions: [],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"isSet\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"parseURL\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            assign: \"url\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                },\n                                                                                                                                                \"aws-global\",\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"isSet\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"parseURL\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            assign: \"url\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                },\n                                                                                                                                                \"aws-global\",\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"isSet\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"parseURL\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            assign: \"url\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    type: \"tree\",\n                                                                                                                                    rules: [\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"us-east-1\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"isSet\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"parseURL\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            assign: \"url\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                },\n                                                                                                                                                \"aws-global\",\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                },\n                                                                                                                                                \"aws-global\",\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    type: \"tree\",\n                                                                                                                                    rules: [\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"us-east-1\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    endpoint: {\n                                                                                                                                        url: \"https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                        properties: {\n                                                                                                                                            authSchemes: [\n                                                                                                                                                {\n                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        headers: {},\n                                                                                                                                    },\n                                                                                                                                    type: \"endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [],\n                                                                                                                    error: \"Path-style addressing cannot be used with FIPS\",\n                                                                                                                    type: \"error\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                {\n                                                                                                    conditions: [],\n                                                                                                    error: \"Path-style addressing cannot be used with S3 Accelerate\",\n                                                                                                    type: \"error\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [],\n                                                                                    error: \"A valid partition could not be determined\",\n                                                                                    type: \"error\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                        },\n                                                    ],\n                                                },\n                                                {\n                                                    conditions: [\n                                                        {\n                                                            fn: \"aws.isVirtualHostableS3Bucket\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"Bucket\",\n                                                                },\n                                                                false,\n                                                            ],\n                                                        },\n                                                    ],\n                                                    type: \"tree\",\n                                                    rules: [\n                                                        {\n                                                            conditions: [\n                                                                {\n                                                                    fn: \"aws.partition\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"Region\",\n                                                                        },\n                                                                    ],\n                                                                    assign: \"partitionResult\",\n                                                                },\n                                                            ],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"isValidHostLabel\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"Region\",\n                                                                                        },\n                                                                                        false,\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [\n                                                                                                {\n                                                                                                    fn: \"booleanEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"UseFIPS\",\n                                                                                                        },\n                                                                                                        true,\n                                                                                                    ],\n                                                                                                },\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            fn: \"getAttr\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"partitionResult\",\n                                                                                                                },\n                                                                                                                \"name\",\n                                                                                                            ],\n                                                                                                        },\n                                                                                                        \"aws-cn\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                            error: \"Partition does not support FIPS\",\n                                                                                            type: \"error\",\n                                                                                        },\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            type: \"tree\",\n                                                                                            rules: [\n                                                                                                {\n                                                                                                    conditions: [\n                                                                                                        {\n                                                                                                            fn: \"booleanEquals\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"Accelerate\",\n                                                                                                                },\n                                                                                                                true,\n                                                                                                            ],\n                                                                                                        },\n                                                                                                        {\n                                                                                                            fn: \"booleanEquals\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"UseFIPS\",\n                                                                                                                },\n                                                                                                                true,\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                    error: \"Accelerate cannot be used with FIPS\",\n                                                                                                    type: \"error\",\n                                                                                                },\n                                                                                                {\n                                                                                                    conditions: [],\n                                                                                                    type: \"tree\",\n                                                                                                    rules: [\n                                                                                                        {\n                                                                                                            conditions: [\n                                                                                                                {\n                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                    argv: [\n                                                                                                                        {\n                                                                                                                            ref: \"Accelerate\",\n                                                                                                                        },\n                                                                                                                        true,\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    fn: \"stringEquals\",\n                                                                                                                    argv: [\n                                                                                                                        {\n                                                                                                                            fn: \"getAttr\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"partitionResult\",\n                                                                                                                                },\n                                                                                                                                \"name\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        \"aws-cn\",\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                            error: \"S3 Accelerate cannot be used in this region\",\n                                                                                                            type: \"error\",\n                                                                                                        },\n                                                                                                        {\n                                                                                                            conditions: [],\n                                                                                                            type: \"tree\",\n                                                                                                            rules: [\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"isSet\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    error: \"Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate\",\n                                                                                                                    type: \"error\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                        },\n                                                                                                                                        true,\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            error: \"Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate\",\n                                                                                                                            type: \"error\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            type: \"tree\",\n                                                                                                                            rules: [\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"isSet\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"Accelerate\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    error: \"Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate\",\n                                                                                                                                    type: \"error\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [],\n                                                                                                                                    type: \"tree\",\n                                                                                                                                    rules: [\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    assign: \"url\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"url\",\n                                                                                                                                                                },\n                                                                                                                                                                \"isIp\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    assign: \"url\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"url\",\n                                                                                                                                                                },\n                                                                                                                                                                \"isIp\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"{url#scheme}://{Bucket}.{url#authority}{url#path}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    assign: \"url\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"url\",\n                                                                                                                                                                },\n                                                                                                                                                                \"isIp\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    assign: \"url\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"url\",\n                                                                                                                                                                },\n                                                                                                                                                                \"isIp\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"{url#scheme}://{Bucket}.{url#authority}{url#path}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    assign: \"url\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"url\",\n                                                                                                                                                                },\n                                                                                                                                                                \"isIp\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"us-east-1\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    assign: \"url\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"url\",\n                                                                                                                                                                },\n                                                                                                                                                                \"isIp\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"us-east-1\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"{url#scheme}://{Bucket}.{url#authority}{url#path}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"{url#scheme}://{Bucket}.{url#authority}{url#path}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    assign: \"url\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"url\",\n                                                                                                                                                                },\n                                                                                                                                                                \"isIp\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    assign: \"url\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"url\",\n                                                                                                                                                                },\n                                                                                                                                                                \"isIp\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"{url#scheme}://{Bucket}.{url#authority}{url#path}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"us-east-1\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                        },\n                                                                                                                                                        \"aws-global\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"us-east-1\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"us-east-1\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"https://{Bucket}.s3.{partitionResult#dnsSuffix}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    endpoint: {\n                                                                                                                                                        url: \"https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                                                                        properties: {\n                                                                                                                                                            authSchemes: [\n                                                                                                                                                                {\n                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        headers: {},\n                                                                                                                                                    },\n                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                },\n                                                                                                                                                                \"aws-global\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"UseGlobalEndpoint\",\n                                                                                                                                                        },\n                                                                                                                                                        false,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            endpoint: {\n                                                                                                                                                url: \"https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                                                                properties: {\n                                                                                                                                                    authSchemes: [\n                                                                                                                                                        {\n                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                                headers: {},\n                                                                                                                                            },\n                                                                                                                                            type: \"endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                        {\n                                                                            conditions: [],\n                                                                            error: \"Invalid region: region was not a valid DNS name.\",\n                                                                            type: \"error\",\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            conditions: [],\n                                                            error: \"A valid partition could not be determined\",\n                                                            type: \"error\",\n                                                        },\n                                                    ],\n                                                },\n                                                {\n                                                    conditions: [\n                                                        {\n                                                            fn: \"isSet\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"Endpoint\",\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            fn: \"parseURL\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"Endpoint\",\n                                                                },\n                                                            ],\n                                                            assign: \"url\",\n                                                        },\n                                                        {\n                                                            fn: \"stringEquals\",\n                                                            argv: [\n                                                                {\n                                                                    fn: \"getAttr\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"url\",\n                                                                        },\n                                                                        \"scheme\",\n                                                                    ],\n                                                                },\n                                                                \"http\",\n                                                            ],\n                                                        },\n                                                        {\n                                                            fn: \"aws.isVirtualHostableS3Bucket\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"Bucket\",\n                                                                },\n                                                                true,\n                                                            ],\n                                                        },\n                                                        {\n                                                            fn: \"booleanEquals\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"UseFIPS\",\n                                                                },\n                                                                false,\n                                                            ],\n                                                        },\n                                                        {\n                                                            fn: \"booleanEquals\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"UseDualStack\",\n                                                                },\n                                                                false,\n                                                            ],\n                                                        },\n                                                        {\n                                                            fn: \"booleanEquals\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"Accelerate\",\n                                                                },\n                                                                false,\n                                                            ],\n                                                        },\n                                                    ],\n                                                    type: \"tree\",\n                                                    rules: [\n                                                        {\n                                                            conditions: [\n                                                                {\n                                                                    fn: \"aws.partition\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"Region\",\n                                                                        },\n                                                                    ],\n                                                                    assign: \"partitionResult\",\n                                                                },\n                                                            ],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"isValidHostLabel\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"Region\",\n                                                                                        },\n                                                                                        false,\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{Bucket}.{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                        {\n                                                                            conditions: [],\n                                                                            error: \"Invalid region: region was not a valid DNS name.\",\n                                                                            type: \"error\",\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            conditions: [],\n                                                            error: \"A valid partition could not be determined\",\n                                                            type: \"error\",\n                                                        },\n                                                    ],\n                                                },\n                                                {\n                                                    conditions: [\n                                                        {\n                                                            fn: \"aws.parseArn\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"Bucket\",\n                                                                },\n                                                            ],\n                                                            assign: \"bucketArn\",\n                                                        },\n                                                    ],\n                                                    type: \"tree\",\n                                                    rules: [\n                                                        {\n                                                            conditions: [\n                                                                {\n                                                                    fn: \"getAttr\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"bucketArn\",\n                                                                        },\n                                                                        \"resourceId[0]\",\n                                                                    ],\n                                                                    assign: \"arnType\",\n                                                                },\n                                                                {\n                                                                    fn: \"not\",\n                                                                    argv: [\n                                                                        {\n                                                                            fn: \"stringEquals\",\n                                                                            argv: [\n                                                                                {\n                                                                                    ref: \"arnType\",\n                                                                                },\n                                                                                \"\",\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"stringEquals\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            fn: \"getAttr\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"bucketArn\",\n                                                                                                },\n                                                                                                \"service\",\n                                                                                            ],\n                                                                                        },\n                                                                                        \"s3-object-lambda\",\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"arnType\",\n                                                                                                },\n                                                                                                \"accesspoint\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            type: \"tree\",\n                                                                                            rules: [\n                                                                                                {\n                                                                                                    conditions: [\n                                                                                                        {\n                                                                                                            fn: \"getAttr\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"bucketArn\",\n                                                                                                                },\n                                                                                                                \"resourceId[1]\",\n                                                                                                            ],\n                                                                                                            assign: \"accessPointName\",\n                                                                                                        },\n                                                                                                        {\n                                                                                                            fn: \"not\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    fn: \"stringEquals\",\n                                                                                                                    argv: [\n                                                                                                                        {\n                                                                                                                            ref: \"accessPointName\",\n                                                                                                                        },\n                                                                                                                        \"\",\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                    type: \"tree\",\n                                                                                                    rules: [\n                                                                                                        {\n                                                                                                            conditions: [],\n                                                                                                            type: \"tree\",\n                                                                                                            rules: [\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    error: \"S3 Object Lambda does not support Dual-stack\",\n                                                                                                                    type: \"error\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [\n                                                                                                                                {\n                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                        },\n                                                                                                                                        true,\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            error: \"S3 Object Lambda does not support S3 Accelerate\",\n                                                                                                                            type: \"error\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            type: \"tree\",\n                                                                                                                            rules: [\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"not\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                                                },\n                                                                                                                                                                \"region\",\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        \"\",\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    type: \"tree\",\n                                                                                                                                    rules: [\n                                                                                                                                        {\n                                                                                                                                            conditions: [],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"DisableAccessPoints\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"DisableAccessPoints\",\n                                                                                                                                                                },\n                                                                                                                                                                true,\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    error: \"Access points are not supported for this operation\",\n                                                                                                                                                    type: \"error\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    type: \"tree\",\n                                                                                                                                                    rules: [\n                                                                                                                                                        {\n                                                                                                                                                            conditions: [\n                                                                                                                                                                {\n                                                                                                                                                                    fn: \"not\",\n                                                                                                                                                                    argv: [\n                                                                                                                                                                        {\n                                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                                            argv: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                    argv: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                        \"resourceId[2]\",\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                            type: \"tree\",\n                                                                                                                                                            rules: [\n                                                                                                                                                                {\n                                                                                                                                                                    conditions: [],\n                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                    rules: [\n                                                                                                                                                                        {\n                                                                                                                                                                            conditions: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                                                    argv: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            ref: \"UseArnRegion\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                                {\n                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                    argv: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            ref: \"UseArnRegion\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                        false,\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                                {\n                                                                                                                                                                                    fn: \"not\",\n                                                                                                                                                                                    argv: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                        \"region\",\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                },\n                                                                                                                                                                                                \"{Region}\",\n                                                                                                                                                                                            ],\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                            error: \"Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`\",\n                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                        },\n                                                                                                                                                                        {\n                                                                                                                                                                            conditions: [],\n                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                            rules: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            fn: \"aws.partition\",\n                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                        \"region\",\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                },\n                                                                                                                                                                                            ],\n                                                                                                                                                                                            assign: \"bucketPartition\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                    rules: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            fn: \"aws.partition\",\n                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                            ],\n                                                                                                                                                                                                            assign: \"partitionResult\",\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            ref: \"bucketPartition\",\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                        \"name\",\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            ref: \"partitionResult\",\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                        \"name\",\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            fn: \"isValidHostLabel\",\n                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                        \"region\",\n                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                true,\n                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                        \"accountId\",\n                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                \"\",\n                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                    error: \"Invalid ARN: Missing account id\",\n                                                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    fn: \"isValidHostLabel\",\n                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                \"accountId\",\n                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    fn: \"isValidHostLabel\",\n                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            ref: \"accessPointName\",\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        true,\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    ref: \"bucketPartition\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                \"name\",\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        \"aws-cn\",\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                            error: \"Partition does not support FIPS\",\n                                                                                                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            fn: \"parseURL\",\n                                                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                            assign: \"url\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                    endpoint: {\n                                                                                                                                                                                                                                                                                                        url: \"{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}\",\n                                                                                                                                                                                                                                                                                                        properties: {\n                                                                                                                                                                                                                                                                                                            authSchemes: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                                    signingName: \"s3-object-lambda\",\n                                                                                                                                                                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                                    signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        headers: {},\n                                                                                                                                                                                                                                                                                                    },\n                                                                                                                                                                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    ref: \"UseFIPS\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                true,\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                    endpoint: {\n                                                                                                                                                                                                                                                                                                        url: \"https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}\",\n                                                                                                                                                                                                                                                                                                        properties: {\n                                                                                                                                                                                                                                                                                                            authSchemes: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                                    signingName: \"s3-object-lambda\",\n                                                                                                                                                                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                                    signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        headers: {},\n                                                                                                                                                                                                                                                                                                    },\n                                                                                                                                                                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                                                                    endpoint: {\n                                                                                                                                                                                                                                                                                                        url: \"https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}\",\n                                                                                                                                                                                                                                                                                                        properties: {\n                                                                                                                                                                                                                                                                                                            authSchemes: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                                    signingName: \"s3-object-lambda\",\n                                                                                                                                                                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                                    signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        headers: {},\n                                                                                                                                                                                                                                                                                                    },\n                                                                                                                                                                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                                            error: \"Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`\",\n                                                                                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                            error: \"Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`\",\n                                                                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                    error: \"Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)\",\n                                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                    error: \"Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`\",\n                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                            ],\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                },\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                    error: \"A valid partition could not be determined\",\n                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                },\n                                                                                                                                                                                            ],\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                                {\n                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                    error: \"Could not load partition for ARN region `{bucketArn#region}`\",\n                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        {\n                                                                                                                                                            conditions: [],\n                                                                                                                                                            error: \"Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.\",\n                                                                                                                                                            type: \"error\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [],\n                                                                                                                                    error: \"Invalid ARN: bucket ARN is missing a region\",\n                                                                                                                                    type: \"error\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                {\n                                                                                                    conditions: [],\n                                                                                                    error: \"Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided\",\n                                                                                                    type: \"error\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [],\n                                                                                    error: \"Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`\",\n                                                                                    type: \"error\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"stringEquals\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"arnType\",\n                                                                                        },\n                                                                                        \"accesspoint\",\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"getAttr\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"bucketArn\",\n                                                                                                },\n                                                                                                \"resourceId[1]\",\n                                                                                            ],\n                                                                                            assign: \"accessPointName\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"accessPointName\",\n                                                                                                        },\n                                                                                                        \"\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            type: \"tree\",\n                                                                                            rules: [\n                                                                                                {\n                                                                                                    conditions: [\n                                                                                                        {\n                                                                                                            fn: \"not\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    fn: \"stringEquals\",\n                                                                                                                    argv: [\n                                                                                                                        {\n                                                                                                                            fn: \"getAttr\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                },\n                                                                                                                                \"region\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        \"\",\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                    type: \"tree\",\n                                                                                                    rules: [\n                                                                                                        {\n                                                                                                            conditions: [\n                                                                                                                {\n                                                                                                                    fn: \"stringEquals\",\n                                                                                                                    argv: [\n                                                                                                                        {\n                                                                                                                            ref: \"arnType\",\n                                                                                                                        },\n                                                                                                                        \"accesspoint\",\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                            type: \"tree\",\n                                                                                                            rules: [\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                                },\n                                                                                                                                                \"region\",\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        \"\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            type: \"tree\",\n                                                                                                                            rules: [\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"isSet\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"DisableAccessPoints\",\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"DisableAccessPoints\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    error: \"Access points are not supported for this operation\",\n                                                                                                                                    type: \"error\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [],\n                                                                                                                                    type: \"tree\",\n                                                                                                                                    rules: [\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"not\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                    argv: [\n                                                                                                                                                                        {\n                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                        },\n                                                                                                                                                                        \"resourceId[2]\",\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    type: \"tree\",\n                                                                                                                                                    rules: [\n                                                                                                                                                        {\n                                                                                                                                                            conditions: [\n                                                                                                                                                                {\n                                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                                    argv: [\n                                                                                                                                                                        {\n                                                                                                                                                                            ref: \"UseArnRegion\",\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                                {\n                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                    argv: [\n                                                                                                                                                                        {\n                                                                                                                                                                            ref: \"UseArnRegion\",\n                                                                                                                                                                        },\n                                                                                                                                                                        false,\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                                {\n                                                                                                                                                                    fn: \"not\",\n                                                                                                                                                                    argv: [\n                                                                                                                                                                        {\n                                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                                            argv: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                    argv: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                        \"region\",\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                                \"{Region}\",\n                                                                                                                                                                            ],\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                            error: \"Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`\",\n                                                                                                                                                            type: \"error\",\n                                                                                                                                                        },\n                                                                                                                                                        {\n                                                                                                                                                            conditions: [],\n                                                                                                                                                            type: \"tree\",\n                                                                                                                                                            rules: [\n                                                                                                                                                                {\n                                                                                                                                                                    conditions: [\n                                                                                                                                                                        {\n                                                                                                                                                                            fn: \"aws.partition\",\n                                                                                                                                                                            argv: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                    argv: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                        \"region\",\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                            assign: \"bucketPartition\",\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                    rules: [\n                                                                                                                                                                        {\n                                                                                                                                                                            conditions: [],\n                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                            rules: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            fn: \"aws.partition\",\n                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    ref: \"Region\",\n                                                                                                                                                                                                },\n                                                                                                                                                                                            ],\n                                                                                                                                                                                            assign: \"partitionResult\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                    rules: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                            ref: \"bucketPartition\",\n                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                        \"name\",\n                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                                \"{partitionResult#name}\",\n                                                                                                                                                                                                            ],\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                            fn: \"isValidHostLabel\",\n                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                        \"region\",\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                true,\n                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            fn: \"stringEquals\",\n                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                        \"service\",\n                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                \"s3\",\n                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            fn: \"isValidHostLabel\",\n                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                        \"accountId\",\n                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                false,\n                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            fn: \"isValidHostLabel\",\n                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    ref: \"accessPointName\",\n                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                false,\n                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    ref: \"Accelerate\",\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                true,\n                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                    error: \"Access Points do not support S3 Accelerate\",\n                                                                                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        true,\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    ref: \"bucketPartition\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                \"name\",\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        \"aws-cn\",\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                            error: \"Partition does not support FIPS\",\n                                                                                                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    conditions: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                true,\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                    error: \"DualStack cannot be combined with a Host override (PrivateLink)\",\n                                                                                                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        true,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        true,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                            endpoint: {\n                                                                                                                                                                                                                                                                                                                url: \"https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}\",\n                                                                                                                                                                                                                                                                                                                properties: {\n                                                                                                                                                                                                                                                                                                                    authSchemes: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                                            signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                headers: {},\n                                                                                                                                                                                                                                                                                                            },\n                                                                                                                                                                                                                                                                                                            type: \"endpoint\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        true,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                            endpoint: {\n                                                                                                                                                                                                                                                                                                                url: \"https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}\",\n                                                                                                                                                                                                                                                                                                                properties: {\n                                                                                                                                                                                                                                                                                                                    authSchemes: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                                            signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                headers: {},\n                                                                                                                                                                                                                                                                                                            },\n                                                                                                                                                                                                                                                                                                            type: \"endpoint\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        true,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                            endpoint: {\n                                                                                                                                                                                                                                                                                                                url: \"https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}\",\n                                                                                                                                                                                                                                                                                                                properties: {\n                                                                                                                                                                                                                                                                                                                    authSchemes: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                                            signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                headers: {},\n                                                                                                                                                                                                                                                                                                            },\n                                                                                                                                                                                                                                                                                                            type: \"endpoint\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                    assign: \"url\",\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                            endpoint: {\n                                                                                                                                                                                                                                                                                                                url: \"{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}\",\n                                                                                                                                                                                                                                                                                                                properties: {\n                                                                                                                                                                                                                                                                                                                    authSchemes: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                                            signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                headers: {},\n                                                                                                                                                                                                                                                                                                            },\n                                                                                                                                                                                                                                                                                                            type: \"endpoint\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseFIPS\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                                            endpoint: {\n                                                                                                                                                                                                                                                                                                                url: \"https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}\",\n                                                                                                                                                                                                                                                                                                                properties: {\n                                                                                                                                                                                                                                                                                                                    authSchemes: [\n                                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                                            signingName: \"s3\",\n                                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                                            signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                                headers: {},\n                                                                                                                                                                                                                                                                                                            },\n                                                                                                                                                                                                                                                                                                            type: \"endpoint\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                                    error: \"Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`\",\n                                                                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                    error: \"Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`\",\n                                                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                    error: \"Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}\",\n                                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                    error: \"Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)\",\n                                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                            ],\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                },\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                    error: \"Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`\",\n                                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                                },\n                                                                                                                                                                                            ],\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                                {\n                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                    error: \"A valid partition could not be determined\",\n                                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                                {\n                                                                                                                                                                    conditions: [],\n                                                                                                                                                                    error: \"Could not load partition for ARN region `{bucketArn#region}`\",\n                                                                                                                                                                    type: \"error\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [],\n                                                                                                                                            error: \"Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.\",\n                                                                                                                                            type: \"error\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [],\n                                                                                                                    error: \"Invalid ARN: bucket ARN is missing a region\",\n                                                                                                                    type: \"error\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                {\n                                                                                                    conditions: [],\n                                                                                                    type: \"tree\",\n                                                                                                    rules: [\n                                                                                                        {\n                                                                                                            conditions: [\n                                                                                                                {\n                                                                                                                    fn: \"isValidHostLabel\",\n                                                                                                                    argv: [\n                                                                                                                        {\n                                                                                                                            ref: \"accessPointName\",\n                                                                                                                        },\n                                                                                                                        true,\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                            type: \"tree\",\n                                                                                                            rules: [\n                                                                                                                {\n                                                                                                                    conditions: [],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [\n                                                                                                                                {\n                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"UseDualStack\",\n                                                                                                                                        },\n                                                                                                                                        true,\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            error: \"S3 MRAP does not support dual-stack\",\n                                                                                                                            type: \"error\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            type: \"tree\",\n                                                                                                                            rules: [\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"UseFIPS\",\n                                                                                                                                                },\n                                                                                                                                                true,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    error: \"S3 MRAP does not support FIPS\",\n                                                                                                                                    type: \"error\",\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [],\n                                                                                                                                    type: \"tree\",\n                                                                                                                                    rules: [\n                                                                                                                                        {\n                                                                                                                                            conditions: [\n                                                                                                                                                {\n                                                                                                                                                    fn: \"booleanEquals\",\n                                                                                                                                                    argv: [\n                                                                                                                                                        {\n                                                                                                                                                            ref: \"Accelerate\",\n                                                                                                                                                        },\n                                                                                                                                                        true,\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                            error: \"S3 MRAP does not support S3 Accelerate\",\n                                                                                                                                            type: \"error\",\n                                                                                                                                        },\n                                                                                                                                        {\n                                                                                                                                            conditions: [],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"DisableMultiRegionAccessPoints\",\n                                                                                                                                                                },\n                                                                                                                                                                true,\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    error: \"Invalid configuration: Multi-Region Access Point ARNs are disabled.\",\n                                                                                                                                                    type: \"error\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    type: \"tree\",\n                                                                                                                                                    rules: [\n                                                                                                                                                        {\n                                                                                                                                                            conditions: [\n                                                                                                                                                                {\n                                                                                                                                                                    fn: \"aws.partition\",\n                                                                                                                                                                    argv: [\n                                                                                                                                                                        {\n                                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                    assign: \"mrapPartition\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                            type: \"tree\",\n                                                                                                                                                            rules: [\n                                                                                                                                                                {\n                                                                                                                                                                    conditions: [],\n                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                    rules: [\n                                                                                                                                                                        {\n                                                                                                                                                                            conditions: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                                                    argv: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    ref: \"mrapPartition\",\n                                                                                                                                                                                                },\n                                                                                                                                                                                                \"name\",\n                                                                                                                                                                                            ],\n                                                                                                                                                                                        },\n                                                                                                                                                                                        {\n                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                                                                                },\n                                                                                                                                                                                                \"partition\",\n                                                                                                                                                                                            ],\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                            rules: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                    endpoint: {\n                                                                                                                                                                                        url: \"https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}\",\n                                                                                                                                                                                        properties: {\n                                                                                                                                                                                            authSchemes: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    name: \"sigv4a\",\n                                                                                                                                                                                                    signingName: \"s3\",\n                                                                                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                                                                                    signingRegionSet: [\n                                                                                                                                                                                                        \"*\",\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                },\n                                                                                                                                                                                            ],\n                                                                                                                                                                                        },\n                                                                                                                                                                                        headers: {},\n                                                                                                                                                                                    },\n                                                                                                                                                                                    type: \"endpoint\",\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                        },\n                                                                                                                                                                        {\n                                                                                                                                                                            conditions: [],\n                                                                                                                                                                            error: \"Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`\",\n                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        {\n                                                                                                                                                            conditions: [],\n                                                                                                                                                            error: \"{Region} was not a valid region\",\n                                                                                                                                                            type: \"error\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                        {\n                                                                                                            conditions: [],\n                                                                                                            error: \"Invalid Access Point Name\",\n                                                                                                            type: \"error\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [],\n                                                                                    error: \"Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided\",\n                                                                                    type: \"error\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"stringEquals\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            fn: \"getAttr\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"bucketArn\",\n                                                                                                },\n                                                                                                \"service\",\n                                                                                            ],\n                                                                                        },\n                                                                                        \"s3-outposts\",\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    error: \"S3 Outposts does not support Dual-stack\",\n                                                                                    type: \"error\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [\n                                                                                                {\n                                                                                                    fn: \"booleanEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"UseFIPS\",\n                                                                                                        },\n                                                                                                        true,\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                            error: \"S3 Outposts does not support FIPS\",\n                                                                                            type: \"error\",\n                                                                                        },\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            type: \"tree\",\n                                                                                            rules: [\n                                                                                                {\n                                                                                                    conditions: [\n                                                                                                        {\n                                                                                                            fn: \"booleanEquals\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"Accelerate\",\n                                                                                                                },\n                                                                                                                true,\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                    error: \"S3 Outposts does not support S3 Accelerate\",\n                                                                                                    type: \"error\",\n                                                                                                },\n                                                                                                {\n                                                                                                    conditions: [],\n                                                                                                    type: \"tree\",\n                                                                                                    rules: [\n                                                                                                        {\n                                                                                                            conditions: [\n                                                                                                                {\n                                                                                                                    fn: \"isSet\",\n                                                                                                                    argv: [\n                                                                                                                        {\n                                                                                                                            fn: \"getAttr\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                },\n                                                                                                                                \"resourceId[4]\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                            ],\n                                                                                                            error: \"Invalid Arn: Outpost Access Point ARN contains sub resources\",\n                                                                                                            type: \"error\",\n                                                                                                        },\n                                                                                                        {\n                                                                                                            conditions: [],\n                                                                                                            type: \"tree\",\n                                                                                                            rules: [\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"getAttr\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                },\n                                                                                                                                \"resourceId[1]\",\n                                                                                                                            ],\n                                                                                                                            assign: \"outpostId\",\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            type: \"tree\",\n                                                                                                                            rules: [\n                                                                                                                                {\n                                                                                                                                    conditions: [\n                                                                                                                                        {\n                                                                                                                                            fn: \"isValidHostLabel\",\n                                                                                                                                            argv: [\n                                                                                                                                                {\n                                                                                                                                                    ref: \"outpostId\",\n                                                                                                                                                },\n                                                                                                                                                false,\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                    type: \"tree\",\n                                                                                                                                    rules: [\n                                                                                                                                        {\n                                                                                                                                            conditions: [],\n                                                                                                                                            type: \"tree\",\n                                                                                                                                            rules: [\n                                                                                                                                                {\n                                                                                                                                                    conditions: [\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"isSet\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"UseArnRegion\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    ref: \"UseArnRegion\",\n                                                                                                                                                                },\n                                                                                                                                                                false,\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        {\n                                                                                                                                                            fn: \"not\",\n                                                                                                                                                            argv: [\n                                                                                                                                                                {\n                                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                                    argv: [\n                                                                                                                                                                        {\n                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                            argv: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                                                                },\n                                                                                                                                                                                \"region\",\n                                                                                                                                                                            ],\n                                                                                                                                                                        },\n                                                                                                                                                                        \"{Region}\",\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                    error: \"Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`\",\n                                                                                                                                                    type: \"error\",\n                                                                                                                                                },\n                                                                                                                                                {\n                                                                                                                                                    conditions: [],\n                                                                                                                                                    type: \"tree\",\n                                                                                                                                                    rules: [\n                                                                                                                                                        {\n                                                                                                                                                            conditions: [\n                                                                                                                                                                {\n                                                                                                                                                                    fn: \"aws.partition\",\n                                                                                                                                                                    argv: [\n                                                                                                                                                                        {\n                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                            argv: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                                                                },\n                                                                                                                                                                                \"region\",\n                                                                                                                                                                            ],\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                    assign: \"bucketPartition\",\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                            type: \"tree\",\n                                                                                                                                                            rules: [\n                                                                                                                                                                {\n                                                                                                                                                                    conditions: [],\n                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                    rules: [\n                                                                                                                                                                        {\n                                                                                                                                                                            conditions: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    fn: \"aws.partition\",\n                                                                                                                                                                                    argv: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            ref: \"Region\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                    assign: \"partitionResult\",\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                            rules: [\n                                                                                                                                                                                {\n                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                    rules: [\n                                                                                                                                                                                        {\n                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    ref: \"bucketPartition\",\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                                \"name\",\n                                                                                                                                                                                                            ],\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    ref: \"partitionResult\",\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                                \"name\",\n                                                                                                                                                                                                            ],\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                },\n                                                                                                                                                                                            ],\n                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                {\n                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    fn: \"isValidHostLabel\",\n                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                \"region\",\n                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                        true,\n                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                            ],\n                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                {\n                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    fn: \"isValidHostLabel\",\n                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            fn: \"getAttr\",\n                                                                                                                                                                                                                                            argv: [\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    ref: \"bucketArn\",\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                \"accountId\",\n                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                        false,\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                        \"resourceId[2]\",\n                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                    assign: \"outpostType\",\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    fn: \"getAttr\",\n                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            ref: \"bucketArn\",\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                        \"resourceId[3]\",\n                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                    assign: \"accessPointName\",\n                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            ref: \"outpostType\",\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                        \"accesspoint\",\n                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                            type: \"tree\",\n                                                                                                                                                                                                                                                                            rules: [\n                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                    conditions: [],\n                                                                                                                                                                                                                                                                                    type: \"tree\",\n                                                                                                                                                                                                                                                                                    rules: [\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            conditions: [\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    fn: \"isSet\",\n                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                {\n                                                                                                                                                                                                                                                                                                    fn: \"parseURL\",\n                                                                                                                                                                                                                                                                                                    argv: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                    assign: \"url\",\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                                            endpoint: {\n                                                                                                                                                                                                                                                                                                url: \"https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}\",\n                                                                                                                                                                                                                                                                                                properties: {\n                                                                                                                                                                                                                                                                                                    authSchemes: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                            signingName: \"s3-outposts\",\n                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                            signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                headers: {},\n                                                                                                                                                                                                                                                                                            },\n                                                                                                                                                                                                                                                                                            type: \"endpoint\",\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                                                            endpoint: {\n                                                                                                                                                                                                                                                                                                url: \"https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}\",\n                                                                                                                                                                                                                                                                                                properties: {\n                                                                                                                                                                                                                                                                                                    authSchemes: [\n                                                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                                                            name: \"sigv4\",\n                                                                                                                                                                                                                                                                                                            signingName: \"s3-outposts\",\n                                                                                                                                                                                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                                                                                                                                                                                            signingRegion: \"{bucketArn#region}\",\n                                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                                                headers: {},\n                                                                                                                                                                                                                                                                                            },\n                                                                                                                                                                                                                                                                                            type: \"endpoint\",\n                                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                                            error: \"Expected an outpost type `accesspoint`, found {outpostType}\",\n                                                                                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                                            error: \"Invalid ARN: expected an access point name\",\n                                                                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                                            error: \"Invalid ARN: Expected a 4-component resource\",\n                                                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                                },\n                                                                                                                                                                                                                            ],\n                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                        {\n                                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                                            error: \"Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`\",\n                                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                                        },\n                                                                                                                                                                                                                    ],\n                                                                                                                                                                                                                },\n                                                                                                                                                                                                            ],\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                        {\n                                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                                            error: \"Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)\",\n                                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                                        },\n                                                                                                                                                                                                    ],\n                                                                                                                                                                                                },\n                                                                                                                                                                                            ],\n                                                                                                                                                                                        },\n                                                                                                                                                                                        {\n                                                                                                                                                                                            conditions: [],\n                                                                                                                                                                                            error: \"Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`\",\n                                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                                        },\n                                                                                                                                                                                    ],\n                                                                                                                                                                                },\n                                                                                                                                                                            ],\n                                                                                                                                                                        },\n                                                                                                                                                                        {\n                                                                                                                                                                            conditions: [],\n                                                                                                                                                                            error: \"A valid partition could not be determined\",\n                                                                                                                                                                            type: \"error\",\n                                                                                                                                                                        },\n                                                                                                                                                                    ],\n                                                                                                                                                                },\n                                                                                                                                                            ],\n                                                                                                                                                        },\n                                                                                                                                                        {\n                                                                                                                                                            conditions: [],\n                                                                                                                                                            error: \"Could not load partition for ARN region {bucketArn#region}\",\n                                                                                                                                                            type: \"error\",\n                                                                                                                                                        },\n                                                                                                                                                    ],\n                                                                                                                                                },\n                                                                                                                                            ],\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                {\n                                                                                                                                    conditions: [],\n                                                                                                                                    error: \"Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`\",\n                                                                                                                                    type: \"error\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [],\n                                                                                                                    error: \"Invalid ARN: The Outpost Id was not set\",\n                                                                                                                    type: \"error\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                        {\n                                                                            conditions: [],\n                                                                            error: \"Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})\",\n                                                                            type: \"error\",\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            conditions: [],\n                                                            error: \"Invalid ARN: No ARN type specified\",\n                                                            type: \"error\",\n                                                        },\n                                                    ],\n                                                },\n                                                {\n                                                    conditions: [\n                                                        {\n                                                            fn: \"substring\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"Bucket\",\n                                                                },\n                                                                0,\n                                                                4,\n                                                                false,\n                                                            ],\n                                                            assign: \"arnPrefix\",\n                                                        },\n                                                        {\n                                                            fn: \"stringEquals\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"arnPrefix\",\n                                                                },\n                                                                \"arn:\",\n                                                            ],\n                                                        },\n                                                        {\n                                                            fn: \"not\",\n                                                            argv: [\n                                                                {\n                                                                    fn: \"isSet\",\n                                                                    argv: [\n                                                                        {\n                                                                            fn: \"aws.parseArn\",\n                                                                            argv: [\n                                                                                {\n                                                                                    ref: \"Bucket\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                        },\n                                                    ],\n                                                    error: \"Invalid ARN: `{Bucket}` was not a valid ARN\",\n                                                    type: \"error\",\n                                                },\n                                                {\n                                                    conditions: [\n                                                        {\n                                                            fn: \"uriEncode\",\n                                                            argv: [\n                                                                {\n                                                                    ref: \"Bucket\",\n                                                                },\n                                                            ],\n                                                            assign: \"uri_encoded_bucket\",\n                                                        },\n                                                    ],\n                                                    type: \"tree\",\n                                                    rules: [\n                                                        {\n                                                            conditions: [\n                                                                {\n                                                                    fn: \"booleanEquals\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"UseDualStack\",\n                                                                        },\n                                                                        true,\n                                                                    ],\n                                                                },\n                                                                {\n                                                                    fn: \"isSet\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"Endpoint\",\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                            error: \"Cannot set dual-stack in combination with a custom endpoint.\",\n                                                            type: \"error\",\n                                                        },\n                                                        {\n                                                            conditions: [],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [\n                                                                        {\n                                                                            fn: \"aws.partition\",\n                                                                            argv: [\n                                                                                {\n                                                                                    ref: \"Region\",\n                                                                                },\n                                                                            ],\n                                                                            assign: \"partitionResult\",\n                                                                        },\n                                                                    ],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Accelerate\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            type: \"tree\",\n                                                                                            rules: [\n                                                                                                {\n                                                                                                    conditions: [\n                                                                                                        {\n                                                                                                            fn: \"booleanEquals\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"UseFIPS\",\n                                                                                                                },\n                                                                                                                false,\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                    type: \"tree\",\n                                                                                                    rules: [\n                                                                                                        {\n                                                                                                            conditions: [],\n                                                                                                            type: \"tree\",\n                                                                                                            rules: [\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"stringEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Region\",\n                                                                                                                                },\n                                                                                                                                \"aws-global\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"stringEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Region\",\n                                                                                                                                },\n                                                                                                                                \"aws-global\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Region\",\n                                                                                                                                        },\n                                                                                                                                        \"aws-global\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            endpoint: {\n                                                                                                                                url: \"https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                properties: {\n                                                                                                                                    authSchemes: [\n                                                                                                                                        {\n                                                                                                                                            name: \"sigv4\",\n                                                                                                                                            signingName: \"s3\",\n                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                headers: {},\n                                                                                                                            },\n                                                                                                                            type: \"endpoint\",\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Region\",\n                                                                                                                                        },\n                                                                                                                                        \"aws-global\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"isSet\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"parseURL\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            assign: \"url\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"stringEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Region\",\n                                                                                                                                },\n                                                                                                                                \"aws-global\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"isSet\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"parseURL\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            assign: \"url\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"stringEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Region\",\n                                                                                                                                },\n                                                                                                                                \"aws-global\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"isSet\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"parseURL\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            assign: \"url\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Region\",\n                                                                                                                                        },\n                                                                                                                                        \"aws-global\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Region\",\n                                                                                                                                        },\n                                                                                                                                        \"us-east-1\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            endpoint: {\n                                                                                                                                url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                                properties: {\n                                                                                                                                    authSchemes: [\n                                                                                                                                        {\n                                                                                                                                            name: \"sigv4\",\n                                                                                                                                            signingName: \"s3\",\n                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                headers: {},\n                                                                                                                            },\n                                                                                                                            type: \"endpoint\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            endpoint: {\n                                                                                                                                url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                                properties: {\n                                                                                                                                    authSchemes: [\n                                                                                                                                        {\n                                                                                                                                            name: \"sigv4\",\n                                                                                                                                            signingName: \"s3\",\n                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                headers: {},\n                                                                                                                            },\n                                                                                                                            type: \"endpoint\",\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"isSet\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"parseURL\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Endpoint\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            assign: \"url\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Region\",\n                                                                                                                                        },\n                                                                                                                                        \"aws-global\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"stringEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Region\",\n                                                                                                                                },\n                                                                                                                                \"aws-global\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"stringEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"Region\",\n                                                                                                                                },\n                                                                                                                                \"aws-global\",\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Region\",\n                                                                                                                                        },\n                                                                                                                                        \"aws-global\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                },\n                                                                                                                                true,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    type: \"tree\",\n                                                                                                                    rules: [\n                                                                                                                        {\n                                                                                                                            conditions: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Region\",\n                                                                                                                                        },\n                                                                                                                                        \"us-east-1\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                            endpoint: {\n                                                                                                                                url: \"https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                properties: {\n                                                                                                                                    authSchemes: [\n                                                                                                                                        {\n                                                                                                                                            name: \"sigv4\",\n                                                                                                                                            signingName: \"s3\",\n                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                headers: {},\n                                                                                                                            },\n                                                                                                                            type: \"endpoint\",\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            conditions: [],\n                                                                                                                            endpoint: {\n                                                                                                                                url: \"https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                                properties: {\n                                                                                                                                    authSchemes: [\n                                                                                                                                        {\n                                                                                                                                            name: \"sigv4\",\n                                                                                                                                            signingName: \"s3\",\n                                                                                                                                            disableDoubleEncoding: true,\n                                                                                                                                            signingRegion: \"{Region}\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                                headers: {},\n                                                                                                                            },\n                                                                                                                            type: \"endpoint\",\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                },\n                                                                                                                {\n                                                                                                                    conditions: [\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseDualStack\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"isSet\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Endpoint\",\n                                                                                                                                        },\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"not\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    fn: \"stringEquals\",\n                                                                                                                                    argv: [\n                                                                                                                                        {\n                                                                                                                                            ref: \"Region\",\n                                                                                                                                        },\n                                                                                                                                        \"aws-global\",\n                                                                                                                                    ],\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        {\n                                                                                                                            fn: \"booleanEquals\",\n                                                                                                                            argv: [\n                                                                                                                                {\n                                                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                                                },\n                                                                                                                                false,\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                    endpoint: {\n                                                                                                                        url: \"https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}\",\n                                                                                                                        properties: {\n                                                                                                                            authSchemes: [\n                                                                                                                                {\n                                                                                                                                    name: \"sigv4\",\n                                                                                                                                    signingName: \"s3\",\n                                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                                },\n                                                                                                                            ],\n                                                                                                                        },\n                                                                                                                        headers: {},\n                                                                                                                    },\n                                                                                                                    type: \"endpoint\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                {\n                                                                                                    conditions: [],\n                                                                                                    error: \"Path-style addressing cannot be used with FIPS\",\n                                                                                                    type: \"error\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [],\n                                                                                    error: \"Path-style addressing cannot be used with S3 Accelerate\",\n                                                                                    type: \"error\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                },\n                                                                {\n                                                                    conditions: [],\n                                                                    error: \"A valid partition could not be determined\",\n                                                                    type: \"error\",\n                                                                },\n                                                            ],\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                        },\n                                    ],\n                                },\n                                {\n                                    conditions: [\n                                        {\n                                            fn: \"isSet\",\n                                            argv: [\n                                                {\n                                                    ref: \"UseObjectLambdaEndpoint\",\n                                                },\n                                            ],\n                                        },\n                                        {\n                                            fn: \"booleanEquals\",\n                                            argv: [\n                                                {\n                                                    ref: \"UseObjectLambdaEndpoint\",\n                                                },\n                                                true,\n                                            ],\n                                        },\n                                    ],\n                                    type: \"tree\",\n                                    rules: [\n                                        {\n                                            conditions: [\n                                                {\n                                                    fn: \"aws.partition\",\n                                                    argv: [\n                                                        {\n                                                            ref: \"Region\",\n                                                        },\n                                                    ],\n                                                    assign: \"partitionResult\",\n                                                },\n                                            ],\n                                            type: \"tree\",\n                                            rules: [\n                                                {\n                                                    conditions: [],\n                                                    type: \"tree\",\n                                                    rules: [\n                                                        {\n                                                            conditions: [\n                                                                {\n                                                                    fn: \"isValidHostLabel\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"Region\",\n                                                                        },\n                                                                        true,\n                                                                    ],\n                                                                },\n                                                            ],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"booleanEquals\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"UseDualStack\",\n                                                                                        },\n                                                                                        true,\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            error: \"S3 Object Lambda does not support Dual-stack\",\n                                                                            type: \"error\",\n                                                                        },\n                                                                        {\n                                                                            conditions: [],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Accelerate\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    error: \"S3 Object Lambda does not support S3 Accelerate\",\n                                                                                    type: \"error\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [\n                                                                                                {\n                                                                                                    fn: \"booleanEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"UseFIPS\",\n                                                                                                        },\n                                                                                                        true,\n                                                                                                    ],\n                                                                                                },\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            fn: \"getAttr\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"partitionResult\",\n                                                                                                                },\n                                                                                                                \"name\",\n                                                                                                            ],\n                                                                                                        },\n                                                                                                        \"aws-cn\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                            error: \"Partition does not support FIPS\",\n                                                                                            type: \"error\",\n                                                                                        },\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            type: \"tree\",\n                                                                                            rules: [\n                                                                                                {\n                                                                                                    conditions: [\n                                                                                                        {\n                                                                                                            fn: \"isSet\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"Endpoint\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                        {\n                                                                                                            fn: \"parseURL\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"Endpoint\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                            assign: \"url\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                    endpoint: {\n                                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                                        properties: {\n                                                                                                            authSchemes: [\n                                                                                                                {\n                                                                                                                    name: \"sigv4\",\n                                                                                                                    signingName: \"s3-object-lambda\",\n                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                        headers: {},\n                                                                                                    },\n                                                                                                    type: \"endpoint\",\n                                                                                                },\n                                                                                                {\n                                                                                                    conditions: [\n                                                                                                        {\n                                                                                                            fn: \"booleanEquals\",\n                                                                                                            argv: [\n                                                                                                                {\n                                                                                                                    ref: \"UseFIPS\",\n                                                                                                                },\n                                                                                                                true,\n                                                                                                            ],\n                                                                                                        },\n                                                                                                    ],\n                                                                                                    endpoint: {\n                                                                                                        url: \"https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                        properties: {\n                                                                                                            authSchemes: [\n                                                                                                                {\n                                                                                                                    name: \"sigv4\",\n                                                                                                                    signingName: \"s3-object-lambda\",\n                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                        headers: {},\n                                                                                                    },\n                                                                                                    type: \"endpoint\",\n                                                                                                },\n                                                                                                {\n                                                                                                    conditions: [],\n                                                                                                    endpoint: {\n                                                                                                        url: \"https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                        properties: {\n                                                                                                            authSchemes: [\n                                                                                                                {\n                                                                                                                    name: \"sigv4\",\n                                                                                                                    signingName: \"s3-object-lambda\",\n                                                                                                                    disableDoubleEncoding: true,\n                                                                                                                    signingRegion: \"{Region}\",\n                                                                                                                },\n                                                                                                            ],\n                                                                                                        },\n                                                                                                        headers: {},\n                                                                                                    },\n                                                                                                    type: \"endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            conditions: [],\n                                                            error: \"Invalid region: region was not a valid DNS name.\",\n                                                            type: \"error\",\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                        },\n                                        {\n                                            conditions: [],\n                                            error: \"A valid partition could not be determined\",\n                                            type: \"error\",\n                                        },\n                                    ],\n                                },\n                                {\n                                    conditions: [\n                                        {\n                                            fn: \"not\",\n                                            argv: [\n                                                {\n                                                    fn: \"isSet\",\n                                                    argv: [\n                                                        {\n                                                            ref: \"Bucket\",\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                        },\n                                    ],\n                                    type: \"tree\",\n                                    rules: [\n                                        {\n                                            conditions: [\n                                                {\n                                                    fn: \"aws.partition\",\n                                                    argv: [\n                                                        {\n                                                            ref: \"Region\",\n                                                        },\n                                                    ],\n                                                    assign: \"partitionResult\",\n                                                },\n                                            ],\n                                            type: \"tree\",\n                                            rules: [\n                                                {\n                                                    conditions: [],\n                                                    type: \"tree\",\n                                                    rules: [\n                                                        {\n                                                            conditions: [\n                                                                {\n                                                                    fn: \"isValidHostLabel\",\n                                                                    argv: [\n                                                                        {\n                                                                            ref: \"Region\",\n                                                                        },\n                                                                        true,\n                                                                    ],\n                                                                },\n                                                            ],\n                                                            type: \"tree\",\n                                                            rules: [\n                                                                {\n                                                                    conditions: [],\n                                                                    type: \"tree\",\n                                                                    rules: [\n                                                                        {\n                                                                            conditions: [\n                                                                                {\n                                                                                    fn: \"booleanEquals\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            ref: \"UseFIPS\",\n                                                                                        },\n                                                                                        true,\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    fn: \"stringEquals\",\n                                                                                    argv: [\n                                                                                        {\n                                                                                            fn: \"getAttr\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"partitionResult\",\n                                                                                                },\n                                                                                                \"name\",\n                                                                                            ],\n                                                                                        },\n                                                                                        \"aws-cn\",\n                                                                                    ],\n                                                                                },\n                                                                            ],\n                                                                            error: \"Partition does not support FIPS\",\n                                                                            type: \"error\",\n                                                                        },\n                                                                        {\n                                                                            conditions: [],\n                                                                            type: \"tree\",\n                                                                            rules: [\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            endpoint: {\n                                                                                                url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            endpoint: {\n                                                                                                url: \"https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            endpoint: {\n                                                                                                url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3-fips.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3-fips.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            endpoint: {\n                                                                                                url: \"https://s3-fips.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3-fips.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            endpoint: {\n                                                                                                url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            endpoint: {\n                                                                                                url: \"https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"us-east-1\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                            endpoint: {\n                                                                                                url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            endpoint: {\n                                                                                                url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"isSet\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"parseURL\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Endpoint\",\n                                                                                                },\n                                                                                            ],\n                                                                                            assign: \"url\",\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"{url#scheme}://{url#authority}{url#path}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"stringEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"Region\",\n                                                                                                },\n                                                                                                \"aws-global\",\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"us-east-1\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                true,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    type: \"tree\",\n                                                                                    rules: [\n                                                                                        {\n                                                                                            conditions: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"us-east-1\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                            endpoint: {\n                                                                                                url: \"https://s3.{partitionResult#dnsSuffix}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                        {\n                                                                                            conditions: [],\n                                                                                            endpoint: {\n                                                                                                url: \"https://s3.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                                properties: {\n                                                                                                    authSchemes: [\n                                                                                                        {\n                                                                                                            name: \"sigv4\",\n                                                                                                            signingName: \"s3\",\n                                                                                                            disableDoubleEncoding: true,\n                                                                                                            signingRegion: \"{Region}\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                                headers: {},\n                                                                                            },\n                                                                                            type: \"endpoint\",\n                                                                                        },\n                                                                                    ],\n                                                                                },\n                                                                                {\n                                                                                    conditions: [\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseFIPS\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseDualStack\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"isSet\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Endpoint\",\n                                                                                                        },\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"not\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    fn: \"stringEquals\",\n                                                                                                    argv: [\n                                                                                                        {\n                                                                                                            ref: \"Region\",\n                                                                                                        },\n                                                                                                        \"aws-global\",\n                                                                                                    ],\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        {\n                                                                                            fn: \"booleanEquals\",\n                                                                                            argv: [\n                                                                                                {\n                                                                                                    ref: \"UseGlobalEndpoint\",\n                                                                                                },\n                                                                                                false,\n                                                                                            ],\n                                                                                        },\n                                                                                    ],\n                                                                                    endpoint: {\n                                                                                        url: \"https://s3.{Region}.{partitionResult#dnsSuffix}\",\n                                                                                        properties: {\n                                                                                            authSchemes: [\n                                                                                                {\n                                                                                                    name: \"sigv4\",\n                                                                                                    signingName: \"s3\",\n                                                                                                    disableDoubleEncoding: true,\n                                                                                                    signingRegion: \"{Region}\",\n                                                                                                },\n                                                                                            ],\n                                                                                        },\n                                                                                        headers: {},\n                                                                                    },\n                                                                                    type: \"endpoint\",\n                                                                                },\n                                                                            ],\n                                                                        },\n                                                                    ],\n                                                                },\n                                                            ],\n                                                        },\n                                                        {\n                                                            conditions: [],\n                                                            error: \"Invalid region: region was not a valid DNS name.\",\n                                                            type: \"error\",\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                        },\n                                        {\n                                            conditions: [],\n                                            error: \"A valid partition could not be determined\",\n                                            type: \"error\",\n                                        },\n                                    ],\n                                },\n                            ],\n                        },\n                    ],\n                },\n                {\n                    conditions: [],\n                    error: \"A region must be set when sending requests to S3.\",\n                    type: \"error\",\n                },\n            ],\n        },\n    ],\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/endpoint/ruleset.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbortIncompleteMultipartUploadFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AbortIncompleteMultipartUploadFilterSensitiveLog),\n/* harmony export */   \"AbortMultipartUploadCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.AbortMultipartUploadCommand),\n/* harmony export */   \"AbortMultipartUploadOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AbortMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"AbortMultipartUploadRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AbortMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"AccelerateConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AccelerateConfigurationFilterSensitiveLog),\n/* harmony export */   \"AccessControlPolicyFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AccessControlPolicyFilterSensitiveLog),\n/* harmony export */   \"AccessControlTranslationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AccessControlTranslationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsAndOperatorFilterSensitiveLog),\n/* harmony export */   \"AnalyticsConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsConfigurationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsExportDestinationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsExportDestinationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsFilter\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsFilter),\n/* harmony export */   \"AnalyticsFilterFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsFilterFilterSensitiveLog),\n/* harmony export */   \"AnalyticsS3BucketDestinationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsS3BucketDestinationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsS3ExportFileFormat\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.AnalyticsS3ExportFileFormat),\n/* harmony export */   \"ArchiveStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ArchiveStatus),\n/* harmony export */   \"BucketAccelerateStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketAccelerateStatus),\n/* harmony export */   \"BucketAlreadyExists\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketAlreadyExists),\n/* harmony export */   \"BucketAlreadyOwnedByYou\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketAlreadyOwnedByYou),\n/* harmony export */   \"BucketCannedACL\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketCannedACL),\n/* harmony export */   \"BucketFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketFilterSensitiveLog),\n/* harmony export */   \"BucketLifecycleConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketLifecycleConfigurationFilterSensitiveLog),\n/* harmony export */   \"BucketLocationConstraint\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketLocationConstraint),\n/* harmony export */   \"BucketLoggingStatusFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketLoggingStatusFilterSensitiveLog),\n/* harmony export */   \"BucketLogsPermission\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketLogsPermission),\n/* harmony export */   \"BucketVersioningStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.BucketVersioningStatus),\n/* harmony export */   \"CORSConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CORSConfigurationFilterSensitiveLog),\n/* harmony export */   \"CORSRuleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CORSRuleFilterSensitiveLog),\n/* harmony export */   \"CSVInputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CSVInputFilterSensitiveLog),\n/* harmony export */   \"CSVOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CSVOutputFilterSensitiveLog),\n/* harmony export */   \"ChecksumAlgorithm\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ChecksumAlgorithm),\n/* harmony export */   \"ChecksumFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ChecksumFilterSensitiveLog),\n/* harmony export */   \"ChecksumMode\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ChecksumMode),\n/* harmony export */   \"CommonPrefixFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CommonPrefixFilterSensitiveLog),\n/* harmony export */   \"CompleteMultipartUploadCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CompleteMultipartUploadCommand),\n/* harmony export */   \"CompleteMultipartUploadOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompleteMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"CompleteMultipartUploadRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompleteMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"CompletedMultipartUploadFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompletedMultipartUploadFilterSensitiveLog),\n/* harmony export */   \"CompletedPartFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompletedPartFilterSensitiveLog),\n/* harmony export */   \"CompressionType\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CompressionType),\n/* harmony export */   \"ConditionFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ConditionFilterSensitiveLog),\n/* harmony export */   \"ContinuationEventFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ContinuationEventFilterSensitiveLog),\n/* harmony export */   \"CopyObjectCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CopyObjectCommand),\n/* harmony export */   \"CopyObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CopyObjectOutputFilterSensitiveLog),\n/* harmony export */   \"CopyObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CopyObjectRequestFilterSensitiveLog),\n/* harmony export */   \"CopyObjectResultFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CopyObjectResultFilterSensitiveLog),\n/* harmony export */   \"CopyPartResultFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CopyPartResultFilterSensitiveLog),\n/* harmony export */   \"CreateBucketCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CreateBucketCommand),\n/* harmony export */   \"CreateBucketConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateBucketConfigurationFilterSensitiveLog),\n/* harmony export */   \"CreateBucketOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateBucketOutputFilterSensitiveLog),\n/* harmony export */   \"CreateBucketRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateBucketRequestFilterSensitiveLog),\n/* harmony export */   \"CreateMultipartUploadCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.CreateMultipartUploadCommand),\n/* harmony export */   \"CreateMultipartUploadOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"CreateMultipartUploadRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.CreateMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"DefaultRetentionFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DefaultRetentionFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketAnalyticsConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketCommand),\n/* harmony export */   \"DeleteBucketCorsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketCorsCommand),\n/* harmony export */   \"DeleteBucketCorsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketEncryptionCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketEncryptionCommand),\n/* harmony export */   \"DeleteBucketEncryptionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketIntelligentTieringConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketInventoryConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketInventoryConfigurationCommand),\n/* harmony export */   \"DeleteBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketLifecycleCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketLifecycleCommand),\n/* harmony export */   \"DeleteBucketLifecycleRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketLifecycleRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketMetricsConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketMetricsConfigurationCommand),\n/* harmony export */   \"DeleteBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketOwnershipControlsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketOwnershipControlsCommand),\n/* harmony export */   \"DeleteBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketPolicyCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketPolicyCommand),\n/* harmony export */   \"DeleteBucketPolicyRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketReplicationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketReplicationCommand),\n/* harmony export */   \"DeleteBucketReplicationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketTaggingCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketTaggingCommand),\n/* harmony export */   \"DeleteBucketTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketWebsiteCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteBucketWebsiteCommand),\n/* harmony export */   \"DeleteBucketWebsiteRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerEntryFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteMarkerEntryFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerReplicationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteMarkerReplicationFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerReplicationStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteMarkerReplicationStatus),\n/* harmony export */   \"DeleteObjectCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteObjectCommand),\n/* harmony export */   \"DeleteObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectTaggingCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteObjectTaggingCommand),\n/* harmony export */   \"DeleteObjectTaggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeleteObjectsCommand),\n/* harmony export */   \"DeleteObjectsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectsOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeleteObjectsRequestFilterSensitiveLog),\n/* harmony export */   \"DeletePublicAccessBlockCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.DeletePublicAccessBlockCommand),\n/* harmony export */   \"DeletePublicAccessBlockRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeletePublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"DeletedObjectFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DeletedObjectFilterSensitiveLog),\n/* harmony export */   \"DestinationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.DestinationFilterSensitiveLog),\n/* harmony export */   \"EncodingType\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EncodingType),\n/* harmony export */   \"EncryptionConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EncryptionConfigurationFilterSensitiveLog),\n/* harmony export */   \"EncryptionFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EncryptionFilterSensitiveLog),\n/* harmony export */   \"EndEventFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EndEventFilterSensitiveLog),\n/* harmony export */   \"ErrorDocumentFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ErrorDocumentFilterSensitiveLog),\n/* harmony export */   \"EventBridgeConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.EventBridgeConfigurationFilterSensitiveLog),\n/* harmony export */   \"ExistingObjectReplicationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExistingObjectReplicationFilterSensitiveLog),\n/* harmony export */   \"ExistingObjectReplicationStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExistingObjectReplicationStatus),\n/* harmony export */   \"ExpirationStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExpirationStatus),\n/* harmony export */   \"ExpressionType\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ExpressionType),\n/* harmony export */   \"FileHeaderInfo\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.FileHeaderInfo),\n/* harmony export */   \"FilterRuleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.FilterRuleFilterSensitiveLog),\n/* harmony export */   \"FilterRuleName\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.FilterRuleName),\n/* harmony export */   \"GetBucketAccelerateConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketAccelerateConfigurationCommand),\n/* harmony export */   \"GetBucketAccelerateConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAccelerateConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAccelerateConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAccelerateConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketAclCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketAclCommand),\n/* harmony export */   \"GetBucketAclOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAclOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAclRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAclRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketAnalyticsConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"GetBucketAnalyticsConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketCorsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketCorsCommand),\n/* harmony export */   \"GetBucketCorsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketCorsOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketCorsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketEncryptionCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketEncryptionCommand),\n/* harmony export */   \"GetBucketEncryptionOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketEncryptionOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketEncryptionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketInventoryConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketInventoryConfigurationCommand),\n/* harmony export */   \"GetBucketInventoryConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketInventoryConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLifecycleConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketLifecycleConfigurationCommand),\n/* harmony export */   \"GetBucketLifecycleConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLifecycleConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLifecycleConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLifecycleConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLocationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketLocationCommand),\n/* harmony export */   \"GetBucketLocationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLocationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLocationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLocationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLoggingCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketLoggingCommand),\n/* harmony export */   \"GetBucketLoggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLoggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLoggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketLoggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketMetricsConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketMetricsConfigurationCommand),\n/* harmony export */   \"GetBucketMetricsConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketMetricsConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketNotificationConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketNotificationConfigurationCommand),\n/* harmony export */   \"GetBucketNotificationConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketNotificationConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketOwnershipControlsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketOwnershipControlsCommand),\n/* harmony export */   \"GetBucketOwnershipControlsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketOwnershipControlsOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketPolicyCommand),\n/* harmony export */   \"GetBucketPolicyOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyStatusCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketPolicyStatusCommand),\n/* harmony export */   \"GetBucketPolicyStatusOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyStatusOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyStatusRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketPolicyStatusRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketReplicationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketReplicationCommand),\n/* harmony export */   \"GetBucketReplicationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketReplicationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketReplicationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketRequestPaymentCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketRequestPaymentCommand),\n/* harmony export */   \"GetBucketRequestPaymentOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketRequestPaymentOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketRequestPaymentRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketRequestPaymentRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketTaggingCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketTaggingCommand),\n/* harmony export */   \"GetBucketTaggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketVersioningCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketVersioningCommand),\n/* harmony export */   \"GetBucketVersioningOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketVersioningOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketVersioningRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketVersioningRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketWebsiteCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetBucketWebsiteCommand),\n/* harmony export */   \"GetBucketWebsiteOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketWebsiteOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketWebsiteRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectAclCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectAclCommand),\n/* harmony export */   \"GetObjectAclOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAclOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectAclRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAclRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectAttributesCommand),\n/* harmony export */   \"GetObjectAttributesOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAttributesOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesPartsFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAttributesPartsFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectAttributesRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectCommand),\n/* harmony export */   \"GetObjectLegalHoldCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectLegalHoldCommand),\n/* harmony export */   \"GetObjectLegalHoldOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectLegalHoldOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectLegalHoldRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectLegalHoldRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectLockConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectLockConfigurationCommand),\n/* harmony export */   \"GetObjectLockConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectLockConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectLockConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectLockConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectRetentionCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectRetentionCommand),\n/* harmony export */   \"GetObjectRetentionOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectRetentionOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectRetentionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectRetentionRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectTaggingCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectTaggingCommand),\n/* harmony export */   \"GetObjectTaggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectTorrentCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetObjectTorrentCommand),\n/* harmony export */   \"GetObjectTorrentOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectTorrentOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectTorrentRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetObjectTorrentRequestFilterSensitiveLog),\n/* harmony export */   \"GetPublicAccessBlockCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.GetPublicAccessBlockCommand),\n/* harmony export */   \"GetPublicAccessBlockOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetPublicAccessBlockOutputFilterSensitiveLog),\n/* harmony export */   \"GetPublicAccessBlockRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GetPublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"GlacierJobParametersFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GlacierJobParametersFilterSensitiveLog),\n/* harmony export */   \"GrantFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GrantFilterSensitiveLog),\n/* harmony export */   \"GranteeFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.GranteeFilterSensitiveLog),\n/* harmony export */   \"HeadBucketCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.HeadBucketCommand),\n/* harmony export */   \"HeadBucketRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.HeadBucketRequestFilterSensitiveLog),\n/* harmony export */   \"HeadObjectCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.HeadObjectCommand),\n/* harmony export */   \"HeadObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.HeadObjectOutputFilterSensitiveLog),\n/* harmony export */   \"HeadObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.HeadObjectRequestFilterSensitiveLog),\n/* harmony export */   \"IndexDocumentFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IndexDocumentFilterSensitiveLog),\n/* harmony export */   \"InitiatorFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InitiatorFilterSensitiveLog),\n/* harmony export */   \"InputSerializationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InputSerializationFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringAccessTier\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringAccessTier),\n/* harmony export */   \"IntelligentTieringAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringAndOperatorFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringConfigurationFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringFilterFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringFilterFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.IntelligentTieringStatus),\n/* harmony export */   \"InvalidObjectState\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InvalidObjectState),\n/* harmony export */   \"InventoryConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryConfigurationFilterSensitiveLog),\n/* harmony export */   \"InventoryDestinationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryDestinationFilterSensitiveLog),\n/* harmony export */   \"InventoryEncryptionFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryEncryptionFilterSensitiveLog),\n/* harmony export */   \"InventoryFilterFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryFilterFilterSensitiveLog),\n/* harmony export */   \"InventoryFormat\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryFormat),\n/* harmony export */   \"InventoryFrequency\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryFrequency),\n/* harmony export */   \"InventoryIncludedObjectVersions\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryIncludedObjectVersions),\n/* harmony export */   \"InventoryOptionalField\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryOptionalField),\n/* harmony export */   \"InventoryS3BucketDestinationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryS3BucketDestinationFilterSensitiveLog),\n/* harmony export */   \"InventoryScheduleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.InventoryScheduleFilterSensitiveLog),\n/* harmony export */   \"JSONInputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.JSONInputFilterSensitiveLog),\n/* harmony export */   \"JSONOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.JSONOutputFilterSensitiveLog),\n/* harmony export */   \"JSONType\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.JSONType),\n/* harmony export */   \"LambdaFunctionConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LambdaFunctionConfigurationFilterSensitiveLog),\n/* harmony export */   \"LifecycleExpirationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleExpirationFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleRuleAndOperatorFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleFilter\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleRuleFilter),\n/* harmony export */   \"LifecycleRuleFilterFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleRuleFilterFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LifecycleRuleFilterSensitiveLog),\n/* harmony export */   \"ListBucketAnalyticsConfigurationsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketAnalyticsConfigurationsCommand),\n/* harmony export */   \"ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketIntelligentTieringConfigurationsCommand),\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketInventoryConfigurationsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketInventoryConfigurationsCommand),\n/* harmony export */   \"ListBucketInventoryConfigurationsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketInventoryConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketInventoryConfigurationsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketInventoryConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketMetricsConfigurationsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketMetricsConfigurationsCommand),\n/* harmony export */   \"ListBucketMetricsConfigurationsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketMetricsConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketMetricsConfigurationsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketMetricsConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListBucketsCommand),\n/* harmony export */   \"ListBucketsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListBucketsOutputFilterSensitiveLog),\n/* harmony export */   \"ListMultipartUploadsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListMultipartUploadsCommand),\n/* harmony export */   \"ListMultipartUploadsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListMultipartUploadsOutputFilterSensitiveLog),\n/* harmony export */   \"ListMultipartUploadsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListMultipartUploadsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectVersionsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListObjectVersionsCommand),\n/* harmony export */   \"ListObjectVersionsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectVersionsOutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectVersionsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectVersionsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListObjectsCommand),\n/* harmony export */   \"ListObjectsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectsOutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectsV2Command\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListObjectsV2Command),\n/* harmony export */   \"ListObjectsV2OutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectsV2OutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectsV2RequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListObjectsV2RequestFilterSensitiveLog),\n/* harmony export */   \"ListPartsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.ListPartsCommand),\n/* harmony export */   \"ListPartsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListPartsOutputFilterSensitiveLog),\n/* harmony export */   \"ListPartsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ListPartsRequestFilterSensitiveLog),\n/* harmony export */   \"LoggingEnabledFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.LoggingEnabledFilterSensitiveLog),\n/* harmony export */   \"MFADelete\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MFADelete),\n/* harmony export */   \"MFADeleteStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MFADeleteStatus),\n/* harmony export */   \"MetadataDirective\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetadataDirective),\n/* harmony export */   \"MetadataEntryFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetadataEntryFilterSensitiveLog),\n/* harmony export */   \"MetricsAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsAndOperatorFilterSensitiveLog),\n/* harmony export */   \"MetricsConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsConfigurationFilterSensitiveLog),\n/* harmony export */   \"MetricsFilter\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsFilter),\n/* harmony export */   \"MetricsFilterFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsFilterFilterSensitiveLog),\n/* harmony export */   \"MetricsFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsFilterSensitiveLog),\n/* harmony export */   \"MetricsStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MetricsStatus),\n/* harmony export */   \"MultipartUploadFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.MultipartUploadFilterSensitiveLog),\n/* harmony export */   \"NoSuchBucket\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoSuchBucket),\n/* harmony export */   \"NoSuchKey\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoSuchKey),\n/* harmony export */   \"NoSuchUpload\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoSuchUpload),\n/* harmony export */   \"NoncurrentVersionExpirationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoncurrentVersionExpirationFilterSensitiveLog),\n/* harmony export */   \"NoncurrentVersionTransitionFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NoncurrentVersionTransitionFilterSensitiveLog),\n/* harmony export */   \"NotFound\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NotFound),\n/* harmony export */   \"NotificationConfigurationFilterFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NotificationConfigurationFilterFilterSensitiveLog),\n/* harmony export */   \"NotificationConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.NotificationConfigurationFilterSensitiveLog),\n/* harmony export */   \"ObjectAlreadyInActiveTierError\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectAlreadyInActiveTierError),\n/* harmony export */   \"ObjectAttributes\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectAttributes),\n/* harmony export */   \"ObjectCannedACL\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectCannedACL),\n/* harmony export */   \"ObjectIdentifierFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectIdentifierFilterSensitiveLog),\n/* harmony export */   \"ObjectLockConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockConfigurationFilterSensitiveLog),\n/* harmony export */   \"ObjectLockEnabled\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockEnabled),\n/* harmony export */   \"ObjectLockLegalHoldFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockLegalHoldFilterSensitiveLog),\n/* harmony export */   \"ObjectLockLegalHoldStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockLegalHoldStatus),\n/* harmony export */   \"ObjectLockMode\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockMode),\n/* harmony export */   \"ObjectLockRetentionFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockRetentionFilterSensitiveLog),\n/* harmony export */   \"ObjectLockRetentionMode\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockRetentionMode),\n/* harmony export */   \"ObjectLockRuleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectLockRuleFilterSensitiveLog),\n/* harmony export */   \"ObjectNotInActiveTierError\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectNotInActiveTierError),\n/* harmony export */   \"ObjectOwnership\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectOwnership),\n/* harmony export */   \"ObjectPartFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectPartFilterSensitiveLog),\n/* harmony export */   \"ObjectStorageClass\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectStorageClass),\n/* harmony export */   \"ObjectVersionFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectVersionFilterSensitiveLog),\n/* harmony export */   \"ObjectVersionStorageClass\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ObjectVersionStorageClass),\n/* harmony export */   \"OutputLocationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OutputLocationFilterSensitiveLog),\n/* harmony export */   \"OutputSerializationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OutputSerializationFilterSensitiveLog),\n/* harmony export */   \"OwnerFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OwnerFilterSensitiveLog),\n/* harmony export */   \"OwnerOverride\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OwnerOverride),\n/* harmony export */   \"OwnershipControlsFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OwnershipControlsFilterSensitiveLog),\n/* harmony export */   \"OwnershipControlsRuleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.OwnershipControlsRuleFilterSensitiveLog),\n/* harmony export */   \"ParquetInputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ParquetInputFilterSensitiveLog),\n/* harmony export */   \"PartFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PartFilterSensitiveLog),\n/* harmony export */   \"Payer\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Payer),\n/* harmony export */   \"Permission\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Permission),\n/* harmony export */   \"PolicyStatusFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PolicyStatusFilterSensitiveLog),\n/* harmony export */   \"ProgressEventFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ProgressEventFilterSensitiveLog),\n/* harmony export */   \"ProgressFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ProgressFilterSensitiveLog),\n/* harmony export */   \"Protocol\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Protocol),\n/* harmony export */   \"PublicAccessBlockConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PublicAccessBlockConfigurationFilterSensitiveLog),\n/* harmony export */   \"PutBucketAccelerateConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketAccelerateConfigurationCommand),\n/* harmony export */   \"PutBucketAccelerateConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketAccelerateConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketAclCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketAclCommand),\n/* harmony export */   \"PutBucketAclRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketAclRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketAnalyticsConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"PutBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketCorsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketCorsCommand),\n/* harmony export */   \"PutBucketCorsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketEncryptionCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketEncryptionCommand),\n/* harmony export */   \"PutBucketEncryptionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketIntelligentTieringConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketInventoryConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketInventoryConfigurationCommand),\n/* harmony export */   \"PutBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketLifecycleConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketLifecycleConfigurationCommand),\n/* harmony export */   \"PutBucketLifecycleConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketLifecycleConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketLoggingCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketLoggingCommand),\n/* harmony export */   \"PutBucketLoggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketLoggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketMetricsConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketMetricsConfigurationCommand),\n/* harmony export */   \"PutBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketNotificationConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketNotificationConfigurationCommand),\n/* harmony export */   \"PutBucketNotificationConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketNotificationConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketOwnershipControlsCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketOwnershipControlsCommand),\n/* harmony export */   \"PutBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketPolicyCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketPolicyCommand),\n/* harmony export */   \"PutBucketPolicyRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketReplicationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketReplicationCommand),\n/* harmony export */   \"PutBucketReplicationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketRequestPaymentCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketRequestPaymentCommand),\n/* harmony export */   \"PutBucketRequestPaymentRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketRequestPaymentRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketTaggingCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketTaggingCommand),\n/* harmony export */   \"PutBucketTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketVersioningCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketVersioningCommand),\n/* harmony export */   \"PutBucketVersioningRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketVersioningRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketWebsiteCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutBucketWebsiteCommand),\n/* harmony export */   \"PutBucketWebsiteRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectAclCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectAclCommand),\n/* harmony export */   \"PutObjectAclOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectAclOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectAclRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectAclRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectCommand),\n/* harmony export */   \"PutObjectLegalHoldCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectLegalHoldCommand),\n/* harmony export */   \"PutObjectLegalHoldOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectLegalHoldOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectLegalHoldRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectLegalHoldRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectLockConfigurationCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectLockConfigurationCommand),\n/* harmony export */   \"PutObjectLockConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectLockConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectLockConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectLockConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectRetentionCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectRetentionCommand),\n/* harmony export */   \"PutObjectRetentionOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectRetentionOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectRetentionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectRetentionRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectTaggingCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutObjectTaggingCommand),\n/* harmony export */   \"PutObjectTaggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutPublicAccessBlockCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.PutPublicAccessBlockCommand),\n/* harmony export */   \"PutPublicAccessBlockRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.PutPublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"QueueConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.QueueConfigurationFilterSensitiveLog),\n/* harmony export */   \"QuoteFields\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.QuoteFields),\n/* harmony export */   \"RecordsEventFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RecordsEventFilterSensitiveLog),\n/* harmony export */   \"RedirectAllRequestsToFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RedirectAllRequestsToFilterSensitiveLog),\n/* harmony export */   \"RedirectFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RedirectFilterSensitiveLog),\n/* harmony export */   \"ReplicaModificationsFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicaModificationsFilterSensitiveLog),\n/* harmony export */   \"ReplicaModificationsStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicaModificationsStatus),\n/* harmony export */   \"ReplicationConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationConfigurationFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleAndOperatorFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleFilter\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleFilter),\n/* harmony export */   \"ReplicationRuleFilterFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleFilterFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationRuleStatus),\n/* harmony export */   \"ReplicationStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationStatus),\n/* harmony export */   \"ReplicationTimeFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationTimeFilterSensitiveLog),\n/* harmony export */   \"ReplicationTimeStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationTimeStatus),\n/* harmony export */   \"ReplicationTimeValueFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ReplicationTimeValueFilterSensitiveLog),\n/* harmony export */   \"RequestCharged\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RequestCharged),\n/* harmony export */   \"RequestPayer\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RequestPayer),\n/* harmony export */   \"RequestPaymentConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RequestPaymentConfigurationFilterSensitiveLog),\n/* harmony export */   \"RequestProgressFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RequestProgressFilterSensitiveLog),\n/* harmony export */   \"RestoreObjectCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.RestoreObjectCommand),\n/* harmony export */   \"RestoreObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RestoreObjectOutputFilterSensitiveLog),\n/* harmony export */   \"RestoreObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RestoreObjectRequestFilterSensitiveLog),\n/* harmony export */   \"RestoreRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RestoreRequestFilterSensitiveLog),\n/* harmony export */   \"RestoreRequestType\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RestoreRequestType),\n/* harmony export */   \"RoutingRuleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.RoutingRuleFilterSensitiveLog),\n/* harmony export */   \"S3\": () => (/* reexport safe */ _S3__WEBPACK_IMPORTED_MODULE_0__.S3),\n/* harmony export */   \"S3Client\": () => (/* reexport safe */ _S3Client__WEBPACK_IMPORTED_MODULE_1__.S3Client),\n/* harmony export */   \"S3KeyFilterFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.S3KeyFilterFilterSensitiveLog),\n/* harmony export */   \"S3LocationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.S3LocationFilterSensitiveLog),\n/* harmony export */   \"S3ServiceException\": () => (/* reexport safe */ _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_6__.S3ServiceException),\n/* harmony export */   \"SSEKMSFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SSEKMSFilterSensitiveLog),\n/* harmony export */   \"SSES3FilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SSES3FilterSensitiveLog),\n/* harmony export */   \"ScanRangeFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ScanRangeFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.SelectObjectContentCommand),\n/* harmony export */   \"SelectObjectContentEventStream\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectObjectContentEventStream),\n/* harmony export */   \"SelectObjectContentEventStreamFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectObjectContentEventStreamFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectObjectContentOutputFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectObjectContentRequestFilterSensitiveLog),\n/* harmony export */   \"SelectParametersFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SelectParametersFilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryption\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ServerSideEncryption),\n/* harmony export */   \"ServerSideEncryptionByDefaultFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ServerSideEncryptionByDefaultFilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryptionConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ServerSideEncryptionConfigurationFilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryptionRuleFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.ServerSideEncryptionRuleFilterSensitiveLog),\n/* harmony export */   \"SourceSelectionCriteriaFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SourceSelectionCriteriaFilterSensitiveLog),\n/* harmony export */   \"SseKmsEncryptedObjectsFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SseKmsEncryptedObjectsFilterSensitiveLog),\n/* harmony export */   \"SseKmsEncryptedObjectsStatus\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.SseKmsEncryptedObjectsStatus),\n/* harmony export */   \"StatsEventFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StatsEventFilterSensitiveLog),\n/* harmony export */   \"StatsFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StatsFilterSensitiveLog),\n/* harmony export */   \"StorageClass\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StorageClass),\n/* harmony export */   \"StorageClassAnalysisDataExportFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StorageClassAnalysisDataExportFilterSensitiveLog),\n/* harmony export */   \"StorageClassAnalysisFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StorageClassAnalysisFilterSensitiveLog),\n/* harmony export */   \"StorageClassAnalysisSchemaVersion\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.StorageClassAnalysisSchemaVersion),\n/* harmony export */   \"TagFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TagFilterSensitiveLog),\n/* harmony export */   \"TaggingDirective\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TaggingDirective),\n/* harmony export */   \"TaggingFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TaggingFilterSensitiveLog),\n/* harmony export */   \"TargetGrantFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TargetGrantFilterSensitiveLog),\n/* harmony export */   \"Tier\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Tier),\n/* harmony export */   \"TieringFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TieringFilterSensitiveLog),\n/* harmony export */   \"TopicConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TopicConfigurationFilterSensitiveLog),\n/* harmony export */   \"TransitionFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TransitionFilterSensitiveLog),\n/* harmony export */   \"TransitionStorageClass\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.TransitionStorageClass),\n/* harmony export */   \"Type\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.Type),\n/* harmony export */   \"UploadPartCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.UploadPartCommand),\n/* harmony export */   \"UploadPartCopyCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.UploadPartCopyCommand),\n/* harmony export */   \"UploadPartCopyOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UploadPartCopyOutputFilterSensitiveLog),\n/* harmony export */   \"UploadPartCopyRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UploadPartCopyRequestFilterSensitiveLog),\n/* harmony export */   \"UploadPartOutputFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UploadPartOutputFilterSensitiveLog),\n/* harmony export */   \"UploadPartRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.UploadPartRequestFilterSensitiveLog),\n/* harmony export */   \"VersioningConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.VersioningConfigurationFilterSensitiveLog),\n/* harmony export */   \"WebsiteConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.WebsiteConfigurationFilterSensitiveLog),\n/* harmony export */   \"WriteGetObjectResponseCommand\": () => (/* reexport safe */ _commands__WEBPACK_IMPORTED_MODULE_2__.WriteGetObjectResponseCommand),\n/* harmony export */   \"WriteGetObjectResponseRequestFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__.WriteGetObjectResponseRequestFilterSensitiveLog),\n/* harmony export */   \"_ErrorFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__._ErrorFilterSensitiveLog),\n/* harmony export */   \"_ObjectFilterSensitiveLog\": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_3__._ObjectFilterSensitiveLog),\n/* harmony export */   \"paginateListObjectsV2\": () => (/* reexport safe */ _pagination__WEBPACK_IMPORTED_MODULE_4__.paginateListObjectsV2),\n/* harmony export */   \"paginateListParts\": () => (/* reexport safe */ _pagination__WEBPACK_IMPORTED_MODULE_4__.paginateListParts),\n/* harmony export */   \"waitForBucketExists\": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitForBucketExists),\n/* harmony export */   \"waitForBucketNotExists\": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitForBucketNotExists),\n/* harmony export */   \"waitForObjectExists\": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitForObjectExists),\n/* harmony export */   \"waitForObjectNotExists\": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitForObjectNotExists),\n/* harmony export */   \"waitUntilBucketExists\": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitUntilBucketExists),\n/* harmony export */   \"waitUntilBucketNotExists\": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitUntilBucketNotExists),\n/* harmony export */   \"waitUntilObjectExists\": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitUntilObjectExists),\n/* harmony export */   \"waitUntilObjectNotExists\": () => (/* reexport safe */ _waiters__WEBPACK_IMPORTED_MODULE_5__.waitUntilObjectNotExists)\n/* harmony export */ });\n/* harmony import */ var _S3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./S3 */ \"./node_modules/@aws-sdk/client-s3/dist-es/S3.js\");\n/* harmony import */ var _S3Client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./S3Client */ \"./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js\");\n/* harmony import */ var _commands__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commands */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/index.js\");\n/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/index.js\");\n/* harmony import */ var _pagination__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination */ \"./node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js\");\n/* harmony import */ var _waiters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./waiters */ \"./node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js\");\n/* harmony import */ var _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./models/S3ServiceException */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"S3ServiceException\": () => (/* binding */ S3ServiceException)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n\nclass S3ServiceException extends _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, S3ServiceException.prototype);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/models/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/models/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbortIncompleteMultipartUploadFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AbortIncompleteMultipartUploadFilterSensitiveLog),\n/* harmony export */   \"AbortMultipartUploadOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AbortMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"AbortMultipartUploadRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AbortMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"AccelerateConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AccelerateConfigurationFilterSensitiveLog),\n/* harmony export */   \"AccessControlPolicyFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AccessControlPolicyFilterSensitiveLog),\n/* harmony export */   \"AccessControlTranslationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AccessControlTranslationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsAndOperatorFilterSensitiveLog),\n/* harmony export */   \"AnalyticsConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsConfigurationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsExportDestinationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsExportDestinationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsFilter\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsFilter),\n/* harmony export */   \"AnalyticsFilterFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsFilterFilterSensitiveLog),\n/* harmony export */   \"AnalyticsS3BucketDestinationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsS3BucketDestinationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsS3ExportFileFormat\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.AnalyticsS3ExportFileFormat),\n/* harmony export */   \"ArchiveStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ArchiveStatus),\n/* harmony export */   \"BucketAccelerateStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketAccelerateStatus),\n/* harmony export */   \"BucketAlreadyExists\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketAlreadyExists),\n/* harmony export */   \"BucketAlreadyOwnedByYou\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketAlreadyOwnedByYou),\n/* harmony export */   \"BucketCannedACL\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketCannedACL),\n/* harmony export */   \"BucketFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketFilterSensitiveLog),\n/* harmony export */   \"BucketLifecycleConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketLifecycleConfigurationFilterSensitiveLog),\n/* harmony export */   \"BucketLocationConstraint\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketLocationConstraint),\n/* harmony export */   \"BucketLoggingStatusFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketLoggingStatusFilterSensitiveLog),\n/* harmony export */   \"BucketLogsPermission\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketLogsPermission),\n/* harmony export */   \"BucketVersioningStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.BucketVersioningStatus),\n/* harmony export */   \"CORSConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CORSConfigurationFilterSensitiveLog),\n/* harmony export */   \"CORSRuleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CORSRuleFilterSensitiveLog),\n/* harmony export */   \"CSVInputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.CSVInputFilterSensitiveLog),\n/* harmony export */   \"CSVOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.CSVOutputFilterSensitiveLog),\n/* harmony export */   \"ChecksumAlgorithm\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm),\n/* harmony export */   \"ChecksumFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ChecksumFilterSensitiveLog),\n/* harmony export */   \"ChecksumMode\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ChecksumMode),\n/* harmony export */   \"CommonPrefixFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CommonPrefixFilterSensitiveLog),\n/* harmony export */   \"CompleteMultipartUploadOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CompleteMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"CompleteMultipartUploadRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CompleteMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"CompletedMultipartUploadFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CompletedMultipartUploadFilterSensitiveLog),\n/* harmony export */   \"CompletedPartFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CompletedPartFilterSensitiveLog),\n/* harmony export */   \"CompressionType\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.CompressionType),\n/* harmony export */   \"ConditionFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ConditionFilterSensitiveLog),\n/* harmony export */   \"ContinuationEventFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ContinuationEventFilterSensitiveLog),\n/* harmony export */   \"CopyObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CopyObjectOutputFilterSensitiveLog),\n/* harmony export */   \"CopyObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CopyObjectRequestFilterSensitiveLog),\n/* harmony export */   \"CopyObjectResultFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CopyObjectResultFilterSensitiveLog),\n/* harmony export */   \"CopyPartResultFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.CopyPartResultFilterSensitiveLog),\n/* harmony export */   \"CreateBucketConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateBucketConfigurationFilterSensitiveLog),\n/* harmony export */   \"CreateBucketOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateBucketOutputFilterSensitiveLog),\n/* harmony export */   \"CreateBucketRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateBucketRequestFilterSensitiveLog),\n/* harmony export */   \"CreateMultipartUploadOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"CreateMultipartUploadRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.CreateMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"DefaultRetentionFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DefaultRetentionFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketCorsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketEncryptionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketLifecycleRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketLifecycleRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketPolicyRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketReplicationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketWebsiteRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerEntryFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteMarkerEntryFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerReplicationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteMarkerReplicationFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerReplicationStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteMarkerReplicationStatus),\n/* harmony export */   \"DeleteObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectTaggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectsOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeleteObjectsRequestFilterSensitiveLog),\n/* harmony export */   \"DeletePublicAccessBlockRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeletePublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"DeletedObjectFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DeletedObjectFilterSensitiveLog),\n/* harmony export */   \"DestinationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.DestinationFilterSensitiveLog),\n/* harmony export */   \"EncodingType\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.EncodingType),\n/* harmony export */   \"EncryptionConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.EncryptionConfigurationFilterSensitiveLog),\n/* harmony export */   \"EncryptionFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.EncryptionFilterSensitiveLog),\n/* harmony export */   \"EndEventFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.EndEventFilterSensitiveLog),\n/* harmony export */   \"ErrorDocumentFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ErrorDocumentFilterSensitiveLog),\n/* harmony export */   \"EventBridgeConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.EventBridgeConfigurationFilterSensitiveLog),\n/* harmony export */   \"ExistingObjectReplicationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ExistingObjectReplicationFilterSensitiveLog),\n/* harmony export */   \"ExistingObjectReplicationStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ExistingObjectReplicationStatus),\n/* harmony export */   \"ExpirationStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ExpirationStatus),\n/* harmony export */   \"ExpressionType\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ExpressionType),\n/* harmony export */   \"FileHeaderInfo\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.FileHeaderInfo),\n/* harmony export */   \"FilterRuleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.FilterRuleFilterSensitiveLog),\n/* harmony export */   \"FilterRuleName\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.FilterRuleName),\n/* harmony export */   \"GetBucketAccelerateConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAccelerateConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAccelerateConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAccelerateConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketAclOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAclOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAclRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAclRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketAnalyticsConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketCorsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketCorsOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketCorsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketEncryptionOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketEncryptionOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketEncryptionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketInventoryConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketInventoryConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLifecycleConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLifecycleConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLifecycleConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLifecycleConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLocationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLocationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLocationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLocationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLoggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLoggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLoggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketLoggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketMetricsConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketMetricsConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketNotificationConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketNotificationConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketOwnershipControlsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketOwnershipControlsOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketPolicyOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyStatusOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketPolicyStatusOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyStatusRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketPolicyStatusRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketReplicationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketReplicationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketReplicationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketRequestPaymentOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketRequestPaymentOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketRequestPaymentRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketRequestPaymentRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketTaggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketVersioningOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketVersioningOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketVersioningRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketVersioningRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketWebsiteOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketWebsiteOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketWebsiteRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectAclOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAclOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectAclRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAclRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAttributesOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesPartsFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAttributesPartsFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectAttributesRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectLegalHoldOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectLegalHoldOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectLegalHoldRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectLegalHoldRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectLockConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectLockConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectLockConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectLockConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectRetentionOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectRetentionOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectRetentionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectRetentionRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectTaggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectTorrentOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectTorrentOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectTorrentRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetObjectTorrentRequestFilterSensitiveLog),\n/* harmony export */   \"GetPublicAccessBlockOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetPublicAccessBlockOutputFilterSensitiveLog),\n/* harmony export */   \"GetPublicAccessBlockRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GetPublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"GlacierJobParametersFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.GlacierJobParametersFilterSensitiveLog),\n/* harmony export */   \"GrantFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GrantFilterSensitiveLog),\n/* harmony export */   \"GranteeFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.GranteeFilterSensitiveLog),\n/* harmony export */   \"HeadBucketRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.HeadBucketRequestFilterSensitiveLog),\n/* harmony export */   \"HeadObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.HeadObjectOutputFilterSensitiveLog),\n/* harmony export */   \"HeadObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.HeadObjectRequestFilterSensitiveLog),\n/* harmony export */   \"IndexDocumentFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IndexDocumentFilterSensitiveLog),\n/* harmony export */   \"InitiatorFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InitiatorFilterSensitiveLog),\n/* harmony export */   \"InputSerializationFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.InputSerializationFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringAccessTier\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringAccessTier),\n/* harmony export */   \"IntelligentTieringAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringAndOperatorFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringConfigurationFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringFilterFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringFilterFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.IntelligentTieringStatus),\n/* harmony export */   \"InvalidObjectState\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InvalidObjectState),\n/* harmony export */   \"InventoryConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryConfigurationFilterSensitiveLog),\n/* harmony export */   \"InventoryDestinationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryDestinationFilterSensitiveLog),\n/* harmony export */   \"InventoryEncryptionFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryEncryptionFilterSensitiveLog),\n/* harmony export */   \"InventoryFilterFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryFilterFilterSensitiveLog),\n/* harmony export */   \"InventoryFormat\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryFormat),\n/* harmony export */   \"InventoryFrequency\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryFrequency),\n/* harmony export */   \"InventoryIncludedObjectVersions\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryIncludedObjectVersions),\n/* harmony export */   \"InventoryOptionalField\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryOptionalField),\n/* harmony export */   \"InventoryS3BucketDestinationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryS3BucketDestinationFilterSensitiveLog),\n/* harmony export */   \"InventoryScheduleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.InventoryScheduleFilterSensitiveLog),\n/* harmony export */   \"JSONInputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.JSONInputFilterSensitiveLog),\n/* harmony export */   \"JSONOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.JSONOutputFilterSensitiveLog),\n/* harmony export */   \"JSONType\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.JSONType),\n/* harmony export */   \"LambdaFunctionConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LambdaFunctionConfigurationFilterSensitiveLog),\n/* harmony export */   \"LifecycleExpirationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleExpirationFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleRuleAndOperatorFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleFilter\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleRuleFilter),\n/* harmony export */   \"LifecycleRuleFilterFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleRuleFilterFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LifecycleRuleFilterSensitiveLog),\n/* harmony export */   \"ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketInventoryConfigurationsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketInventoryConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketInventoryConfigurationsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketInventoryConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketMetricsConfigurationsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketMetricsConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketMetricsConfigurationsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketMetricsConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListBucketsOutputFilterSensitiveLog),\n/* harmony export */   \"ListMultipartUploadsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListMultipartUploadsOutputFilterSensitiveLog),\n/* harmony export */   \"ListMultipartUploadsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListMultipartUploadsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectVersionsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectVersionsOutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectVersionsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectVersionsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectsOutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectsV2OutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectsV2OutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectsV2RequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListObjectsV2RequestFilterSensitiveLog),\n/* harmony export */   \"ListPartsOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListPartsOutputFilterSensitiveLog),\n/* harmony export */   \"ListPartsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ListPartsRequestFilterSensitiveLog),\n/* harmony export */   \"LoggingEnabledFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.LoggingEnabledFilterSensitiveLog),\n/* harmony export */   \"MFADelete\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MFADelete),\n/* harmony export */   \"MFADeleteStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MFADeleteStatus),\n/* harmony export */   \"MetadataDirective\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetadataDirective),\n/* harmony export */   \"MetadataEntryFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.MetadataEntryFilterSensitiveLog),\n/* harmony export */   \"MetricsAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsAndOperatorFilterSensitiveLog),\n/* harmony export */   \"MetricsConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsConfigurationFilterSensitiveLog),\n/* harmony export */   \"MetricsFilter\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsFilter),\n/* harmony export */   \"MetricsFilterFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsFilterFilterSensitiveLog),\n/* harmony export */   \"MetricsFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsFilterSensitiveLog),\n/* harmony export */   \"MetricsStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MetricsStatus),\n/* harmony export */   \"MultipartUploadFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.MultipartUploadFilterSensitiveLog),\n/* harmony export */   \"NoSuchBucket\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoSuchBucket),\n/* harmony export */   \"NoSuchKey\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoSuchKey),\n/* harmony export */   \"NoSuchUpload\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoSuchUpload),\n/* harmony export */   \"NoncurrentVersionExpirationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoncurrentVersionExpirationFilterSensitiveLog),\n/* harmony export */   \"NoncurrentVersionTransitionFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NoncurrentVersionTransitionFilterSensitiveLog),\n/* harmony export */   \"NotFound\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NotFound),\n/* harmony export */   \"NotificationConfigurationFilterFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NotificationConfigurationFilterFilterSensitiveLog),\n/* harmony export */   \"NotificationConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.NotificationConfigurationFilterSensitiveLog),\n/* harmony export */   \"ObjectAlreadyInActiveTierError\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ObjectAlreadyInActiveTierError),\n/* harmony export */   \"ObjectAttributes\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectAttributes),\n/* harmony export */   \"ObjectCannedACL\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectCannedACL),\n/* harmony export */   \"ObjectIdentifierFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifierFilterSensitiveLog),\n/* harmony export */   \"ObjectLockConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockConfigurationFilterSensitiveLog),\n/* harmony export */   \"ObjectLockEnabled\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockEnabled),\n/* harmony export */   \"ObjectLockLegalHoldFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockLegalHoldFilterSensitiveLog),\n/* harmony export */   \"ObjectLockLegalHoldStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockLegalHoldStatus),\n/* harmony export */   \"ObjectLockMode\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockMode),\n/* harmony export */   \"ObjectLockRetentionFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockRetentionFilterSensitiveLog),\n/* harmony export */   \"ObjectLockRetentionMode\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockRetentionMode),\n/* harmony export */   \"ObjectLockRuleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectLockRuleFilterSensitiveLog),\n/* harmony export */   \"ObjectNotInActiveTierError\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectNotInActiveTierError),\n/* harmony export */   \"ObjectOwnership\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectOwnership),\n/* harmony export */   \"ObjectPartFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectPartFilterSensitiveLog),\n/* harmony export */   \"ObjectStorageClass\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectStorageClass),\n/* harmony export */   \"ObjectVersionFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectVersionFilterSensitiveLog),\n/* harmony export */   \"ObjectVersionStorageClass\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ObjectVersionStorageClass),\n/* harmony export */   \"OutputLocationFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.OutputLocationFilterSensitiveLog),\n/* harmony export */   \"OutputSerializationFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.OutputSerializationFilterSensitiveLog),\n/* harmony export */   \"OwnerFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.OwnerFilterSensitiveLog),\n/* harmony export */   \"OwnerOverride\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.OwnerOverride),\n/* harmony export */   \"OwnershipControlsFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.OwnershipControlsFilterSensitiveLog),\n/* harmony export */   \"OwnershipControlsRuleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.OwnershipControlsRuleFilterSensitiveLog),\n/* harmony export */   \"ParquetInputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ParquetInputFilterSensitiveLog),\n/* harmony export */   \"PartFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PartFilterSensitiveLog),\n/* harmony export */   \"Payer\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.Payer),\n/* harmony export */   \"Permission\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.Permission),\n/* harmony export */   \"PolicyStatusFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PolicyStatusFilterSensitiveLog),\n/* harmony export */   \"ProgressEventFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ProgressEventFilterSensitiveLog),\n/* harmony export */   \"ProgressFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ProgressFilterSensitiveLog),\n/* harmony export */   \"Protocol\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.Protocol),\n/* harmony export */   \"PublicAccessBlockConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PublicAccessBlockConfigurationFilterSensitiveLog),\n/* harmony export */   \"PutBucketAccelerateConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketAccelerateConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketAclRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketAclRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketCorsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketEncryptionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketLifecycleConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketLifecycleConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketLoggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketLoggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketNotificationConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketNotificationConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketPolicyRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketReplicationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketRequestPaymentRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketRequestPaymentRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketVersioningRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketVersioningRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketWebsiteRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectAclOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectAclOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectAclRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectAclRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectLegalHoldOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectLegalHoldOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectLegalHoldRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectLegalHoldRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectLockConfigurationOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectLockConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectLockConfigurationRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectLockConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.PutObjectRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectRetentionOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutObjectRetentionOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectRetentionRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutObjectRetentionRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectTaggingOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectTaggingRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutPublicAccessBlockRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.PutPublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"QueueConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.QueueConfigurationFilterSensitiveLog),\n/* harmony export */   \"QuoteFields\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.QuoteFields),\n/* harmony export */   \"RecordsEventFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RecordsEventFilterSensitiveLog),\n/* harmony export */   \"RedirectAllRequestsToFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RedirectAllRequestsToFilterSensitiveLog),\n/* harmony export */   \"RedirectFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RedirectFilterSensitiveLog),\n/* harmony export */   \"ReplicaModificationsFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicaModificationsFilterSensitiveLog),\n/* harmony export */   \"ReplicaModificationsStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicaModificationsStatus),\n/* harmony export */   \"ReplicationConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationConfigurationFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleAndOperatorFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleAndOperatorFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleFilter\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleFilter),\n/* harmony export */   \"ReplicationRuleFilterFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleFilterFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationRuleStatus),\n/* harmony export */   \"ReplicationStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationStatus),\n/* harmony export */   \"ReplicationTimeFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationTimeFilterSensitiveLog),\n/* harmony export */   \"ReplicationTimeStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationTimeStatus),\n/* harmony export */   \"ReplicationTimeValueFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ReplicationTimeValueFilterSensitiveLog),\n/* harmony export */   \"RequestCharged\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RequestCharged),\n/* harmony export */   \"RequestPayer\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RequestPayer),\n/* harmony export */   \"RequestPaymentConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RequestPaymentConfigurationFilterSensitiveLog),\n/* harmony export */   \"RequestProgressFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RequestProgressFilterSensitiveLog),\n/* harmony export */   \"RestoreObjectOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RestoreObjectOutputFilterSensitiveLog),\n/* harmony export */   \"RestoreObjectRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RestoreObjectRequestFilterSensitiveLog),\n/* harmony export */   \"RestoreRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RestoreRequestFilterSensitiveLog),\n/* harmony export */   \"RestoreRequestType\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.RestoreRequestType),\n/* harmony export */   \"RoutingRuleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.RoutingRuleFilterSensitiveLog),\n/* harmony export */   \"S3KeyFilterFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.S3KeyFilterFilterSensitiveLog),\n/* harmony export */   \"S3LocationFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.S3LocationFilterSensitiveLog),\n/* harmony export */   \"SSEKMSFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SSEKMSFilterSensitiveLog),\n/* harmony export */   \"SSES3FilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SSES3FilterSensitiveLog),\n/* harmony export */   \"ScanRangeFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.ScanRangeFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentEventStream\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectObjectContentEventStream),\n/* harmony export */   \"SelectObjectContentEventStreamFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectObjectContentEventStreamFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectObjectContentOutputFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectObjectContentRequestFilterSensitiveLog),\n/* harmony export */   \"SelectParametersFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.SelectParametersFilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryption\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ServerSideEncryption),\n/* harmony export */   \"ServerSideEncryptionByDefaultFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ServerSideEncryptionByDefaultFilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryptionConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ServerSideEncryptionConfigurationFilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryptionRuleFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.ServerSideEncryptionRuleFilterSensitiveLog),\n/* harmony export */   \"SourceSelectionCriteriaFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SourceSelectionCriteriaFilterSensitiveLog),\n/* harmony export */   \"SseKmsEncryptedObjectsFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SseKmsEncryptedObjectsFilterSensitiveLog),\n/* harmony export */   \"SseKmsEncryptedObjectsStatus\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.SseKmsEncryptedObjectsStatus),\n/* harmony export */   \"StatsEventFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.StatsEventFilterSensitiveLog),\n/* harmony export */   \"StatsFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.StatsFilterSensitiveLog),\n/* harmony export */   \"StorageClass\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.StorageClass),\n/* harmony export */   \"StorageClassAnalysisDataExportFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.StorageClassAnalysisDataExportFilterSensitiveLog),\n/* harmony export */   \"StorageClassAnalysisFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.StorageClassAnalysisFilterSensitiveLog),\n/* harmony export */   \"StorageClassAnalysisSchemaVersion\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.StorageClassAnalysisSchemaVersion),\n/* harmony export */   \"TagFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TagFilterSensitiveLog),\n/* harmony export */   \"TaggingDirective\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TaggingDirective),\n/* harmony export */   \"TaggingFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TaggingFilterSensitiveLog),\n/* harmony export */   \"TargetGrantFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TargetGrantFilterSensitiveLog),\n/* harmony export */   \"Tier\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.Tier),\n/* harmony export */   \"TieringFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TieringFilterSensitiveLog),\n/* harmony export */   \"TopicConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TopicConfigurationFilterSensitiveLog),\n/* harmony export */   \"TransitionFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TransitionFilterSensitiveLog),\n/* harmony export */   \"TransitionStorageClass\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.TransitionStorageClass),\n/* harmony export */   \"Type\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.Type),\n/* harmony export */   \"UploadPartCopyOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.UploadPartCopyOutputFilterSensitiveLog),\n/* harmony export */   \"UploadPartCopyRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.UploadPartCopyRequestFilterSensitiveLog),\n/* harmony export */   \"UploadPartOutputFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.UploadPartOutputFilterSensitiveLog),\n/* harmony export */   \"UploadPartRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.UploadPartRequestFilterSensitiveLog),\n/* harmony export */   \"VersioningConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.VersioningConfigurationFilterSensitiveLog),\n/* harmony export */   \"WebsiteConfigurationFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__.WebsiteConfigurationFilterSensitiveLog),\n/* harmony export */   \"WriteGetObjectResponseRequestFilterSensitiveLog\": () => (/* reexport safe */ _models_1__WEBPACK_IMPORTED_MODULE_1__.WriteGetObjectResponseRequestFilterSensitiveLog),\n/* harmony export */   \"_ErrorFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__._ErrorFilterSensitiveLog),\n/* harmony export */   \"_ObjectFilterSensitiveLog\": () => (/* reexport safe */ _models_0__WEBPACK_IMPORTED_MODULE_0__._ObjectFilterSensitiveLog)\n/* harmony export */ });\n/* harmony import */ var _models_0__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _models_1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/models/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbortIncompleteMultipartUploadFilterSensitiveLog\": () => (/* binding */ AbortIncompleteMultipartUploadFilterSensitiveLog),\n/* harmony export */   \"AbortMultipartUploadOutputFilterSensitiveLog\": () => (/* binding */ AbortMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"AbortMultipartUploadRequestFilterSensitiveLog\": () => (/* binding */ AbortMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"AccelerateConfigurationFilterSensitiveLog\": () => (/* binding */ AccelerateConfigurationFilterSensitiveLog),\n/* harmony export */   \"AccessControlPolicyFilterSensitiveLog\": () => (/* binding */ AccessControlPolicyFilterSensitiveLog),\n/* harmony export */   \"AccessControlTranslationFilterSensitiveLog\": () => (/* binding */ AccessControlTranslationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsAndOperatorFilterSensitiveLog\": () => (/* binding */ AnalyticsAndOperatorFilterSensitiveLog),\n/* harmony export */   \"AnalyticsConfigurationFilterSensitiveLog\": () => (/* binding */ AnalyticsConfigurationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsExportDestinationFilterSensitiveLog\": () => (/* binding */ AnalyticsExportDestinationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsFilter\": () => (/* binding */ AnalyticsFilter),\n/* harmony export */   \"AnalyticsFilterFilterSensitiveLog\": () => (/* binding */ AnalyticsFilterFilterSensitiveLog),\n/* harmony export */   \"AnalyticsS3BucketDestinationFilterSensitiveLog\": () => (/* binding */ AnalyticsS3BucketDestinationFilterSensitiveLog),\n/* harmony export */   \"AnalyticsS3ExportFileFormat\": () => (/* binding */ AnalyticsS3ExportFileFormat),\n/* harmony export */   \"ArchiveStatus\": () => (/* binding */ ArchiveStatus),\n/* harmony export */   \"BucketAccelerateStatus\": () => (/* binding */ BucketAccelerateStatus),\n/* harmony export */   \"BucketAlreadyExists\": () => (/* binding */ BucketAlreadyExists),\n/* harmony export */   \"BucketAlreadyOwnedByYou\": () => (/* binding */ BucketAlreadyOwnedByYou),\n/* harmony export */   \"BucketCannedACL\": () => (/* binding */ BucketCannedACL),\n/* harmony export */   \"BucketFilterSensitiveLog\": () => (/* binding */ BucketFilterSensitiveLog),\n/* harmony export */   \"BucketLifecycleConfigurationFilterSensitiveLog\": () => (/* binding */ BucketLifecycleConfigurationFilterSensitiveLog),\n/* harmony export */   \"BucketLocationConstraint\": () => (/* binding */ BucketLocationConstraint),\n/* harmony export */   \"BucketLoggingStatusFilterSensitiveLog\": () => (/* binding */ BucketLoggingStatusFilterSensitiveLog),\n/* harmony export */   \"BucketLogsPermission\": () => (/* binding */ BucketLogsPermission),\n/* harmony export */   \"BucketVersioningStatus\": () => (/* binding */ BucketVersioningStatus),\n/* harmony export */   \"CORSConfigurationFilterSensitiveLog\": () => (/* binding */ CORSConfigurationFilterSensitiveLog),\n/* harmony export */   \"CORSRuleFilterSensitiveLog\": () => (/* binding */ CORSRuleFilterSensitiveLog),\n/* harmony export */   \"ChecksumAlgorithm\": () => (/* binding */ ChecksumAlgorithm),\n/* harmony export */   \"ChecksumFilterSensitiveLog\": () => (/* binding */ ChecksumFilterSensitiveLog),\n/* harmony export */   \"ChecksumMode\": () => (/* binding */ ChecksumMode),\n/* harmony export */   \"CommonPrefixFilterSensitiveLog\": () => (/* binding */ CommonPrefixFilterSensitiveLog),\n/* harmony export */   \"CompleteMultipartUploadOutputFilterSensitiveLog\": () => (/* binding */ CompleteMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"CompleteMultipartUploadRequestFilterSensitiveLog\": () => (/* binding */ CompleteMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"CompletedMultipartUploadFilterSensitiveLog\": () => (/* binding */ CompletedMultipartUploadFilterSensitiveLog),\n/* harmony export */   \"CompletedPartFilterSensitiveLog\": () => (/* binding */ CompletedPartFilterSensitiveLog),\n/* harmony export */   \"ConditionFilterSensitiveLog\": () => (/* binding */ ConditionFilterSensitiveLog),\n/* harmony export */   \"CopyObjectOutputFilterSensitiveLog\": () => (/* binding */ CopyObjectOutputFilterSensitiveLog),\n/* harmony export */   \"CopyObjectRequestFilterSensitiveLog\": () => (/* binding */ CopyObjectRequestFilterSensitiveLog),\n/* harmony export */   \"CopyObjectResultFilterSensitiveLog\": () => (/* binding */ CopyObjectResultFilterSensitiveLog),\n/* harmony export */   \"CreateBucketConfigurationFilterSensitiveLog\": () => (/* binding */ CreateBucketConfigurationFilterSensitiveLog),\n/* harmony export */   \"CreateBucketOutputFilterSensitiveLog\": () => (/* binding */ CreateBucketOutputFilterSensitiveLog),\n/* harmony export */   \"CreateBucketRequestFilterSensitiveLog\": () => (/* binding */ CreateBucketRequestFilterSensitiveLog),\n/* harmony export */   \"CreateMultipartUploadOutputFilterSensitiveLog\": () => (/* binding */ CreateMultipartUploadOutputFilterSensitiveLog),\n/* harmony export */   \"CreateMultipartUploadRequestFilterSensitiveLog\": () => (/* binding */ CreateMultipartUploadRequestFilterSensitiveLog),\n/* harmony export */   \"DefaultRetentionFilterSensitiveLog\": () => (/* binding */ DefaultRetentionFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketCorsRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketEncryptionRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketLifecycleRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketLifecycleRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketPolicyRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketReplicationRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketTaggingRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteBucketWebsiteRequestFilterSensitiveLog\": () => (/* binding */ DeleteBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteFilterSensitiveLog\": () => (/* binding */ DeleteFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerEntryFilterSensitiveLog\": () => (/* binding */ DeleteMarkerEntryFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerReplicationFilterSensitiveLog\": () => (/* binding */ DeleteMarkerReplicationFilterSensitiveLog),\n/* harmony export */   \"DeleteMarkerReplicationStatus\": () => (/* binding */ DeleteMarkerReplicationStatus),\n/* harmony export */   \"DeleteObjectOutputFilterSensitiveLog\": () => (/* binding */ DeleteObjectOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectRequestFilterSensitiveLog\": () => (/* binding */ DeleteObjectRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectTaggingOutputFilterSensitiveLog\": () => (/* binding */ DeleteObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectTaggingRequestFilterSensitiveLog\": () => (/* binding */ DeleteObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectsOutputFilterSensitiveLog\": () => (/* binding */ DeleteObjectsOutputFilterSensitiveLog),\n/* harmony export */   \"DeleteObjectsRequestFilterSensitiveLog\": () => (/* binding */ DeleteObjectsRequestFilterSensitiveLog),\n/* harmony export */   \"DeletePublicAccessBlockRequestFilterSensitiveLog\": () => (/* binding */ DeletePublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"DeletedObjectFilterSensitiveLog\": () => (/* binding */ DeletedObjectFilterSensitiveLog),\n/* harmony export */   \"DestinationFilterSensitiveLog\": () => (/* binding */ DestinationFilterSensitiveLog),\n/* harmony export */   \"EncodingType\": () => (/* binding */ EncodingType),\n/* harmony export */   \"EncryptionConfigurationFilterSensitiveLog\": () => (/* binding */ EncryptionConfigurationFilterSensitiveLog),\n/* harmony export */   \"ErrorDocumentFilterSensitiveLog\": () => (/* binding */ ErrorDocumentFilterSensitiveLog),\n/* harmony export */   \"EventBridgeConfigurationFilterSensitiveLog\": () => (/* binding */ EventBridgeConfigurationFilterSensitiveLog),\n/* harmony export */   \"ExistingObjectReplicationFilterSensitiveLog\": () => (/* binding */ ExistingObjectReplicationFilterSensitiveLog),\n/* harmony export */   \"ExistingObjectReplicationStatus\": () => (/* binding */ ExistingObjectReplicationStatus),\n/* harmony export */   \"ExpirationStatus\": () => (/* binding */ ExpirationStatus),\n/* harmony export */   \"FilterRuleFilterSensitiveLog\": () => (/* binding */ FilterRuleFilterSensitiveLog),\n/* harmony export */   \"FilterRuleName\": () => (/* binding */ FilterRuleName),\n/* harmony export */   \"GetBucketAccelerateConfigurationOutputFilterSensitiveLog\": () => (/* binding */ GetBucketAccelerateConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAccelerateConfigurationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketAccelerateConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketAclOutputFilterSensitiveLog\": () => (/* binding */ GetBucketAclOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAclRequestFilterSensitiveLog\": () => (/* binding */ GetBucketAclRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketAnalyticsConfigurationOutputFilterSensitiveLog\": () => (/* binding */ GetBucketAnalyticsConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketCorsOutputFilterSensitiveLog\": () => (/* binding */ GetBucketCorsOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketCorsRequestFilterSensitiveLog\": () => (/* binding */ GetBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketEncryptionOutputFilterSensitiveLog\": () => (/* binding */ GetBucketEncryptionOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketEncryptionRequestFilterSensitiveLog\": () => (/* binding */ GetBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog\": () => (/* binding */ GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketInventoryConfigurationOutputFilterSensitiveLog\": () => (/* binding */ GetBucketInventoryConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLifecycleConfigurationOutputFilterSensitiveLog\": () => (/* binding */ GetBucketLifecycleConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLifecycleConfigurationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketLifecycleConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLocationOutputFilterSensitiveLog\": () => (/* binding */ GetBucketLocationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLocationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketLocationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketLoggingOutputFilterSensitiveLog\": () => (/* binding */ GetBucketLoggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketLoggingRequestFilterSensitiveLog\": () => (/* binding */ GetBucketLoggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketMetricsConfigurationOutputFilterSensitiveLog\": () => (/* binding */ GetBucketMetricsConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketNotificationConfigurationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketNotificationConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketOwnershipControlsOutputFilterSensitiveLog\": () => (/* binding */ GetBucketOwnershipControlsOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* binding */ GetBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyOutputFilterSensitiveLog\": () => (/* binding */ GetBucketPolicyOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyRequestFilterSensitiveLog\": () => (/* binding */ GetBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyStatusOutputFilterSensitiveLog\": () => (/* binding */ GetBucketPolicyStatusOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketPolicyStatusRequestFilterSensitiveLog\": () => (/* binding */ GetBucketPolicyStatusRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketReplicationOutputFilterSensitiveLog\": () => (/* binding */ GetBucketReplicationOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketReplicationRequestFilterSensitiveLog\": () => (/* binding */ GetBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketRequestPaymentOutputFilterSensitiveLog\": () => (/* binding */ GetBucketRequestPaymentOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketRequestPaymentRequestFilterSensitiveLog\": () => (/* binding */ GetBucketRequestPaymentRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketTaggingOutputFilterSensitiveLog\": () => (/* binding */ GetBucketTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketTaggingRequestFilterSensitiveLog\": () => (/* binding */ GetBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketVersioningOutputFilterSensitiveLog\": () => (/* binding */ GetBucketVersioningOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketVersioningRequestFilterSensitiveLog\": () => (/* binding */ GetBucketVersioningRequestFilterSensitiveLog),\n/* harmony export */   \"GetBucketWebsiteOutputFilterSensitiveLog\": () => (/* binding */ GetBucketWebsiteOutputFilterSensitiveLog),\n/* harmony export */   \"GetBucketWebsiteRequestFilterSensitiveLog\": () => (/* binding */ GetBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectAclOutputFilterSensitiveLog\": () => (/* binding */ GetObjectAclOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectAclRequestFilterSensitiveLog\": () => (/* binding */ GetObjectAclRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesOutputFilterSensitiveLog\": () => (/* binding */ GetObjectAttributesOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesPartsFilterSensitiveLog\": () => (/* binding */ GetObjectAttributesPartsFilterSensitiveLog),\n/* harmony export */   \"GetObjectAttributesRequestFilterSensitiveLog\": () => (/* binding */ GetObjectAttributesRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectLegalHoldOutputFilterSensitiveLog\": () => (/* binding */ GetObjectLegalHoldOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectLegalHoldRequestFilterSensitiveLog\": () => (/* binding */ GetObjectLegalHoldRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectLockConfigurationOutputFilterSensitiveLog\": () => (/* binding */ GetObjectLockConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectLockConfigurationRequestFilterSensitiveLog\": () => (/* binding */ GetObjectLockConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectOutputFilterSensitiveLog\": () => (/* binding */ GetObjectOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectRequestFilterSensitiveLog\": () => (/* binding */ GetObjectRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectRetentionOutputFilterSensitiveLog\": () => (/* binding */ GetObjectRetentionOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectRetentionRequestFilterSensitiveLog\": () => (/* binding */ GetObjectRetentionRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectTaggingOutputFilterSensitiveLog\": () => (/* binding */ GetObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectTaggingRequestFilterSensitiveLog\": () => (/* binding */ GetObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"GetObjectTorrentOutputFilterSensitiveLog\": () => (/* binding */ GetObjectTorrentOutputFilterSensitiveLog),\n/* harmony export */   \"GetObjectTorrentRequestFilterSensitiveLog\": () => (/* binding */ GetObjectTorrentRequestFilterSensitiveLog),\n/* harmony export */   \"GetPublicAccessBlockOutputFilterSensitiveLog\": () => (/* binding */ GetPublicAccessBlockOutputFilterSensitiveLog),\n/* harmony export */   \"GetPublicAccessBlockRequestFilterSensitiveLog\": () => (/* binding */ GetPublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"GrantFilterSensitiveLog\": () => (/* binding */ GrantFilterSensitiveLog),\n/* harmony export */   \"GranteeFilterSensitiveLog\": () => (/* binding */ GranteeFilterSensitiveLog),\n/* harmony export */   \"HeadBucketRequestFilterSensitiveLog\": () => (/* binding */ HeadBucketRequestFilterSensitiveLog),\n/* harmony export */   \"HeadObjectOutputFilterSensitiveLog\": () => (/* binding */ HeadObjectOutputFilterSensitiveLog),\n/* harmony export */   \"HeadObjectRequestFilterSensitiveLog\": () => (/* binding */ HeadObjectRequestFilterSensitiveLog),\n/* harmony export */   \"IndexDocumentFilterSensitiveLog\": () => (/* binding */ IndexDocumentFilterSensitiveLog),\n/* harmony export */   \"InitiatorFilterSensitiveLog\": () => (/* binding */ InitiatorFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringAccessTier\": () => (/* binding */ IntelligentTieringAccessTier),\n/* harmony export */   \"IntelligentTieringAndOperatorFilterSensitiveLog\": () => (/* binding */ IntelligentTieringAndOperatorFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringConfigurationFilterSensitiveLog\": () => (/* binding */ IntelligentTieringConfigurationFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringFilterFilterSensitiveLog\": () => (/* binding */ IntelligentTieringFilterFilterSensitiveLog),\n/* harmony export */   \"IntelligentTieringStatus\": () => (/* binding */ IntelligentTieringStatus),\n/* harmony export */   \"InvalidObjectState\": () => (/* binding */ InvalidObjectState),\n/* harmony export */   \"InventoryConfigurationFilterSensitiveLog\": () => (/* binding */ InventoryConfigurationFilterSensitiveLog),\n/* harmony export */   \"InventoryDestinationFilterSensitiveLog\": () => (/* binding */ InventoryDestinationFilterSensitiveLog),\n/* harmony export */   \"InventoryEncryptionFilterSensitiveLog\": () => (/* binding */ InventoryEncryptionFilterSensitiveLog),\n/* harmony export */   \"InventoryFilterFilterSensitiveLog\": () => (/* binding */ InventoryFilterFilterSensitiveLog),\n/* harmony export */   \"InventoryFormat\": () => (/* binding */ InventoryFormat),\n/* harmony export */   \"InventoryFrequency\": () => (/* binding */ InventoryFrequency),\n/* harmony export */   \"InventoryIncludedObjectVersions\": () => (/* binding */ InventoryIncludedObjectVersions),\n/* harmony export */   \"InventoryOptionalField\": () => (/* binding */ InventoryOptionalField),\n/* harmony export */   \"InventoryS3BucketDestinationFilterSensitiveLog\": () => (/* binding */ InventoryS3BucketDestinationFilterSensitiveLog),\n/* harmony export */   \"InventoryScheduleFilterSensitiveLog\": () => (/* binding */ InventoryScheduleFilterSensitiveLog),\n/* harmony export */   \"LambdaFunctionConfigurationFilterSensitiveLog\": () => (/* binding */ LambdaFunctionConfigurationFilterSensitiveLog),\n/* harmony export */   \"LifecycleExpirationFilterSensitiveLog\": () => (/* binding */ LifecycleExpirationFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleAndOperatorFilterSensitiveLog\": () => (/* binding */ LifecycleRuleAndOperatorFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleFilter\": () => (/* binding */ LifecycleRuleFilter),\n/* harmony export */   \"LifecycleRuleFilterFilterSensitiveLog\": () => (/* binding */ LifecycleRuleFilterFilterSensitiveLog),\n/* harmony export */   \"LifecycleRuleFilterSensitiveLog\": () => (/* binding */ LifecycleRuleFilterSensitiveLog),\n/* harmony export */   \"ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog\": () => (/* binding */ ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog\": () => (/* binding */ ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog\": () => (/* binding */ ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog\": () => (/* binding */ ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketInventoryConfigurationsOutputFilterSensitiveLog\": () => (/* binding */ ListBucketInventoryConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketInventoryConfigurationsRequestFilterSensitiveLog\": () => (/* binding */ ListBucketInventoryConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketMetricsConfigurationsOutputFilterSensitiveLog\": () => (/* binding */ ListBucketMetricsConfigurationsOutputFilterSensitiveLog),\n/* harmony export */   \"ListBucketMetricsConfigurationsRequestFilterSensitiveLog\": () => (/* binding */ ListBucketMetricsConfigurationsRequestFilterSensitiveLog),\n/* harmony export */   \"ListBucketsOutputFilterSensitiveLog\": () => (/* binding */ ListBucketsOutputFilterSensitiveLog),\n/* harmony export */   \"ListMultipartUploadsOutputFilterSensitiveLog\": () => (/* binding */ ListMultipartUploadsOutputFilterSensitiveLog),\n/* harmony export */   \"ListMultipartUploadsRequestFilterSensitiveLog\": () => (/* binding */ ListMultipartUploadsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectVersionsOutputFilterSensitiveLog\": () => (/* binding */ ListObjectVersionsOutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectVersionsRequestFilterSensitiveLog\": () => (/* binding */ ListObjectVersionsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectsOutputFilterSensitiveLog\": () => (/* binding */ ListObjectsOutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectsRequestFilterSensitiveLog\": () => (/* binding */ ListObjectsRequestFilterSensitiveLog),\n/* harmony export */   \"ListObjectsV2OutputFilterSensitiveLog\": () => (/* binding */ ListObjectsV2OutputFilterSensitiveLog),\n/* harmony export */   \"ListObjectsV2RequestFilterSensitiveLog\": () => (/* binding */ ListObjectsV2RequestFilterSensitiveLog),\n/* harmony export */   \"ListPartsOutputFilterSensitiveLog\": () => (/* binding */ ListPartsOutputFilterSensitiveLog),\n/* harmony export */   \"ListPartsRequestFilterSensitiveLog\": () => (/* binding */ ListPartsRequestFilterSensitiveLog),\n/* harmony export */   \"LoggingEnabledFilterSensitiveLog\": () => (/* binding */ LoggingEnabledFilterSensitiveLog),\n/* harmony export */   \"MFADelete\": () => (/* binding */ MFADelete),\n/* harmony export */   \"MFADeleteStatus\": () => (/* binding */ MFADeleteStatus),\n/* harmony export */   \"MetadataDirective\": () => (/* binding */ MetadataDirective),\n/* harmony export */   \"MetricsAndOperatorFilterSensitiveLog\": () => (/* binding */ MetricsAndOperatorFilterSensitiveLog),\n/* harmony export */   \"MetricsConfigurationFilterSensitiveLog\": () => (/* binding */ MetricsConfigurationFilterSensitiveLog),\n/* harmony export */   \"MetricsFilter\": () => (/* binding */ MetricsFilter),\n/* harmony export */   \"MetricsFilterFilterSensitiveLog\": () => (/* binding */ MetricsFilterFilterSensitiveLog),\n/* harmony export */   \"MetricsFilterSensitiveLog\": () => (/* binding */ MetricsFilterSensitiveLog),\n/* harmony export */   \"MetricsStatus\": () => (/* binding */ MetricsStatus),\n/* harmony export */   \"MultipartUploadFilterSensitiveLog\": () => (/* binding */ MultipartUploadFilterSensitiveLog),\n/* harmony export */   \"NoSuchBucket\": () => (/* binding */ NoSuchBucket),\n/* harmony export */   \"NoSuchKey\": () => (/* binding */ NoSuchKey),\n/* harmony export */   \"NoSuchUpload\": () => (/* binding */ NoSuchUpload),\n/* harmony export */   \"NoncurrentVersionExpirationFilterSensitiveLog\": () => (/* binding */ NoncurrentVersionExpirationFilterSensitiveLog),\n/* harmony export */   \"NoncurrentVersionTransitionFilterSensitiveLog\": () => (/* binding */ NoncurrentVersionTransitionFilterSensitiveLog),\n/* harmony export */   \"NotFound\": () => (/* binding */ NotFound),\n/* harmony export */   \"NotificationConfigurationFilterFilterSensitiveLog\": () => (/* binding */ NotificationConfigurationFilterFilterSensitiveLog),\n/* harmony export */   \"NotificationConfigurationFilterSensitiveLog\": () => (/* binding */ NotificationConfigurationFilterSensitiveLog),\n/* harmony export */   \"ObjectAttributes\": () => (/* binding */ ObjectAttributes),\n/* harmony export */   \"ObjectCannedACL\": () => (/* binding */ ObjectCannedACL),\n/* harmony export */   \"ObjectIdentifierFilterSensitiveLog\": () => (/* binding */ ObjectIdentifierFilterSensitiveLog),\n/* harmony export */   \"ObjectLockConfigurationFilterSensitiveLog\": () => (/* binding */ ObjectLockConfigurationFilterSensitiveLog),\n/* harmony export */   \"ObjectLockEnabled\": () => (/* binding */ ObjectLockEnabled),\n/* harmony export */   \"ObjectLockLegalHoldFilterSensitiveLog\": () => (/* binding */ ObjectLockLegalHoldFilterSensitiveLog),\n/* harmony export */   \"ObjectLockLegalHoldStatus\": () => (/* binding */ ObjectLockLegalHoldStatus),\n/* harmony export */   \"ObjectLockMode\": () => (/* binding */ ObjectLockMode),\n/* harmony export */   \"ObjectLockRetentionFilterSensitiveLog\": () => (/* binding */ ObjectLockRetentionFilterSensitiveLog),\n/* harmony export */   \"ObjectLockRetentionMode\": () => (/* binding */ ObjectLockRetentionMode),\n/* harmony export */   \"ObjectLockRuleFilterSensitiveLog\": () => (/* binding */ ObjectLockRuleFilterSensitiveLog),\n/* harmony export */   \"ObjectNotInActiveTierError\": () => (/* binding */ ObjectNotInActiveTierError),\n/* harmony export */   \"ObjectOwnership\": () => (/* binding */ ObjectOwnership),\n/* harmony export */   \"ObjectPartFilterSensitiveLog\": () => (/* binding */ ObjectPartFilterSensitiveLog),\n/* harmony export */   \"ObjectStorageClass\": () => (/* binding */ ObjectStorageClass),\n/* harmony export */   \"ObjectVersionFilterSensitiveLog\": () => (/* binding */ ObjectVersionFilterSensitiveLog),\n/* harmony export */   \"ObjectVersionStorageClass\": () => (/* binding */ ObjectVersionStorageClass),\n/* harmony export */   \"OwnerFilterSensitiveLog\": () => (/* binding */ OwnerFilterSensitiveLog),\n/* harmony export */   \"OwnerOverride\": () => (/* binding */ OwnerOverride),\n/* harmony export */   \"OwnershipControlsFilterSensitiveLog\": () => (/* binding */ OwnershipControlsFilterSensitiveLog),\n/* harmony export */   \"OwnershipControlsRuleFilterSensitiveLog\": () => (/* binding */ OwnershipControlsRuleFilterSensitiveLog),\n/* harmony export */   \"PartFilterSensitiveLog\": () => (/* binding */ PartFilterSensitiveLog),\n/* harmony export */   \"Payer\": () => (/* binding */ Payer),\n/* harmony export */   \"Permission\": () => (/* binding */ Permission),\n/* harmony export */   \"PolicyStatusFilterSensitiveLog\": () => (/* binding */ PolicyStatusFilterSensitiveLog),\n/* harmony export */   \"Protocol\": () => (/* binding */ Protocol),\n/* harmony export */   \"PublicAccessBlockConfigurationFilterSensitiveLog\": () => (/* binding */ PublicAccessBlockConfigurationFilterSensitiveLog),\n/* harmony export */   \"PutBucketAccelerateConfigurationRequestFilterSensitiveLog\": () => (/* binding */ PutBucketAccelerateConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketAclRequestFilterSensitiveLog\": () => (/* binding */ PutBucketAclRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketAnalyticsConfigurationRequestFilterSensitiveLog\": () => (/* binding */ PutBucketAnalyticsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketCorsRequestFilterSensitiveLog\": () => (/* binding */ PutBucketCorsRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketEncryptionRequestFilterSensitiveLog\": () => (/* binding */ PutBucketEncryptionRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog\": () => (/* binding */ PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketInventoryConfigurationRequestFilterSensitiveLog\": () => (/* binding */ PutBucketInventoryConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketLifecycleConfigurationRequestFilterSensitiveLog\": () => (/* binding */ PutBucketLifecycleConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketLoggingRequestFilterSensitiveLog\": () => (/* binding */ PutBucketLoggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketMetricsConfigurationRequestFilterSensitiveLog\": () => (/* binding */ PutBucketMetricsConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketNotificationConfigurationRequestFilterSensitiveLog\": () => (/* binding */ PutBucketNotificationConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketOwnershipControlsRequestFilterSensitiveLog\": () => (/* binding */ PutBucketOwnershipControlsRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketPolicyRequestFilterSensitiveLog\": () => (/* binding */ PutBucketPolicyRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketReplicationRequestFilterSensitiveLog\": () => (/* binding */ PutBucketReplicationRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketRequestPaymentRequestFilterSensitiveLog\": () => (/* binding */ PutBucketRequestPaymentRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketTaggingRequestFilterSensitiveLog\": () => (/* binding */ PutBucketTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketVersioningRequestFilterSensitiveLog\": () => (/* binding */ PutBucketVersioningRequestFilterSensitiveLog),\n/* harmony export */   \"PutBucketWebsiteRequestFilterSensitiveLog\": () => (/* binding */ PutBucketWebsiteRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectAclOutputFilterSensitiveLog\": () => (/* binding */ PutObjectAclOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectAclRequestFilterSensitiveLog\": () => (/* binding */ PutObjectAclRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectLegalHoldOutputFilterSensitiveLog\": () => (/* binding */ PutObjectLegalHoldOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectLegalHoldRequestFilterSensitiveLog\": () => (/* binding */ PutObjectLegalHoldRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectLockConfigurationOutputFilterSensitiveLog\": () => (/* binding */ PutObjectLockConfigurationOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectLockConfigurationRequestFilterSensitiveLog\": () => (/* binding */ PutObjectLockConfigurationRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectOutputFilterSensitiveLog\": () => (/* binding */ PutObjectOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectRequestFilterSensitiveLog\": () => (/* binding */ PutObjectRequestFilterSensitiveLog),\n/* harmony export */   \"QueueConfigurationFilterSensitiveLog\": () => (/* binding */ QueueConfigurationFilterSensitiveLog),\n/* harmony export */   \"RedirectAllRequestsToFilterSensitiveLog\": () => (/* binding */ RedirectAllRequestsToFilterSensitiveLog),\n/* harmony export */   \"RedirectFilterSensitiveLog\": () => (/* binding */ RedirectFilterSensitiveLog),\n/* harmony export */   \"ReplicaModificationsFilterSensitiveLog\": () => (/* binding */ ReplicaModificationsFilterSensitiveLog),\n/* harmony export */   \"ReplicaModificationsStatus\": () => (/* binding */ ReplicaModificationsStatus),\n/* harmony export */   \"ReplicationConfigurationFilterSensitiveLog\": () => (/* binding */ ReplicationConfigurationFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleAndOperatorFilterSensitiveLog\": () => (/* binding */ ReplicationRuleAndOperatorFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleFilter\": () => (/* binding */ ReplicationRuleFilter),\n/* harmony export */   \"ReplicationRuleFilterFilterSensitiveLog\": () => (/* binding */ ReplicationRuleFilterFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleFilterSensitiveLog\": () => (/* binding */ ReplicationRuleFilterSensitiveLog),\n/* harmony export */   \"ReplicationRuleStatus\": () => (/* binding */ ReplicationRuleStatus),\n/* harmony export */   \"ReplicationStatus\": () => (/* binding */ ReplicationStatus),\n/* harmony export */   \"ReplicationTimeFilterSensitiveLog\": () => (/* binding */ ReplicationTimeFilterSensitiveLog),\n/* harmony export */   \"ReplicationTimeStatus\": () => (/* binding */ ReplicationTimeStatus),\n/* harmony export */   \"ReplicationTimeValueFilterSensitiveLog\": () => (/* binding */ ReplicationTimeValueFilterSensitiveLog),\n/* harmony export */   \"RequestCharged\": () => (/* binding */ RequestCharged),\n/* harmony export */   \"RequestPayer\": () => (/* binding */ RequestPayer),\n/* harmony export */   \"RequestPaymentConfigurationFilterSensitiveLog\": () => (/* binding */ RequestPaymentConfigurationFilterSensitiveLog),\n/* harmony export */   \"RoutingRuleFilterSensitiveLog\": () => (/* binding */ RoutingRuleFilterSensitiveLog),\n/* harmony export */   \"S3KeyFilterFilterSensitiveLog\": () => (/* binding */ S3KeyFilterFilterSensitiveLog),\n/* harmony export */   \"SSEKMSFilterSensitiveLog\": () => (/* binding */ SSEKMSFilterSensitiveLog),\n/* harmony export */   \"SSES3FilterSensitiveLog\": () => (/* binding */ SSES3FilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryption\": () => (/* binding */ ServerSideEncryption),\n/* harmony export */   \"ServerSideEncryptionByDefaultFilterSensitiveLog\": () => (/* binding */ ServerSideEncryptionByDefaultFilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryptionConfigurationFilterSensitiveLog\": () => (/* binding */ ServerSideEncryptionConfigurationFilterSensitiveLog),\n/* harmony export */   \"ServerSideEncryptionRuleFilterSensitiveLog\": () => (/* binding */ ServerSideEncryptionRuleFilterSensitiveLog),\n/* harmony export */   \"SourceSelectionCriteriaFilterSensitiveLog\": () => (/* binding */ SourceSelectionCriteriaFilterSensitiveLog),\n/* harmony export */   \"SseKmsEncryptedObjectsFilterSensitiveLog\": () => (/* binding */ SseKmsEncryptedObjectsFilterSensitiveLog),\n/* harmony export */   \"SseKmsEncryptedObjectsStatus\": () => (/* binding */ SseKmsEncryptedObjectsStatus),\n/* harmony export */   \"StorageClass\": () => (/* binding */ StorageClass),\n/* harmony export */   \"StorageClassAnalysisDataExportFilterSensitiveLog\": () => (/* binding */ StorageClassAnalysisDataExportFilterSensitiveLog),\n/* harmony export */   \"StorageClassAnalysisFilterSensitiveLog\": () => (/* binding */ StorageClassAnalysisFilterSensitiveLog),\n/* harmony export */   \"StorageClassAnalysisSchemaVersion\": () => (/* binding */ StorageClassAnalysisSchemaVersion),\n/* harmony export */   \"TagFilterSensitiveLog\": () => (/* binding */ TagFilterSensitiveLog),\n/* harmony export */   \"TaggingDirective\": () => (/* binding */ TaggingDirective),\n/* harmony export */   \"TaggingFilterSensitiveLog\": () => (/* binding */ TaggingFilterSensitiveLog),\n/* harmony export */   \"TargetGrantFilterSensitiveLog\": () => (/* binding */ TargetGrantFilterSensitiveLog),\n/* harmony export */   \"TieringFilterSensitiveLog\": () => (/* binding */ TieringFilterSensitiveLog),\n/* harmony export */   \"TopicConfigurationFilterSensitiveLog\": () => (/* binding */ TopicConfigurationFilterSensitiveLog),\n/* harmony export */   \"TransitionFilterSensitiveLog\": () => (/* binding */ TransitionFilterSensitiveLog),\n/* harmony export */   \"TransitionStorageClass\": () => (/* binding */ TransitionStorageClass),\n/* harmony export */   \"Type\": () => (/* binding */ Type),\n/* harmony export */   \"VersioningConfigurationFilterSensitiveLog\": () => (/* binding */ VersioningConfigurationFilterSensitiveLog),\n/* harmony export */   \"WebsiteConfigurationFilterSensitiveLog\": () => (/* binding */ WebsiteConfigurationFilterSensitiveLog),\n/* harmony export */   \"_ErrorFilterSensitiveLog\": () => (/* binding */ _ErrorFilterSensitiveLog),\n/* harmony export */   \"_ObjectFilterSensitiveLog\": () => (/* binding */ _ObjectFilterSensitiveLog)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./S3ServiceException */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js\");\n\n\nvar RequestCharged;\n(function (RequestCharged) {\n    RequestCharged[\"requester\"] = \"requester\";\n})(RequestCharged || (RequestCharged = {}));\nvar RequestPayer;\n(function (RequestPayer) {\n    RequestPayer[\"requester\"] = \"requester\";\n})(RequestPayer || (RequestPayer = {}));\nclass NoSuchUpload extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"NoSuchUpload\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"NoSuchUpload\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, NoSuchUpload.prototype);\n    }\n}\nvar BucketAccelerateStatus;\n(function (BucketAccelerateStatus) {\n    BucketAccelerateStatus[\"Enabled\"] = \"Enabled\";\n    BucketAccelerateStatus[\"Suspended\"] = \"Suspended\";\n})(BucketAccelerateStatus || (BucketAccelerateStatus = {}));\nvar Type;\n(function (Type) {\n    Type[\"AmazonCustomerByEmail\"] = \"AmazonCustomerByEmail\";\n    Type[\"CanonicalUser\"] = \"CanonicalUser\";\n    Type[\"Group\"] = \"Group\";\n})(Type || (Type = {}));\nvar Permission;\n(function (Permission) {\n    Permission[\"FULL_CONTROL\"] = \"FULL_CONTROL\";\n    Permission[\"READ\"] = \"READ\";\n    Permission[\"READ_ACP\"] = \"READ_ACP\";\n    Permission[\"WRITE\"] = \"WRITE\";\n    Permission[\"WRITE_ACP\"] = \"WRITE_ACP\";\n})(Permission || (Permission = {}));\nvar OwnerOverride;\n(function (OwnerOverride) {\n    OwnerOverride[\"Destination\"] = \"Destination\";\n})(OwnerOverride || (OwnerOverride = {}));\nvar ServerSideEncryption;\n(function (ServerSideEncryption) {\n    ServerSideEncryption[\"AES256\"] = \"AES256\";\n    ServerSideEncryption[\"aws_kms\"] = \"aws:kms\";\n})(ServerSideEncryption || (ServerSideEncryption = {}));\nvar ObjectCannedACL;\n(function (ObjectCannedACL) {\n    ObjectCannedACL[\"authenticated_read\"] = \"authenticated-read\";\n    ObjectCannedACL[\"aws_exec_read\"] = \"aws-exec-read\";\n    ObjectCannedACL[\"bucket_owner_full_control\"] = \"bucket-owner-full-control\";\n    ObjectCannedACL[\"bucket_owner_read\"] = \"bucket-owner-read\";\n    ObjectCannedACL[\"private\"] = \"private\";\n    ObjectCannedACL[\"public_read\"] = \"public-read\";\n    ObjectCannedACL[\"public_read_write\"] = \"public-read-write\";\n})(ObjectCannedACL || (ObjectCannedACL = {}));\nvar ChecksumAlgorithm;\n(function (ChecksumAlgorithm) {\n    ChecksumAlgorithm[\"CRC32\"] = \"CRC32\";\n    ChecksumAlgorithm[\"CRC32C\"] = \"CRC32C\";\n    ChecksumAlgorithm[\"SHA1\"] = \"SHA1\";\n    ChecksumAlgorithm[\"SHA256\"] = \"SHA256\";\n})(ChecksumAlgorithm || (ChecksumAlgorithm = {}));\nvar MetadataDirective;\n(function (MetadataDirective) {\n    MetadataDirective[\"COPY\"] = \"COPY\";\n    MetadataDirective[\"REPLACE\"] = \"REPLACE\";\n})(MetadataDirective || (MetadataDirective = {}));\nvar ObjectLockLegalHoldStatus;\n(function (ObjectLockLegalHoldStatus) {\n    ObjectLockLegalHoldStatus[\"OFF\"] = \"OFF\";\n    ObjectLockLegalHoldStatus[\"ON\"] = \"ON\";\n})(ObjectLockLegalHoldStatus || (ObjectLockLegalHoldStatus = {}));\nvar ObjectLockMode;\n(function (ObjectLockMode) {\n    ObjectLockMode[\"COMPLIANCE\"] = \"COMPLIANCE\";\n    ObjectLockMode[\"GOVERNANCE\"] = \"GOVERNANCE\";\n})(ObjectLockMode || (ObjectLockMode = {}));\nvar StorageClass;\n(function (StorageClass) {\n    StorageClass[\"DEEP_ARCHIVE\"] = \"DEEP_ARCHIVE\";\n    StorageClass[\"GLACIER\"] = \"GLACIER\";\n    StorageClass[\"GLACIER_IR\"] = \"GLACIER_IR\";\n    StorageClass[\"INTELLIGENT_TIERING\"] = \"INTELLIGENT_TIERING\";\n    StorageClass[\"ONEZONE_IA\"] = \"ONEZONE_IA\";\n    StorageClass[\"OUTPOSTS\"] = \"OUTPOSTS\";\n    StorageClass[\"REDUCED_REDUNDANCY\"] = \"REDUCED_REDUNDANCY\";\n    StorageClass[\"STANDARD\"] = \"STANDARD\";\n    StorageClass[\"STANDARD_IA\"] = \"STANDARD_IA\";\n})(StorageClass || (StorageClass = {}));\nvar TaggingDirective;\n(function (TaggingDirective) {\n    TaggingDirective[\"COPY\"] = \"COPY\";\n    TaggingDirective[\"REPLACE\"] = \"REPLACE\";\n})(TaggingDirective || (TaggingDirective = {}));\nclass ObjectNotInActiveTierError extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"ObjectNotInActiveTierError\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ObjectNotInActiveTierError\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ObjectNotInActiveTierError.prototype);\n    }\n}\nclass BucketAlreadyExists extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"BucketAlreadyExists\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"BucketAlreadyExists\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, BucketAlreadyExists.prototype);\n    }\n}\nclass BucketAlreadyOwnedByYou extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"BucketAlreadyOwnedByYou\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"BucketAlreadyOwnedByYou\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, BucketAlreadyOwnedByYou.prototype);\n    }\n}\nvar BucketCannedACL;\n(function (BucketCannedACL) {\n    BucketCannedACL[\"authenticated_read\"] = \"authenticated-read\";\n    BucketCannedACL[\"private\"] = \"private\";\n    BucketCannedACL[\"public_read\"] = \"public-read\";\n    BucketCannedACL[\"public_read_write\"] = \"public-read-write\";\n})(BucketCannedACL || (BucketCannedACL = {}));\nvar BucketLocationConstraint;\n(function (BucketLocationConstraint) {\n    BucketLocationConstraint[\"EU\"] = \"EU\";\n    BucketLocationConstraint[\"af_south_1\"] = \"af-south-1\";\n    BucketLocationConstraint[\"ap_east_1\"] = \"ap-east-1\";\n    BucketLocationConstraint[\"ap_northeast_1\"] = \"ap-northeast-1\";\n    BucketLocationConstraint[\"ap_northeast_2\"] = \"ap-northeast-2\";\n    BucketLocationConstraint[\"ap_northeast_3\"] = \"ap-northeast-3\";\n    BucketLocationConstraint[\"ap_south_1\"] = \"ap-south-1\";\n    BucketLocationConstraint[\"ap_southeast_1\"] = \"ap-southeast-1\";\n    BucketLocationConstraint[\"ap_southeast_2\"] = \"ap-southeast-2\";\n    BucketLocationConstraint[\"ap_southeast_3\"] = \"ap-southeast-3\";\n    BucketLocationConstraint[\"ca_central_1\"] = \"ca-central-1\";\n    BucketLocationConstraint[\"cn_north_1\"] = \"cn-north-1\";\n    BucketLocationConstraint[\"cn_northwest_1\"] = \"cn-northwest-1\";\n    BucketLocationConstraint[\"eu_central_1\"] = \"eu-central-1\";\n    BucketLocationConstraint[\"eu_north_1\"] = \"eu-north-1\";\n    BucketLocationConstraint[\"eu_south_1\"] = \"eu-south-1\";\n    BucketLocationConstraint[\"eu_west_1\"] = \"eu-west-1\";\n    BucketLocationConstraint[\"eu_west_2\"] = \"eu-west-2\";\n    BucketLocationConstraint[\"eu_west_3\"] = \"eu-west-3\";\n    BucketLocationConstraint[\"me_south_1\"] = \"me-south-1\";\n    BucketLocationConstraint[\"sa_east_1\"] = \"sa-east-1\";\n    BucketLocationConstraint[\"us_east_2\"] = \"us-east-2\";\n    BucketLocationConstraint[\"us_gov_east_1\"] = \"us-gov-east-1\";\n    BucketLocationConstraint[\"us_gov_west_1\"] = \"us-gov-west-1\";\n    BucketLocationConstraint[\"us_west_1\"] = \"us-west-1\";\n    BucketLocationConstraint[\"us_west_2\"] = \"us-west-2\";\n})(BucketLocationConstraint || (BucketLocationConstraint = {}));\nvar ObjectOwnership;\n(function (ObjectOwnership) {\n    ObjectOwnership[\"BucketOwnerEnforced\"] = \"BucketOwnerEnforced\";\n    ObjectOwnership[\"BucketOwnerPreferred\"] = \"BucketOwnerPreferred\";\n    ObjectOwnership[\"ObjectWriter\"] = \"ObjectWriter\";\n})(ObjectOwnership || (ObjectOwnership = {}));\nvar AnalyticsFilter;\n(function (AnalyticsFilter) {\n    AnalyticsFilter.visit = (value, visitor) => {\n        if (value.Prefix !== undefined)\n            return visitor.Prefix(value.Prefix);\n        if (value.Tag !== undefined)\n            return visitor.Tag(value.Tag);\n        if (value.And !== undefined)\n            return visitor.And(value.And);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(AnalyticsFilter || (AnalyticsFilter = {}));\nvar AnalyticsS3ExportFileFormat;\n(function (AnalyticsS3ExportFileFormat) {\n    AnalyticsS3ExportFileFormat[\"CSV\"] = \"CSV\";\n})(AnalyticsS3ExportFileFormat || (AnalyticsS3ExportFileFormat = {}));\nvar StorageClassAnalysisSchemaVersion;\n(function (StorageClassAnalysisSchemaVersion) {\n    StorageClassAnalysisSchemaVersion[\"V_1\"] = \"V_1\";\n})(StorageClassAnalysisSchemaVersion || (StorageClassAnalysisSchemaVersion = {}));\nvar IntelligentTieringStatus;\n(function (IntelligentTieringStatus) {\n    IntelligentTieringStatus[\"Disabled\"] = \"Disabled\";\n    IntelligentTieringStatus[\"Enabled\"] = \"Enabled\";\n})(IntelligentTieringStatus || (IntelligentTieringStatus = {}));\nvar IntelligentTieringAccessTier;\n(function (IntelligentTieringAccessTier) {\n    IntelligentTieringAccessTier[\"ARCHIVE_ACCESS\"] = \"ARCHIVE_ACCESS\";\n    IntelligentTieringAccessTier[\"DEEP_ARCHIVE_ACCESS\"] = \"DEEP_ARCHIVE_ACCESS\";\n})(IntelligentTieringAccessTier || (IntelligentTieringAccessTier = {}));\nvar InventoryFormat;\n(function (InventoryFormat) {\n    InventoryFormat[\"CSV\"] = \"CSV\";\n    InventoryFormat[\"ORC\"] = \"ORC\";\n    InventoryFormat[\"Parquet\"] = \"Parquet\";\n})(InventoryFormat || (InventoryFormat = {}));\nvar InventoryIncludedObjectVersions;\n(function (InventoryIncludedObjectVersions) {\n    InventoryIncludedObjectVersions[\"All\"] = \"All\";\n    InventoryIncludedObjectVersions[\"Current\"] = \"Current\";\n})(InventoryIncludedObjectVersions || (InventoryIncludedObjectVersions = {}));\nvar InventoryOptionalField;\n(function (InventoryOptionalField) {\n    InventoryOptionalField[\"BucketKeyStatus\"] = \"BucketKeyStatus\";\n    InventoryOptionalField[\"ChecksumAlgorithm\"] = \"ChecksumAlgorithm\";\n    InventoryOptionalField[\"ETag\"] = \"ETag\";\n    InventoryOptionalField[\"EncryptionStatus\"] = \"EncryptionStatus\";\n    InventoryOptionalField[\"IntelligentTieringAccessTier\"] = \"IntelligentTieringAccessTier\";\n    InventoryOptionalField[\"IsMultipartUploaded\"] = \"IsMultipartUploaded\";\n    InventoryOptionalField[\"LastModifiedDate\"] = \"LastModifiedDate\";\n    InventoryOptionalField[\"ObjectLockLegalHoldStatus\"] = \"ObjectLockLegalHoldStatus\";\n    InventoryOptionalField[\"ObjectLockMode\"] = \"ObjectLockMode\";\n    InventoryOptionalField[\"ObjectLockRetainUntilDate\"] = \"ObjectLockRetainUntilDate\";\n    InventoryOptionalField[\"ReplicationStatus\"] = \"ReplicationStatus\";\n    InventoryOptionalField[\"Size\"] = \"Size\";\n    InventoryOptionalField[\"StorageClass\"] = \"StorageClass\";\n})(InventoryOptionalField || (InventoryOptionalField = {}));\nvar InventoryFrequency;\n(function (InventoryFrequency) {\n    InventoryFrequency[\"Daily\"] = \"Daily\";\n    InventoryFrequency[\"Weekly\"] = \"Weekly\";\n})(InventoryFrequency || (InventoryFrequency = {}));\nvar LifecycleRuleFilter;\n(function (LifecycleRuleFilter) {\n    LifecycleRuleFilter.visit = (value, visitor) => {\n        if (value.Prefix !== undefined)\n            return visitor.Prefix(value.Prefix);\n        if (value.Tag !== undefined)\n            return visitor.Tag(value.Tag);\n        if (value.ObjectSizeGreaterThan !== undefined)\n            return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);\n        if (value.ObjectSizeLessThan !== undefined)\n            return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);\n        if (value.And !== undefined)\n            return visitor.And(value.And);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(LifecycleRuleFilter || (LifecycleRuleFilter = {}));\nvar TransitionStorageClass;\n(function (TransitionStorageClass) {\n    TransitionStorageClass[\"DEEP_ARCHIVE\"] = \"DEEP_ARCHIVE\";\n    TransitionStorageClass[\"GLACIER\"] = \"GLACIER\";\n    TransitionStorageClass[\"GLACIER_IR\"] = \"GLACIER_IR\";\n    TransitionStorageClass[\"INTELLIGENT_TIERING\"] = \"INTELLIGENT_TIERING\";\n    TransitionStorageClass[\"ONEZONE_IA\"] = \"ONEZONE_IA\";\n    TransitionStorageClass[\"STANDARD_IA\"] = \"STANDARD_IA\";\n})(TransitionStorageClass || (TransitionStorageClass = {}));\nvar ExpirationStatus;\n(function (ExpirationStatus) {\n    ExpirationStatus[\"Disabled\"] = \"Disabled\";\n    ExpirationStatus[\"Enabled\"] = \"Enabled\";\n})(ExpirationStatus || (ExpirationStatus = {}));\nvar BucketLogsPermission;\n(function (BucketLogsPermission) {\n    BucketLogsPermission[\"FULL_CONTROL\"] = \"FULL_CONTROL\";\n    BucketLogsPermission[\"READ\"] = \"READ\";\n    BucketLogsPermission[\"WRITE\"] = \"WRITE\";\n})(BucketLogsPermission || (BucketLogsPermission = {}));\nvar MetricsFilter;\n(function (MetricsFilter) {\n    MetricsFilter.visit = (value, visitor) => {\n        if (value.Prefix !== undefined)\n            return visitor.Prefix(value.Prefix);\n        if (value.Tag !== undefined)\n            return visitor.Tag(value.Tag);\n        if (value.AccessPointArn !== undefined)\n            return visitor.AccessPointArn(value.AccessPointArn);\n        if (value.And !== undefined)\n            return visitor.And(value.And);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(MetricsFilter || (MetricsFilter = {}));\nvar FilterRuleName;\n(function (FilterRuleName) {\n    FilterRuleName[\"prefix\"] = \"prefix\";\n    FilterRuleName[\"suffix\"] = \"suffix\";\n})(FilterRuleName || (FilterRuleName = {}));\nvar DeleteMarkerReplicationStatus;\n(function (DeleteMarkerReplicationStatus) {\n    DeleteMarkerReplicationStatus[\"Disabled\"] = \"Disabled\";\n    DeleteMarkerReplicationStatus[\"Enabled\"] = \"Enabled\";\n})(DeleteMarkerReplicationStatus || (DeleteMarkerReplicationStatus = {}));\nvar MetricsStatus;\n(function (MetricsStatus) {\n    MetricsStatus[\"Disabled\"] = \"Disabled\";\n    MetricsStatus[\"Enabled\"] = \"Enabled\";\n})(MetricsStatus || (MetricsStatus = {}));\nvar ReplicationTimeStatus;\n(function (ReplicationTimeStatus) {\n    ReplicationTimeStatus[\"Disabled\"] = \"Disabled\";\n    ReplicationTimeStatus[\"Enabled\"] = \"Enabled\";\n})(ReplicationTimeStatus || (ReplicationTimeStatus = {}));\nvar ExistingObjectReplicationStatus;\n(function (ExistingObjectReplicationStatus) {\n    ExistingObjectReplicationStatus[\"Disabled\"] = \"Disabled\";\n    ExistingObjectReplicationStatus[\"Enabled\"] = \"Enabled\";\n})(ExistingObjectReplicationStatus || (ExistingObjectReplicationStatus = {}));\nvar ReplicationRuleFilter;\n(function (ReplicationRuleFilter) {\n    ReplicationRuleFilter.visit = (value, visitor) => {\n        if (value.Prefix !== undefined)\n            return visitor.Prefix(value.Prefix);\n        if (value.Tag !== undefined)\n            return visitor.Tag(value.Tag);\n        if (value.And !== undefined)\n            return visitor.And(value.And);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(ReplicationRuleFilter || (ReplicationRuleFilter = {}));\nvar ReplicaModificationsStatus;\n(function (ReplicaModificationsStatus) {\n    ReplicaModificationsStatus[\"Disabled\"] = \"Disabled\";\n    ReplicaModificationsStatus[\"Enabled\"] = \"Enabled\";\n})(ReplicaModificationsStatus || (ReplicaModificationsStatus = {}));\nvar SseKmsEncryptedObjectsStatus;\n(function (SseKmsEncryptedObjectsStatus) {\n    SseKmsEncryptedObjectsStatus[\"Disabled\"] = \"Disabled\";\n    SseKmsEncryptedObjectsStatus[\"Enabled\"] = \"Enabled\";\n})(SseKmsEncryptedObjectsStatus || (SseKmsEncryptedObjectsStatus = {}));\nvar ReplicationRuleStatus;\n(function (ReplicationRuleStatus) {\n    ReplicationRuleStatus[\"Disabled\"] = \"Disabled\";\n    ReplicationRuleStatus[\"Enabled\"] = \"Enabled\";\n})(ReplicationRuleStatus || (ReplicationRuleStatus = {}));\nvar Payer;\n(function (Payer) {\n    Payer[\"BucketOwner\"] = \"BucketOwner\";\n    Payer[\"Requester\"] = \"Requester\";\n})(Payer || (Payer = {}));\nvar MFADeleteStatus;\n(function (MFADeleteStatus) {\n    MFADeleteStatus[\"Disabled\"] = \"Disabled\";\n    MFADeleteStatus[\"Enabled\"] = \"Enabled\";\n})(MFADeleteStatus || (MFADeleteStatus = {}));\nvar BucketVersioningStatus;\n(function (BucketVersioningStatus) {\n    BucketVersioningStatus[\"Enabled\"] = \"Enabled\";\n    BucketVersioningStatus[\"Suspended\"] = \"Suspended\";\n})(BucketVersioningStatus || (BucketVersioningStatus = {}));\nvar Protocol;\n(function (Protocol) {\n    Protocol[\"http\"] = \"http\";\n    Protocol[\"https\"] = \"https\";\n})(Protocol || (Protocol = {}));\nvar ReplicationStatus;\n(function (ReplicationStatus) {\n    ReplicationStatus[\"COMPLETE\"] = \"COMPLETE\";\n    ReplicationStatus[\"FAILED\"] = \"FAILED\";\n    ReplicationStatus[\"PENDING\"] = \"PENDING\";\n    ReplicationStatus[\"REPLICA\"] = \"REPLICA\";\n})(ReplicationStatus || (ReplicationStatus = {}));\nvar ChecksumMode;\n(function (ChecksumMode) {\n    ChecksumMode[\"ENABLED\"] = \"ENABLED\";\n})(ChecksumMode || (ChecksumMode = {}));\nclass InvalidObjectState extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"InvalidObjectState\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidObjectState\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidObjectState.prototype);\n        this.StorageClass = opts.StorageClass;\n        this.AccessTier = opts.AccessTier;\n    }\n}\nclass NoSuchKey extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"NoSuchKey\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"NoSuchKey\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, NoSuchKey.prototype);\n    }\n}\nvar ObjectAttributes;\n(function (ObjectAttributes) {\n    ObjectAttributes[\"CHECKSUM\"] = \"Checksum\";\n    ObjectAttributes[\"ETAG\"] = \"ETag\";\n    ObjectAttributes[\"OBJECT_PARTS\"] = \"ObjectParts\";\n    ObjectAttributes[\"OBJECT_SIZE\"] = \"ObjectSize\";\n    ObjectAttributes[\"STORAGE_CLASS\"] = \"StorageClass\";\n})(ObjectAttributes || (ObjectAttributes = {}));\nvar ObjectLockEnabled;\n(function (ObjectLockEnabled) {\n    ObjectLockEnabled[\"Enabled\"] = \"Enabled\";\n})(ObjectLockEnabled || (ObjectLockEnabled = {}));\nvar ObjectLockRetentionMode;\n(function (ObjectLockRetentionMode) {\n    ObjectLockRetentionMode[\"COMPLIANCE\"] = \"COMPLIANCE\";\n    ObjectLockRetentionMode[\"GOVERNANCE\"] = \"GOVERNANCE\";\n})(ObjectLockRetentionMode || (ObjectLockRetentionMode = {}));\nclass NotFound extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"NotFound\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"NotFound\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, NotFound.prototype);\n    }\n}\nvar ArchiveStatus;\n(function (ArchiveStatus) {\n    ArchiveStatus[\"ARCHIVE_ACCESS\"] = \"ARCHIVE_ACCESS\";\n    ArchiveStatus[\"DEEP_ARCHIVE_ACCESS\"] = \"DEEP_ARCHIVE_ACCESS\";\n})(ArchiveStatus || (ArchiveStatus = {}));\nvar EncodingType;\n(function (EncodingType) {\n    EncodingType[\"url\"] = \"url\";\n})(EncodingType || (EncodingType = {}));\nvar ObjectStorageClass;\n(function (ObjectStorageClass) {\n    ObjectStorageClass[\"DEEP_ARCHIVE\"] = \"DEEP_ARCHIVE\";\n    ObjectStorageClass[\"GLACIER\"] = \"GLACIER\";\n    ObjectStorageClass[\"GLACIER_IR\"] = \"GLACIER_IR\";\n    ObjectStorageClass[\"INTELLIGENT_TIERING\"] = \"INTELLIGENT_TIERING\";\n    ObjectStorageClass[\"ONEZONE_IA\"] = \"ONEZONE_IA\";\n    ObjectStorageClass[\"OUTPOSTS\"] = \"OUTPOSTS\";\n    ObjectStorageClass[\"REDUCED_REDUNDANCY\"] = \"REDUCED_REDUNDANCY\";\n    ObjectStorageClass[\"STANDARD\"] = \"STANDARD\";\n    ObjectStorageClass[\"STANDARD_IA\"] = \"STANDARD_IA\";\n})(ObjectStorageClass || (ObjectStorageClass = {}));\nclass NoSuchBucket extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"NoSuchBucket\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"NoSuchBucket\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, NoSuchBucket.prototype);\n    }\n}\nvar ObjectVersionStorageClass;\n(function (ObjectVersionStorageClass) {\n    ObjectVersionStorageClass[\"STANDARD\"] = \"STANDARD\";\n})(ObjectVersionStorageClass || (ObjectVersionStorageClass = {}));\nvar MFADelete;\n(function (MFADelete) {\n    MFADelete[\"Disabled\"] = \"Disabled\";\n    MFADelete[\"Enabled\"] = \"Enabled\";\n})(MFADelete || (MFADelete = {}));\nconst AbortIncompleteMultipartUploadFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AbortMultipartUploadOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AbortMultipartUploadRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AccelerateConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GranteeFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GrantFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst OwnerFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AccessControlPolicyFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AccessControlTranslationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CompleteMultipartUploadOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst CompletedPartFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CompletedMultipartUploadFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CompleteMultipartUploadRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst CopyObjectResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CopyObjectOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst CopyObjectRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst CreateBucketOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CreateBucketConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CreateBucketRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CreateMultipartUploadOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst CreateMultipartUploadRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst DeleteBucketRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketCorsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketEncryptionRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketLifecycleRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketPolicyRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketReplicationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketTaggingRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteBucketWebsiteRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteObjectOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteObjectRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeletedObjectFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst _ErrorFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteObjectsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ObjectIdentifierFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteObjectsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteObjectTaggingOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteObjectTaggingRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeletePublicAccessBlockRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketAccelerateConfigurationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketAccelerateConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketAclOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketAclRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst TagFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AnalyticsAndOperatorFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AnalyticsFilterFilterSensitiveLog = (obj) => {\n    if (obj.Prefix !== undefined)\n        return { Prefix: obj.Prefix };\n    if (obj.Tag !== undefined)\n        return { Tag: TagFilterSensitiveLog(obj.Tag) };\n    if (obj.And !== undefined)\n        return { And: AnalyticsAndOperatorFilterSensitiveLog(obj.And) };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nconst AnalyticsS3BucketDestinationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AnalyticsExportDestinationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst StorageClassAnalysisDataExportFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst StorageClassAnalysisFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst AnalyticsConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Filter && { Filter: AnalyticsFilterFilterSensitiveLog(obj.Filter) }),\n});\nconst GetBucketAnalyticsConfigurationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AnalyticsConfiguration && {\n        AnalyticsConfiguration: AnalyticsConfigurationFilterSensitiveLog(obj.AnalyticsConfiguration),\n    }),\n});\nconst GetBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CORSRuleFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketCorsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketCorsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ServerSideEncryptionByDefaultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.KMSMasterKeyID && { KMSMasterKeyID: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst ServerSideEncryptionRuleFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.ApplyServerSideEncryptionByDefault && {\n        ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault),\n    }),\n});\nconst ServerSideEncryptionConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRuleFilterSensitiveLog(item)) }),\n});\nconst GetBucketEncryptionOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.ServerSideEncryptionConfiguration && {\n        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration),\n    }),\n});\nconst GetBucketEncryptionRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst IntelligentTieringAndOperatorFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst IntelligentTieringFilterFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst TieringFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst IntelligentTieringConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst SSEKMSFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.KeyId && { KeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst SSES3FilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst InventoryEncryptionFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) }),\n});\nconst InventoryS3BucketDestinationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) }),\n});\nconst InventoryDestinationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.S3BucketDestination && {\n        S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination),\n    }),\n});\nconst InventoryFilterFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst InventoryScheduleFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst InventoryConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) }),\n});\nconst GetBucketInventoryConfigurationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.InventoryConfiguration && {\n        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration),\n    }),\n});\nconst GetBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst LifecycleExpirationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst LifecycleRuleAndOperatorFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst LifecycleRuleFilterFilterSensitiveLog = (obj) => {\n    if (obj.Prefix !== undefined)\n        return { Prefix: obj.Prefix };\n    if (obj.Tag !== undefined)\n        return { Tag: TagFilterSensitiveLog(obj.Tag) };\n    if (obj.ObjectSizeGreaterThan !== undefined)\n        return { ObjectSizeGreaterThan: obj.ObjectSizeGreaterThan };\n    if (obj.ObjectSizeLessThan !== undefined)\n        return { ObjectSizeLessThan: obj.ObjectSizeLessThan };\n    if (obj.And !== undefined)\n        return { And: LifecycleRuleAndOperatorFilterSensitiveLog(obj.And) };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nconst NoncurrentVersionExpirationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst NoncurrentVersionTransitionFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst TransitionFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst LifecycleRuleFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Filter && { Filter: LifecycleRuleFilterFilterSensitiveLog(obj.Filter) }),\n});\nconst GetBucketLifecycleConfigurationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Rules && { Rules: obj.Rules.map((item) => LifecycleRuleFilterSensitiveLog(item)) }),\n});\nconst GetBucketLifecycleConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketLocationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketLocationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst TargetGrantFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst LoggingEnabledFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketLoggingOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketLoggingRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst MetricsAndOperatorFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst MetricsFilterFilterSensitiveLog = (obj) => {\n    if (obj.Prefix !== undefined)\n        return { Prefix: obj.Prefix };\n    if (obj.Tag !== undefined)\n        return { Tag: TagFilterSensitiveLog(obj.Tag) };\n    if (obj.AccessPointArn !== undefined)\n        return { AccessPointArn: obj.AccessPointArn };\n    if (obj.And !== undefined)\n        return { And: MetricsAndOperatorFilterSensitiveLog(obj.And) };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nconst MetricsConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Filter && { Filter: MetricsFilterFilterSensitiveLog(obj.Filter) }),\n});\nconst GetBucketMetricsConfigurationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.MetricsConfiguration && {\n        MetricsConfiguration: MetricsConfigurationFilterSensitiveLog(obj.MetricsConfiguration),\n    }),\n});\nconst GetBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketNotificationConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst EventBridgeConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst FilterRuleFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst S3KeyFilterFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst NotificationConfigurationFilterFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst LambdaFunctionConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst QueueConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst TopicConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst NotificationConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst OwnershipControlsRuleFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst OwnershipControlsFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketOwnershipControlsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketPolicyOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketPolicyRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PolicyStatusFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketPolicyStatusOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketPolicyStatusRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteMarkerReplicationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst EncryptionConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ReplicationTimeValueFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst MetricsFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ReplicationTimeFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DestinationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ExistingObjectReplicationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ReplicationRuleAndOperatorFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ReplicationRuleFilterFilterSensitiveLog = (obj) => {\n    if (obj.Prefix !== undefined)\n        return { Prefix: obj.Prefix };\n    if (obj.Tag !== undefined)\n        return { Tag: TagFilterSensitiveLog(obj.Tag) };\n    if (obj.And !== undefined)\n        return { And: ReplicationRuleAndOperatorFilterSensitiveLog(obj.And) };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nconst ReplicaModificationsFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst SseKmsEncryptedObjectsFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst SourceSelectionCriteriaFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ReplicationRuleFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Filter && { Filter: ReplicationRuleFilterFilterSensitiveLog(obj.Filter) }),\n});\nconst ReplicationConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Rules && { Rules: obj.Rules.map((item) => ReplicationRuleFilterSensitiveLog(item)) }),\n});\nconst GetBucketReplicationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.ReplicationConfiguration && {\n        ReplicationConfiguration: ReplicationConfigurationFilterSensitiveLog(obj.ReplicationConfiguration),\n    }),\n});\nconst GetBucketReplicationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketRequestPaymentOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketRequestPaymentRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketTaggingOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketTaggingRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketVersioningOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketVersioningRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ErrorDocumentFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst IndexDocumentFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst RedirectAllRequestsToFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ConditionFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst RedirectFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst RoutingRuleFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketWebsiteOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetBucketWebsiteRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst GetObjectRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst GetObjectAclOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectAclRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ChecksumFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ObjectPartFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectAttributesPartsFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectAttributesOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectAttributesRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst ObjectLockLegalHoldFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectLegalHoldOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectLegalHoldRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DefaultRetentionFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ObjectLockRuleFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ObjectLockConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectLockConfigurationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectLockConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ObjectLockRetentionFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectRetentionOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectRetentionRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectTaggingOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectTaggingRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectTorrentOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetObjectTorrentRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PublicAccessBlockConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetPublicAccessBlockOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GetPublicAccessBlockRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst HeadBucketRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst HeadObjectOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst HeadObjectRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AnalyticsConfigurationList && {\n        AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map((item) => AnalyticsConfigurationFilterSensitiveLog(item)),\n    }),\n});\nconst ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListBucketInventoryConfigurationsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.InventoryConfigurationList && {\n        InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfigurationFilterSensitiveLog(item)),\n    }),\n});\nconst ListBucketInventoryConfigurationsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListBucketMetricsConfigurationsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.MetricsConfigurationList && {\n        MetricsConfigurationList: obj.MetricsConfigurationList.map((item) => MetricsConfigurationFilterSensitiveLog(item)),\n    }),\n});\nconst ListBucketMetricsConfigurationsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst BucketFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListBucketsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CommonPrefixFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst InitiatorFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst MultipartUploadFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListMultipartUploadsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListMultipartUploadsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst _ObjectFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListObjectsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListObjectsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListObjectsV2OutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListObjectsV2RequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst DeleteMarkerEntryFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ObjectVersionFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListObjectVersionsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListObjectVersionsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PartFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListPartsOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ListPartsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst PutBucketAccelerateConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketAclRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AnalyticsConfiguration && {\n        AnalyticsConfiguration: AnalyticsConfigurationFilterSensitiveLog(obj.AnalyticsConfiguration),\n    }),\n});\nconst CORSConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketCorsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketEncryptionRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.ServerSideEncryptionConfiguration && {\n        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration),\n    }),\n});\nconst PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.InventoryConfiguration && {\n        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration),\n    }),\n});\nconst BucketLifecycleConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Rules && { Rules: obj.Rules.map((item) => LifecycleRuleFilterSensitiveLog(item)) }),\n});\nconst PutBucketLifecycleConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.LifecycleConfiguration && {\n        LifecycleConfiguration: BucketLifecycleConfigurationFilterSensitiveLog(obj.LifecycleConfiguration),\n    }),\n});\nconst BucketLoggingStatusFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketLoggingRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.MetricsConfiguration && {\n        MetricsConfiguration: MetricsConfigurationFilterSensitiveLog(obj.MetricsConfiguration),\n    }),\n});\nconst PutBucketNotificationConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketPolicyRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketReplicationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.ReplicationConfiguration && {\n        ReplicationConfiguration: ReplicationConfigurationFilterSensitiveLog(obj.ReplicationConfiguration),\n    }),\n});\nconst RequestPaymentConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketRequestPaymentRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst TaggingFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketTaggingRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst VersioningConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketVersioningRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst WebsiteConfigurationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutBucketWebsiteRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst PutObjectRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst PutObjectAclOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectAclRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectLegalHoldOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectLegalHoldRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectLockConfigurationOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectLockConfigurationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CSVInputFilterSensitiveLog\": () => (/* binding */ CSVInputFilterSensitiveLog),\n/* harmony export */   \"CSVOutputFilterSensitiveLog\": () => (/* binding */ CSVOutputFilterSensitiveLog),\n/* harmony export */   \"CompressionType\": () => (/* binding */ CompressionType),\n/* harmony export */   \"ContinuationEventFilterSensitiveLog\": () => (/* binding */ ContinuationEventFilterSensitiveLog),\n/* harmony export */   \"CopyPartResultFilterSensitiveLog\": () => (/* binding */ CopyPartResultFilterSensitiveLog),\n/* harmony export */   \"EncryptionFilterSensitiveLog\": () => (/* binding */ EncryptionFilterSensitiveLog),\n/* harmony export */   \"EndEventFilterSensitiveLog\": () => (/* binding */ EndEventFilterSensitiveLog),\n/* harmony export */   \"ExpressionType\": () => (/* binding */ ExpressionType),\n/* harmony export */   \"FileHeaderInfo\": () => (/* binding */ FileHeaderInfo),\n/* harmony export */   \"GlacierJobParametersFilterSensitiveLog\": () => (/* binding */ GlacierJobParametersFilterSensitiveLog),\n/* harmony export */   \"InputSerializationFilterSensitiveLog\": () => (/* binding */ InputSerializationFilterSensitiveLog),\n/* harmony export */   \"JSONInputFilterSensitiveLog\": () => (/* binding */ JSONInputFilterSensitiveLog),\n/* harmony export */   \"JSONOutputFilterSensitiveLog\": () => (/* binding */ JSONOutputFilterSensitiveLog),\n/* harmony export */   \"JSONType\": () => (/* binding */ JSONType),\n/* harmony export */   \"MetadataEntryFilterSensitiveLog\": () => (/* binding */ MetadataEntryFilterSensitiveLog),\n/* harmony export */   \"ObjectAlreadyInActiveTierError\": () => (/* binding */ ObjectAlreadyInActiveTierError),\n/* harmony export */   \"OutputLocationFilterSensitiveLog\": () => (/* binding */ OutputLocationFilterSensitiveLog),\n/* harmony export */   \"OutputSerializationFilterSensitiveLog\": () => (/* binding */ OutputSerializationFilterSensitiveLog),\n/* harmony export */   \"ParquetInputFilterSensitiveLog\": () => (/* binding */ ParquetInputFilterSensitiveLog),\n/* harmony export */   \"ProgressEventFilterSensitiveLog\": () => (/* binding */ ProgressEventFilterSensitiveLog),\n/* harmony export */   \"ProgressFilterSensitiveLog\": () => (/* binding */ ProgressFilterSensitiveLog),\n/* harmony export */   \"PutObjectRetentionOutputFilterSensitiveLog\": () => (/* binding */ PutObjectRetentionOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectRetentionRequestFilterSensitiveLog\": () => (/* binding */ PutObjectRetentionRequestFilterSensitiveLog),\n/* harmony export */   \"PutObjectTaggingOutputFilterSensitiveLog\": () => (/* binding */ PutObjectTaggingOutputFilterSensitiveLog),\n/* harmony export */   \"PutObjectTaggingRequestFilterSensitiveLog\": () => (/* binding */ PutObjectTaggingRequestFilterSensitiveLog),\n/* harmony export */   \"PutPublicAccessBlockRequestFilterSensitiveLog\": () => (/* binding */ PutPublicAccessBlockRequestFilterSensitiveLog),\n/* harmony export */   \"QuoteFields\": () => (/* binding */ QuoteFields),\n/* harmony export */   \"RecordsEventFilterSensitiveLog\": () => (/* binding */ RecordsEventFilterSensitiveLog),\n/* harmony export */   \"RequestProgressFilterSensitiveLog\": () => (/* binding */ RequestProgressFilterSensitiveLog),\n/* harmony export */   \"RestoreObjectOutputFilterSensitiveLog\": () => (/* binding */ RestoreObjectOutputFilterSensitiveLog),\n/* harmony export */   \"RestoreObjectRequestFilterSensitiveLog\": () => (/* binding */ RestoreObjectRequestFilterSensitiveLog),\n/* harmony export */   \"RestoreRequestFilterSensitiveLog\": () => (/* binding */ RestoreRequestFilterSensitiveLog),\n/* harmony export */   \"RestoreRequestType\": () => (/* binding */ RestoreRequestType),\n/* harmony export */   \"S3LocationFilterSensitiveLog\": () => (/* binding */ S3LocationFilterSensitiveLog),\n/* harmony export */   \"ScanRangeFilterSensitiveLog\": () => (/* binding */ ScanRangeFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentEventStream\": () => (/* binding */ SelectObjectContentEventStream),\n/* harmony export */   \"SelectObjectContentEventStreamFilterSensitiveLog\": () => (/* binding */ SelectObjectContentEventStreamFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentOutputFilterSensitiveLog\": () => (/* binding */ SelectObjectContentOutputFilterSensitiveLog),\n/* harmony export */   \"SelectObjectContentRequestFilterSensitiveLog\": () => (/* binding */ SelectObjectContentRequestFilterSensitiveLog),\n/* harmony export */   \"SelectParametersFilterSensitiveLog\": () => (/* binding */ SelectParametersFilterSensitiveLog),\n/* harmony export */   \"StatsEventFilterSensitiveLog\": () => (/* binding */ StatsEventFilterSensitiveLog),\n/* harmony export */   \"StatsFilterSensitiveLog\": () => (/* binding */ StatsFilterSensitiveLog),\n/* harmony export */   \"Tier\": () => (/* binding */ Tier),\n/* harmony export */   \"UploadPartCopyOutputFilterSensitiveLog\": () => (/* binding */ UploadPartCopyOutputFilterSensitiveLog),\n/* harmony export */   \"UploadPartCopyRequestFilterSensitiveLog\": () => (/* binding */ UploadPartCopyRequestFilterSensitiveLog),\n/* harmony export */   \"UploadPartOutputFilterSensitiveLog\": () => (/* binding */ UploadPartOutputFilterSensitiveLog),\n/* harmony export */   \"UploadPartRequestFilterSensitiveLog\": () => (/* binding */ UploadPartRequestFilterSensitiveLog),\n/* harmony export */   \"WriteGetObjectResponseRequestFilterSensitiveLog\": () => (/* binding */ WriteGetObjectResponseRequestFilterSensitiveLog)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./S3ServiceException */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js\");\n\n\nclass ObjectAlreadyInActiveTierError extends _S3ServiceException__WEBPACK_IMPORTED_MODULE_1__.S3ServiceException {\n    constructor(opts) {\n        super({\n            name: \"ObjectAlreadyInActiveTierError\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ObjectAlreadyInActiveTierError\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ObjectAlreadyInActiveTierError.prototype);\n    }\n}\nvar Tier;\n(function (Tier) {\n    Tier[\"Bulk\"] = \"Bulk\";\n    Tier[\"Expedited\"] = \"Expedited\";\n    Tier[\"Standard\"] = \"Standard\";\n})(Tier || (Tier = {}));\nvar ExpressionType;\n(function (ExpressionType) {\n    ExpressionType[\"SQL\"] = \"SQL\";\n})(ExpressionType || (ExpressionType = {}));\nvar CompressionType;\n(function (CompressionType) {\n    CompressionType[\"BZIP2\"] = \"BZIP2\";\n    CompressionType[\"GZIP\"] = \"GZIP\";\n    CompressionType[\"NONE\"] = \"NONE\";\n})(CompressionType || (CompressionType = {}));\nvar FileHeaderInfo;\n(function (FileHeaderInfo) {\n    FileHeaderInfo[\"IGNORE\"] = \"IGNORE\";\n    FileHeaderInfo[\"NONE\"] = \"NONE\";\n    FileHeaderInfo[\"USE\"] = \"USE\";\n})(FileHeaderInfo || (FileHeaderInfo = {}));\nvar JSONType;\n(function (JSONType) {\n    JSONType[\"DOCUMENT\"] = \"DOCUMENT\";\n    JSONType[\"LINES\"] = \"LINES\";\n})(JSONType || (JSONType = {}));\nvar QuoteFields;\n(function (QuoteFields) {\n    QuoteFields[\"ALWAYS\"] = \"ALWAYS\";\n    QuoteFields[\"ASNEEDED\"] = \"ASNEEDED\";\n})(QuoteFields || (QuoteFields = {}));\nvar RestoreRequestType;\n(function (RestoreRequestType) {\n    RestoreRequestType[\"SELECT\"] = \"SELECT\";\n})(RestoreRequestType || (RestoreRequestType = {}));\nvar SelectObjectContentEventStream;\n(function (SelectObjectContentEventStream) {\n    SelectObjectContentEventStream.visit = (value, visitor) => {\n        if (value.Records !== undefined)\n            return visitor.Records(value.Records);\n        if (value.Stats !== undefined)\n            return visitor.Stats(value.Stats);\n        if (value.Progress !== undefined)\n            return visitor.Progress(value.Progress);\n        if (value.Cont !== undefined)\n            return visitor.Cont(value.Cont);\n        if (value.End !== undefined)\n            return visitor.End(value.End);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n})(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));\nconst PutObjectRetentionOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectRetentionRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectTaggingOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutObjectTaggingRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst PutPublicAccessBlockRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst RestoreObjectOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst GlacierJobParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst EncryptionFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.KMSKeyId && { KMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst MetadataEntryFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst S3LocationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) }),\n});\nconst OutputLocationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) }),\n});\nconst CSVInputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst JSONInputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ParquetInputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst InputSerializationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst CSVOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst JSONOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst OutputSerializationFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst SelectParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst RestoreRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) }),\n});\nconst RestoreObjectRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) }),\n});\nconst ContinuationEventFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst EndEventFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ProgressFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ProgressEventFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst RecordsEventFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst StatsFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst StatsEventFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst SelectObjectContentEventStreamFilterSensitiveLog = (obj) => {\n    if (obj.Records !== undefined)\n        return { Records: RecordsEventFilterSensitiveLog(obj.Records) };\n    if (obj.Stats !== undefined)\n        return { Stats: StatsEventFilterSensitiveLog(obj.Stats) };\n    if (obj.Progress !== undefined)\n        return { Progress: ProgressEventFilterSensitiveLog(obj.Progress) };\n    if (obj.Cont !== undefined)\n        return { Cont: ContinuationEventFilterSensitiveLog(obj.Cont) };\n    if (obj.End !== undefined)\n        return { End: EndEventFilterSensitiveLog(obj.End) };\n    if (obj.$unknown !== undefined)\n        return { [obj.$unknown[0]]: \"UNKNOWN\" };\n};\nconst SelectObjectContentOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Payload && { Payload: \"STREAMING_CONTENT\" }),\n});\nconst RequestProgressFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst ScanRangeFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst SelectObjectContentRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst UploadPartOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst UploadPartRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst CopyPartResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nconst UploadPartCopyOutputFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst UploadPartCopyRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSECustomerKey && { SSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n    ...(obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\nconst WriteGetObjectResponseRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.SSEKMSKeyId && { SSEKMSKeyId: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }),\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"paginateListObjectsV2\": () => (/* binding */ paginateListObjectsV2)\n/* harmony export */ });\n/* harmony import */ var _commands_ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commands/ListObjectsV2Command */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListObjectsV2Command.js\");\n/* harmony import */ var _S3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../S3 */ \"./node_modules/@aws-sdk/client-s3/dist-es/S3.js\");\n/* harmony import */ var _S3Client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../S3Client */ \"./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js\");\n\n\n\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new _commands_ListObjectsV2Command__WEBPACK_IMPORTED_MODULE_0__.ListObjectsV2Command(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listObjectsV2(input, ...args);\n};\nasync function* paginateListObjectsV2(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.ContinuationToken = token;\n        input[\"MaxKeys\"] = config.pageSize;\n        if (config.client instanceof _S3__WEBPACK_IMPORTED_MODULE_1__.S3) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof _S3Client__WEBPACK_IMPORTED_MODULE_2__.S3Client) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected S3 | S3Client\");\n        }\n        yield page;\n        const prevToken = token;\n        token = page.NextContinuationToken;\n        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n    }\n    return undefined;\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"paginateListParts\": () => (/* binding */ paginateListParts)\n/* harmony export */ });\n/* harmony import */ var _commands_ListPartsCommand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commands/ListPartsCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/ListPartsCommand.js\");\n/* harmony import */ var _S3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../S3 */ \"./node_modules/@aws-sdk/client-s3/dist-es/S3.js\");\n/* harmony import */ var _S3Client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../S3Client */ \"./node_modules/@aws-sdk/client-s3/dist-es/S3Client.js\");\n\n\n\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new _commands_ListPartsCommand__WEBPACK_IMPORTED_MODULE_0__.ListPartsCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listParts(input, ...args);\n};\nasync function* paginateListParts(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.PartNumberMarker = token;\n        input[\"MaxParts\"] = config.pageSize;\n        if (config.client instanceof _S3__WEBPACK_IMPORTED_MODULE_1__.S3) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof _S3Client__WEBPACK_IMPORTED_MODULE_2__.S3Client) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected S3 | S3Client\");\n        }\n        yield page;\n        const prevToken = token;\n        token = page.NextPartNumberMarker;\n        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n    }\n    return undefined;\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"paginateListObjectsV2\": () => (/* reexport safe */ _ListObjectsV2Paginator__WEBPACK_IMPORTED_MODULE_0__.paginateListObjectsV2),\n/* harmony export */   \"paginateListParts\": () => (/* reexport safe */ _ListPartsPaginator__WEBPACK_IMPORTED_MODULE_1__.paginateListParts)\n/* harmony export */ });\n/* harmony import */ var _ListObjectsV2Paginator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ListObjectsV2Paginator */ \"./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListObjectsV2Paginator.js\");\n/* harmony import */ var _ListPartsPaginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ListPartsPaginator */ \"./node_modules/@aws-sdk/client-s3/dist-es/pagination/ListPartsPaginator.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/pagination/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deserializeAws_restXmlAbortMultipartUploadCommand\": () => (/* binding */ deserializeAws_restXmlAbortMultipartUploadCommand),\n/* harmony export */   \"deserializeAws_restXmlCompleteMultipartUploadCommand\": () => (/* binding */ deserializeAws_restXmlCompleteMultipartUploadCommand),\n/* harmony export */   \"deserializeAws_restXmlCopyObjectCommand\": () => (/* binding */ deserializeAws_restXmlCopyObjectCommand),\n/* harmony export */   \"deserializeAws_restXmlCreateBucketCommand\": () => (/* binding */ deserializeAws_restXmlCreateBucketCommand),\n/* harmony export */   \"deserializeAws_restXmlCreateMultipartUploadCommand\": () => (/* binding */ deserializeAws_restXmlCreateMultipartUploadCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketCorsCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketCorsCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketEncryptionCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketEncryptionCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketLifecycleCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketLifecycleCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketOwnershipControlsCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketOwnershipControlsCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketPolicyCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketPolicyCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketReplicationCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketReplicationCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketTaggingCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketTaggingCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteBucketWebsiteCommand\": () => (/* binding */ deserializeAws_restXmlDeleteBucketWebsiteCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteObjectCommand\": () => (/* binding */ deserializeAws_restXmlDeleteObjectCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteObjectTaggingCommand\": () => (/* binding */ deserializeAws_restXmlDeleteObjectTaggingCommand),\n/* harmony export */   \"deserializeAws_restXmlDeleteObjectsCommand\": () => (/* binding */ deserializeAws_restXmlDeleteObjectsCommand),\n/* harmony export */   \"deserializeAws_restXmlDeletePublicAccessBlockCommand\": () => (/* binding */ deserializeAws_restXmlDeletePublicAccessBlockCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketAccelerateConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketAccelerateConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketAclCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketAclCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketCorsCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketCorsCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketEncryptionCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketEncryptionCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketInventoryConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketInventoryConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketLifecycleConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketLifecycleConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketLocationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketLocationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketLoggingCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketLoggingCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketMetricsConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketMetricsConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketNotificationConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketNotificationConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketOwnershipControlsCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketOwnershipControlsCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketPolicyCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketPolicyCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketPolicyStatusCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketPolicyStatusCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketReplicationCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketReplicationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketRequestPaymentCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketRequestPaymentCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketTaggingCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketTaggingCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketVersioningCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketVersioningCommand),\n/* harmony export */   \"deserializeAws_restXmlGetBucketWebsiteCommand\": () => (/* binding */ deserializeAws_restXmlGetBucketWebsiteCommand),\n/* harmony export */   \"deserializeAws_restXmlGetObjectAclCommand\": () => (/* binding */ deserializeAws_restXmlGetObjectAclCommand),\n/* harmony export */   \"deserializeAws_restXmlGetObjectAttributesCommand\": () => (/* binding */ deserializeAws_restXmlGetObjectAttributesCommand),\n/* harmony export */   \"deserializeAws_restXmlGetObjectCommand\": () => (/* binding */ deserializeAws_restXmlGetObjectCommand),\n/* harmony export */   \"deserializeAws_restXmlGetObjectLegalHoldCommand\": () => (/* binding */ deserializeAws_restXmlGetObjectLegalHoldCommand),\n/* harmony export */   \"deserializeAws_restXmlGetObjectLockConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlGetObjectLockConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlGetObjectRetentionCommand\": () => (/* binding */ deserializeAws_restXmlGetObjectRetentionCommand),\n/* harmony export */   \"deserializeAws_restXmlGetObjectTaggingCommand\": () => (/* binding */ deserializeAws_restXmlGetObjectTaggingCommand),\n/* harmony export */   \"deserializeAws_restXmlGetObjectTorrentCommand\": () => (/* binding */ deserializeAws_restXmlGetObjectTorrentCommand),\n/* harmony export */   \"deserializeAws_restXmlGetPublicAccessBlockCommand\": () => (/* binding */ deserializeAws_restXmlGetPublicAccessBlockCommand),\n/* harmony export */   \"deserializeAws_restXmlHeadBucketCommand\": () => (/* binding */ deserializeAws_restXmlHeadBucketCommand),\n/* harmony export */   \"deserializeAws_restXmlHeadObjectCommand\": () => (/* binding */ deserializeAws_restXmlHeadObjectCommand),\n/* harmony export */   \"deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand\": () => (/* binding */ deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand),\n/* harmony export */   \"deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand\": () => (/* binding */ deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand),\n/* harmony export */   \"deserializeAws_restXmlListBucketInventoryConfigurationsCommand\": () => (/* binding */ deserializeAws_restXmlListBucketInventoryConfigurationsCommand),\n/* harmony export */   \"deserializeAws_restXmlListBucketMetricsConfigurationsCommand\": () => (/* binding */ deserializeAws_restXmlListBucketMetricsConfigurationsCommand),\n/* harmony export */   \"deserializeAws_restXmlListBucketsCommand\": () => (/* binding */ deserializeAws_restXmlListBucketsCommand),\n/* harmony export */   \"deserializeAws_restXmlListMultipartUploadsCommand\": () => (/* binding */ deserializeAws_restXmlListMultipartUploadsCommand),\n/* harmony export */   \"deserializeAws_restXmlListObjectVersionsCommand\": () => (/* binding */ deserializeAws_restXmlListObjectVersionsCommand),\n/* harmony export */   \"deserializeAws_restXmlListObjectsCommand\": () => (/* binding */ deserializeAws_restXmlListObjectsCommand),\n/* harmony export */   \"deserializeAws_restXmlListObjectsV2Command\": () => (/* binding */ deserializeAws_restXmlListObjectsV2Command),\n/* harmony export */   \"deserializeAws_restXmlListPartsCommand\": () => (/* binding */ deserializeAws_restXmlListPartsCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketAccelerateConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketAccelerateConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketAclCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketAclCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketCorsCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketCorsCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketEncryptionCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketEncryptionCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketInventoryConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketInventoryConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketLifecycleConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketLifecycleConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketLoggingCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketLoggingCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketMetricsConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketMetricsConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketNotificationConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketNotificationConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketOwnershipControlsCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketOwnershipControlsCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketPolicyCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketPolicyCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketReplicationCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketReplicationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketRequestPaymentCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketRequestPaymentCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketTaggingCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketTaggingCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketVersioningCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketVersioningCommand),\n/* harmony export */   \"deserializeAws_restXmlPutBucketWebsiteCommand\": () => (/* binding */ deserializeAws_restXmlPutBucketWebsiteCommand),\n/* harmony export */   \"deserializeAws_restXmlPutObjectAclCommand\": () => (/* binding */ deserializeAws_restXmlPutObjectAclCommand),\n/* harmony export */   \"deserializeAws_restXmlPutObjectCommand\": () => (/* binding */ deserializeAws_restXmlPutObjectCommand),\n/* harmony export */   \"deserializeAws_restXmlPutObjectLegalHoldCommand\": () => (/* binding */ deserializeAws_restXmlPutObjectLegalHoldCommand),\n/* harmony export */   \"deserializeAws_restXmlPutObjectLockConfigurationCommand\": () => (/* binding */ deserializeAws_restXmlPutObjectLockConfigurationCommand),\n/* harmony export */   \"deserializeAws_restXmlPutObjectRetentionCommand\": () => (/* binding */ deserializeAws_restXmlPutObjectRetentionCommand),\n/* harmony export */   \"deserializeAws_restXmlPutObjectTaggingCommand\": () => (/* binding */ deserializeAws_restXmlPutObjectTaggingCommand),\n/* harmony export */   \"deserializeAws_restXmlPutPublicAccessBlockCommand\": () => (/* binding */ deserializeAws_restXmlPutPublicAccessBlockCommand),\n/* harmony export */   \"deserializeAws_restXmlRestoreObjectCommand\": () => (/* binding */ deserializeAws_restXmlRestoreObjectCommand),\n/* harmony export */   \"deserializeAws_restXmlSelectObjectContentCommand\": () => (/* binding */ deserializeAws_restXmlSelectObjectContentCommand),\n/* harmony export */   \"deserializeAws_restXmlUploadPartCommand\": () => (/* binding */ deserializeAws_restXmlUploadPartCommand),\n/* harmony export */   \"deserializeAws_restXmlUploadPartCopyCommand\": () => (/* binding */ deserializeAws_restXmlUploadPartCopyCommand),\n/* harmony export */   \"deserializeAws_restXmlWriteGetObjectResponseCommand\": () => (/* binding */ deserializeAws_restXmlWriteGetObjectResponseCommand),\n/* harmony export */   \"serializeAws_restXmlAbortMultipartUploadCommand\": () => (/* binding */ serializeAws_restXmlAbortMultipartUploadCommand),\n/* harmony export */   \"serializeAws_restXmlCompleteMultipartUploadCommand\": () => (/* binding */ serializeAws_restXmlCompleteMultipartUploadCommand),\n/* harmony export */   \"serializeAws_restXmlCopyObjectCommand\": () => (/* binding */ serializeAws_restXmlCopyObjectCommand),\n/* harmony export */   \"serializeAws_restXmlCreateBucketCommand\": () => (/* binding */ serializeAws_restXmlCreateBucketCommand),\n/* harmony export */   \"serializeAws_restXmlCreateMultipartUploadCommand\": () => (/* binding */ serializeAws_restXmlCreateMultipartUploadCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketCorsCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketCorsCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketEncryptionCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketEncryptionCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketInventoryConfigurationCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketInventoryConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketLifecycleCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketLifecycleCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketMetricsConfigurationCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketMetricsConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketOwnershipControlsCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketOwnershipControlsCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketPolicyCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketPolicyCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketReplicationCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketReplicationCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketTaggingCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketTaggingCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteBucketWebsiteCommand\": () => (/* binding */ serializeAws_restXmlDeleteBucketWebsiteCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteObjectCommand\": () => (/* binding */ serializeAws_restXmlDeleteObjectCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteObjectTaggingCommand\": () => (/* binding */ serializeAws_restXmlDeleteObjectTaggingCommand),\n/* harmony export */   \"serializeAws_restXmlDeleteObjectsCommand\": () => (/* binding */ serializeAws_restXmlDeleteObjectsCommand),\n/* harmony export */   \"serializeAws_restXmlDeletePublicAccessBlockCommand\": () => (/* binding */ serializeAws_restXmlDeletePublicAccessBlockCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketAccelerateConfigurationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketAccelerateConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketAclCommand\": () => (/* binding */ serializeAws_restXmlGetBucketAclCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketAnalyticsConfigurationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketCorsCommand\": () => (/* binding */ serializeAws_restXmlGetBucketCorsCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketEncryptionCommand\": () => (/* binding */ serializeAws_restXmlGetBucketEncryptionCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketInventoryConfigurationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketInventoryConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketLifecycleConfigurationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketLifecycleConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketLocationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketLocationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketLoggingCommand\": () => (/* binding */ serializeAws_restXmlGetBucketLoggingCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketMetricsConfigurationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketMetricsConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketNotificationConfigurationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketNotificationConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketOwnershipControlsCommand\": () => (/* binding */ serializeAws_restXmlGetBucketOwnershipControlsCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketPolicyCommand\": () => (/* binding */ serializeAws_restXmlGetBucketPolicyCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketPolicyStatusCommand\": () => (/* binding */ serializeAws_restXmlGetBucketPolicyStatusCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketReplicationCommand\": () => (/* binding */ serializeAws_restXmlGetBucketReplicationCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketRequestPaymentCommand\": () => (/* binding */ serializeAws_restXmlGetBucketRequestPaymentCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketTaggingCommand\": () => (/* binding */ serializeAws_restXmlGetBucketTaggingCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketVersioningCommand\": () => (/* binding */ serializeAws_restXmlGetBucketVersioningCommand),\n/* harmony export */   \"serializeAws_restXmlGetBucketWebsiteCommand\": () => (/* binding */ serializeAws_restXmlGetBucketWebsiteCommand),\n/* harmony export */   \"serializeAws_restXmlGetObjectAclCommand\": () => (/* binding */ serializeAws_restXmlGetObjectAclCommand),\n/* harmony export */   \"serializeAws_restXmlGetObjectAttributesCommand\": () => (/* binding */ serializeAws_restXmlGetObjectAttributesCommand),\n/* harmony export */   \"serializeAws_restXmlGetObjectCommand\": () => (/* binding */ serializeAws_restXmlGetObjectCommand),\n/* harmony export */   \"serializeAws_restXmlGetObjectLegalHoldCommand\": () => (/* binding */ serializeAws_restXmlGetObjectLegalHoldCommand),\n/* harmony export */   \"serializeAws_restXmlGetObjectLockConfigurationCommand\": () => (/* binding */ serializeAws_restXmlGetObjectLockConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlGetObjectRetentionCommand\": () => (/* binding */ serializeAws_restXmlGetObjectRetentionCommand),\n/* harmony export */   \"serializeAws_restXmlGetObjectTaggingCommand\": () => (/* binding */ serializeAws_restXmlGetObjectTaggingCommand),\n/* harmony export */   \"serializeAws_restXmlGetObjectTorrentCommand\": () => (/* binding */ serializeAws_restXmlGetObjectTorrentCommand),\n/* harmony export */   \"serializeAws_restXmlGetPublicAccessBlockCommand\": () => (/* binding */ serializeAws_restXmlGetPublicAccessBlockCommand),\n/* harmony export */   \"serializeAws_restXmlHeadBucketCommand\": () => (/* binding */ serializeAws_restXmlHeadBucketCommand),\n/* harmony export */   \"serializeAws_restXmlHeadObjectCommand\": () => (/* binding */ serializeAws_restXmlHeadObjectCommand),\n/* harmony export */   \"serializeAws_restXmlListBucketAnalyticsConfigurationsCommand\": () => (/* binding */ serializeAws_restXmlListBucketAnalyticsConfigurationsCommand),\n/* harmony export */   \"serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand\": () => (/* binding */ serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand),\n/* harmony export */   \"serializeAws_restXmlListBucketInventoryConfigurationsCommand\": () => (/* binding */ serializeAws_restXmlListBucketInventoryConfigurationsCommand),\n/* harmony export */   \"serializeAws_restXmlListBucketMetricsConfigurationsCommand\": () => (/* binding */ serializeAws_restXmlListBucketMetricsConfigurationsCommand),\n/* harmony export */   \"serializeAws_restXmlListBucketsCommand\": () => (/* binding */ serializeAws_restXmlListBucketsCommand),\n/* harmony export */   \"serializeAws_restXmlListMultipartUploadsCommand\": () => (/* binding */ serializeAws_restXmlListMultipartUploadsCommand),\n/* harmony export */   \"serializeAws_restXmlListObjectVersionsCommand\": () => (/* binding */ serializeAws_restXmlListObjectVersionsCommand),\n/* harmony export */   \"serializeAws_restXmlListObjectsCommand\": () => (/* binding */ serializeAws_restXmlListObjectsCommand),\n/* harmony export */   \"serializeAws_restXmlListObjectsV2Command\": () => (/* binding */ serializeAws_restXmlListObjectsV2Command),\n/* harmony export */   \"serializeAws_restXmlListPartsCommand\": () => (/* binding */ serializeAws_restXmlListPartsCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketAccelerateConfigurationCommand\": () => (/* binding */ serializeAws_restXmlPutBucketAccelerateConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketAclCommand\": () => (/* binding */ serializeAws_restXmlPutBucketAclCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketAnalyticsConfigurationCommand\": () => (/* binding */ serializeAws_restXmlPutBucketAnalyticsConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketCorsCommand\": () => (/* binding */ serializeAws_restXmlPutBucketCorsCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketEncryptionCommand\": () => (/* binding */ serializeAws_restXmlPutBucketEncryptionCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand\": () => (/* binding */ serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketInventoryConfigurationCommand\": () => (/* binding */ serializeAws_restXmlPutBucketInventoryConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketLifecycleConfigurationCommand\": () => (/* binding */ serializeAws_restXmlPutBucketLifecycleConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketLoggingCommand\": () => (/* binding */ serializeAws_restXmlPutBucketLoggingCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketMetricsConfigurationCommand\": () => (/* binding */ serializeAws_restXmlPutBucketMetricsConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketNotificationConfigurationCommand\": () => (/* binding */ serializeAws_restXmlPutBucketNotificationConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketOwnershipControlsCommand\": () => (/* binding */ serializeAws_restXmlPutBucketOwnershipControlsCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketPolicyCommand\": () => (/* binding */ serializeAws_restXmlPutBucketPolicyCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketReplicationCommand\": () => (/* binding */ serializeAws_restXmlPutBucketReplicationCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketRequestPaymentCommand\": () => (/* binding */ serializeAws_restXmlPutBucketRequestPaymentCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketTaggingCommand\": () => (/* binding */ serializeAws_restXmlPutBucketTaggingCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketVersioningCommand\": () => (/* binding */ serializeAws_restXmlPutBucketVersioningCommand),\n/* harmony export */   \"serializeAws_restXmlPutBucketWebsiteCommand\": () => (/* binding */ serializeAws_restXmlPutBucketWebsiteCommand),\n/* harmony export */   \"serializeAws_restXmlPutObjectAclCommand\": () => (/* binding */ serializeAws_restXmlPutObjectAclCommand),\n/* harmony export */   \"serializeAws_restXmlPutObjectCommand\": () => (/* binding */ serializeAws_restXmlPutObjectCommand),\n/* harmony export */   \"serializeAws_restXmlPutObjectLegalHoldCommand\": () => (/* binding */ serializeAws_restXmlPutObjectLegalHoldCommand),\n/* harmony export */   \"serializeAws_restXmlPutObjectLockConfigurationCommand\": () => (/* binding */ serializeAws_restXmlPutObjectLockConfigurationCommand),\n/* harmony export */   \"serializeAws_restXmlPutObjectRetentionCommand\": () => (/* binding */ serializeAws_restXmlPutObjectRetentionCommand),\n/* harmony export */   \"serializeAws_restXmlPutObjectTaggingCommand\": () => (/* binding */ serializeAws_restXmlPutObjectTaggingCommand),\n/* harmony export */   \"serializeAws_restXmlPutPublicAccessBlockCommand\": () => (/* binding */ serializeAws_restXmlPutPublicAccessBlockCommand),\n/* harmony export */   \"serializeAws_restXmlRestoreObjectCommand\": () => (/* binding */ serializeAws_restXmlRestoreObjectCommand),\n/* harmony export */   \"serializeAws_restXmlSelectObjectContentCommand\": () => (/* binding */ serializeAws_restXmlSelectObjectContentCommand),\n/* harmony export */   \"serializeAws_restXmlUploadPartCommand\": () => (/* binding */ serializeAws_restXmlUploadPartCommand),\n/* harmony export */   \"serializeAws_restXmlUploadPartCopyCommand\": () => (/* binding */ serializeAws_restXmlUploadPartCopyCommand),\n/* harmony export */   \"serializeAws_restXmlWriteGetObjectResponseCommand\": () => (/* binding */ serializeAws_restXmlWriteGetObjectResponseCommand)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/xml-builder */ \"./node_modules/@aws-sdk/xml-builder/dist-es/index.js\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-xml-parser */ \"./node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/models_0 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_0.js\");\n/* harmony import */ var _models_models_1__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/models_1 */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/models_1.js\");\n/* harmony import */ var _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/S3ServiceException */ \"./node_modules/@aws-sdk/client-s3/dist-es/models/S3ServiceException.js\");\n\n\n\n\n\n\n\nconst serializeAws_restXmlAbortMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"AbortMultipartUpload\"],\n        uploadId: [, input.UploadId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlCompleteMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"CompleteMultipartUpload\"],\n        uploadId: [, input.UploadId],\n    });\n    let body;\n    if (input.MultipartUpload !== undefined) {\n        body = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n    }\n    let contents;\n    if (input.MultipartUpload !== undefined) {\n        contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n        contents = contents.withName(\"CompleteMultipartUpload\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlCopyObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-type\": input.ContentType,\n        \"x-amz-copy-source\": input.CopySource,\n        \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n        \"x-amz-copy-source-if-modified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.CopySourceIfModifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n        \"x-amz-copy-source-if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString(),\n        ],\n        expires: [() => isSerializableHeaderValue(input.Expires), () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-metadata-directive\": input.MetadataDirective,\n        \"x-amz-tagging-directive\": input.TaggingDirective,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n        \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n        \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => ({\n                ...acc,\n                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],\n            }), {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"CopyObject\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlCreateBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-bucket-object-lock-enabled\": [\n            () => isSerializableHeaderValue(input.ObjectLockEnabledForBucket),\n            () => input.ObjectLockEnabledForBucket.toString(),\n        ],\n        \"x-amz-object-ownership\": input.ObjectOwnership,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    if (input.CreateBucketConfiguration !== undefined) {\n        body = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    }\n    let contents;\n    if (input.CreateBucketConfiguration !== undefined) {\n        contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nconst serializeAws_restXmlCreateMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-type\": input.ContentType,\n        expires: [() => isSerializableHeaderValue(input.Expires), () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => ({\n                ...acc,\n                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],\n            }), {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        uploads: [, \"\"],\n        \"x-id\": [, \"CreateMultipartUpload\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        id: [, input.Id],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        id: [, input.Id],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        id: [, input.Id],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketLifecycleCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        id: [, input.Id],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"DeleteObject\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteObjectsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        delete: [, \"\"],\n        \"x-id\": [, \"DeleteObjects\"],\n    });\n    let body;\n    if (input.Delete !== undefined) {\n        body = serializeAws_restXmlDelete(input.Delete, context);\n    }\n    let contents;\n    if (input.Delete !== undefined) {\n        contents = serializeAws_restXmlDelete(input.Delete, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeleteObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlDeletePublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        accelerate: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        acl: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        \"x-id\": [, \"GetBucketAnalyticsConfiguration\"],\n        id: [, input.Id],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        \"x-id\": [, \"GetBucketIntelligentTieringConfiguration\"],\n        id: [, input.Id],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        \"x-id\": [, \"GetBucketInventoryConfiguration\"],\n        id: [, input.Id],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketLocationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        location: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketLoggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        logging: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        \"x-id\": [, \"GetBucketMetricsConfiguration\"],\n        id: [, input.Id],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        notification: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketPolicyStatusCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policyStatus: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketRequestPaymentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        requestPayment: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketVersioningCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versioning: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"if-match\": input.IfMatch,\n        \"if-modified-since\": [\n            () => isSerializableHeaderValue(input.IfModifiedSince),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.IfModifiedSince).toString(),\n        ],\n        \"if-none-match\": input.IfNoneMatch,\n        \"if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.IfUnmodifiedSince),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.IfUnmodifiedSince).toString(),\n        ],\n        range: input.Range,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-mode\": input.ChecksumMode,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"GetObject\"],\n        \"response-cache-control\": [, input.ResponseCacheControl],\n        \"response-content-disposition\": [, input.ResponseContentDisposition],\n        \"response-content-encoding\": [, input.ResponseContentEncoding],\n        \"response-content-language\": [, input.ResponseContentLanguage],\n        \"response-content-type\": [, input.ResponseContentType],\n        \"response-expires\": [\n            () => input.ResponseExpires !== void 0,\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.ResponseExpires).toString(),\n        ],\n        versionId: [, input.VersionId],\n        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetObjectAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        acl: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetObjectAttributesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-max-parts\": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],\n        \"x-amz-part-number-marker\": input.PartNumberMarker,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-object-attributes\": [\n            () => isSerializableHeaderValue(input.ObjectAttributes),\n            () => (input.ObjectAttributes || []).map((_entry) => _entry).join(\", \"),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        attributes: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetObjectLegalHoldCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"legal-hold\": [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetObjectLockConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"object-lock\": [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetObjectRetentionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        retention: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetObjectTorrentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        torrent: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlGetPublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlHeadBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"HEAD\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nconst serializeAws_restXmlHeadObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"if-match\": input.IfMatch,\n        \"if-modified-since\": [\n            () => isSerializableHeaderValue(input.IfModifiedSince),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.IfModifiedSince).toString(),\n        ],\n        \"if-none-match\": input.IfNoneMatch,\n        \"if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.IfUnmodifiedSince),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.IfUnmodifiedSince).toString(),\n        ],\n        range: input.Range,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-mode\": input.ChecksumMode,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        versionId: [, input.VersionId],\n        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"HEAD\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        \"x-id\": [, \"ListBucketAnalyticsConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        \"x-id\": [, \"ListBucketIntelligentTieringConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        \"x-id\": [, \"ListBucketInventoryConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        \"x-id\": [, \"ListBucketMetricsConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListBucketsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    let body;\n    body = \"\";\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nconst serializeAws_restXmlListMultipartUploadsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        uploads: [, \"\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"key-marker\": [, input.KeyMarker],\n        \"max-uploads\": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],\n        prefix: [, input.Prefix],\n        \"upload-id-marker\": [, input.UploadIdMarker],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListObjectsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        marker: [, input.Marker],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListObjectsV2Command = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"list-type\": [, \"2\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n        \"continuation-token\": [, input.ContinuationToken],\n        \"fetch-owner\": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],\n        \"start-after\": [, input.StartAfter],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListObjectVersionsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versions: [, \"\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"key-marker\": [, input.KeyMarker],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n        \"version-id-marker\": [, input.VersionIdMarker],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlListPartsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"ListParts\"],\n        \"max-parts\": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],\n        \"part-number-marker\": [, input.PartNumberMarker],\n        uploadId: [, input.UploadId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        accelerate: [, \"\"],\n    });\n    let body;\n    if (input.AccelerateConfiguration !== undefined) {\n        body = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n    }\n    let contents;\n    if (input.AccelerateConfiguration !== undefined) {\n        contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        acl: [, \"\"],\n    });\n    let body;\n    if (input.AccessControlPolicy !== undefined) {\n        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    }\n    let contents;\n    if (input.AccessControlPolicy !== undefined) {\n        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        id: [, input.Id],\n    });\n    let body;\n    if (input.AnalyticsConfiguration !== undefined) {\n        body = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    }\n    let contents;\n    if (input.AnalyticsConfiguration !== undefined) {\n        contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    if (input.CORSConfiguration !== undefined) {\n        body = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n    }\n    let contents;\n    if (input.CORSConfiguration !== undefined) {\n        contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    if (input.ServerSideEncryptionConfiguration !== undefined) {\n        body = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    }\n    let contents;\n    if (input.ServerSideEncryptionConfiguration !== undefined) {\n        contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        id: [, input.Id],\n    });\n    let body;\n    if (input.IntelligentTieringConfiguration !== undefined) {\n        body = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    }\n    let contents;\n    if (input.IntelligentTieringConfiguration !== undefined) {\n        contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        id: [, input.Id],\n    });\n    let body;\n    if (input.InventoryConfiguration !== undefined) {\n        body = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n    }\n    let contents;\n    if (input.InventoryConfiguration !== undefined) {\n        contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    if (input.LifecycleConfiguration !== undefined) {\n        body = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    }\n    let contents;\n    if (input.LifecycleConfiguration !== undefined) {\n        contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n        contents = contents.withName(\"LifecycleConfiguration\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketLoggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        logging: [, \"\"],\n    });\n    let body;\n    if (input.BucketLoggingStatus !== undefined) {\n        body = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n    }\n    let contents;\n    if (input.BucketLoggingStatus !== undefined) {\n        contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        id: [, input.Id],\n    });\n    let body;\n    if (input.MetricsConfiguration !== undefined) {\n        body = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n    }\n    let contents;\n    if (input.MetricsConfiguration !== undefined) {\n        contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-skip-destination-validation\": [\n            () => isSerializableHeaderValue(input.SkipDestinationValidation),\n            () => input.SkipDestinationValidation.toString(),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        notification: [, \"\"],\n    });\n    let body;\n    if (input.NotificationConfiguration !== undefined) {\n        body = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n    }\n    let contents;\n    if (input.NotificationConfiguration !== undefined) {\n        contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    if (input.OwnershipControls !== undefined) {\n        body = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n    }\n    let contents;\n    if (input.OwnershipControls !== undefined) {\n        contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"text/plain\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-confirm-remove-self-bucket-access\": [\n            () => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess),\n            () => input.ConfirmRemoveSelfBucketAccess.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    if (input.Policy !== undefined) {\n        body = input.Policy;\n    }\n    let contents;\n    if (input.Policy !== undefined) {\n        contents = input.Policy;\n        body = contents;\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-bucket-object-lock-token\": input.Token,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    if (input.ReplicationConfiguration !== undefined) {\n        body = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n    }\n    let contents;\n    if (input.ReplicationConfiguration !== undefined) {\n        contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketRequestPaymentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        requestPayment: [, \"\"],\n    });\n    let body;\n    if (input.RequestPaymentConfiguration !== undefined) {\n        body = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    }\n    let contents;\n    if (input.RequestPaymentConfiguration !== undefined) {\n        contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    if (input.Tagging !== undefined) {\n        body = serializeAws_restXmlTagging(input.Tagging, context);\n    }\n    let contents;\n    if (input.Tagging !== undefined) {\n        contents = serializeAws_restXmlTagging(input.Tagging, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketVersioningCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versioning: [, \"\"],\n    });\n    let body;\n    if (input.VersioningConfiguration !== undefined) {\n        body = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n    }\n    let contents;\n    if (input.VersioningConfiguration !== undefined) {\n        contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    if (input.WebsiteConfiguration !== undefined) {\n        body = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n    }\n    let contents;\n    if (input.WebsiteConfiguration !== undefined) {\n        contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": input.ContentType || \"application/octet-stream\",\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        expires: [() => isSerializableHeaderValue(input.Expires), () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => ({\n                ...acc,\n                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],\n            }), {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"PutObject\"],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutObjectAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        acl: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.AccessControlPolicy !== undefined) {\n        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    }\n    let contents;\n    if (input.AccessControlPolicy !== undefined) {\n        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutObjectLegalHoldCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"legal-hold\": [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.LegalHold !== undefined) {\n        body = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n    }\n    let contents;\n    if (input.LegalHold !== undefined) {\n        contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n        contents = contents.withName(\"LegalHold\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutObjectLockConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bucket-object-lock-token\": input.Token,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"object-lock\": [, \"\"],\n    });\n    let body;\n    if (input.ObjectLockConfiguration !== undefined) {\n        body = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    }\n    let contents;\n    if (input.ObjectLockConfiguration !== undefined) {\n        contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutObjectRetentionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        retention: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.Retention !== undefined) {\n        body = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n    }\n    let contents;\n    if (input.Retention !== undefined) {\n        contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n        contents = contents.withName(\"Retention\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.Tagging !== undefined) {\n        body = serializeAws_restXmlTagging(input.Tagging, context);\n    }\n    let contents;\n    if (input.Tagging !== undefined) {\n        contents = serializeAws_restXmlTagging(input.Tagging, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlPutPublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    if (input.PublicAccessBlockConfiguration !== undefined) {\n        body = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    }\n    let contents;\n    if (input.PublicAccessBlockConfiguration !== undefined) {\n        contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlRestoreObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        restore: [, \"\"],\n        \"x-id\": [, \"RestoreObject\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.RestoreRequest !== undefined) {\n        body = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n    }\n    let contents;\n    if (input.RestoreRequest !== undefined) {\n        contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlSelectObjectContentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        select: [, \"\"],\n        \"select-type\": [, \"2\"],\n        \"x-id\": [, \"SelectObjectContent\"],\n    });\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"SelectObjectContentRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    if (input.Expression !== undefined) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpressionType !== undefined) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.InputSerialization !== undefined) {\n        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputSerialization !== undefined) {\n        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RequestProgress !== undefined) {\n        const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ScanRange !== undefined) {\n        const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlUploadPartCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/octet-stream\",\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"UploadPart\"],\n        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],\n        uploadId: [, input.UploadId],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlUploadPartCopyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-copy-source\": input.CopySource,\n        \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n        \"x-amz-copy-source-if-modified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.CopySourceIfModifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n        \"x-amz-copy-source-if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-range\": input.CopySourceRange,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n        \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n        \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.resolvedPath)(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"UploadPartCopy\"],\n        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],\n        uploadId: [, input.UploadId],\n    });\n    let body;\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst serializeAws_restXmlWriteGetObjectResponseCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n        \"content-type\": \"application/octet-stream\",\n        \"x-amz-request-route\": input.RequestRoute,\n        \"x-amz-request-token\": input.RequestToken,\n        \"x-amz-fwd-status\": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],\n        \"x-amz-fwd-error-code\": input.ErrorCode,\n        \"x-amz-fwd-error-message\": input.ErrorMessage,\n        \"x-amz-fwd-header-accept-ranges\": input.AcceptRanges,\n        \"x-amz-fwd-header-cache-control\": input.CacheControl,\n        \"x-amz-fwd-header-content-disposition\": input.ContentDisposition,\n        \"x-amz-fwd-header-content-encoding\": input.ContentEncoding,\n        \"x-amz-fwd-header-content-language\": input.ContentLanguage,\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"x-amz-fwd-header-content-range\": input.ContentRange,\n        \"x-amz-fwd-header-content-type\": input.ContentType,\n        \"x-amz-fwd-header-x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-fwd-header-x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-fwd-header-x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-fwd-header-x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-fwd-header-x-amz-delete-marker\": [\n            () => isSerializableHeaderValue(input.DeleteMarker),\n            () => input.DeleteMarker.toString(),\n        ],\n        \"x-amz-fwd-header-etag\": input.ETag,\n        \"x-amz-fwd-header-expires\": [\n            () => isSerializableHeaderValue(input.Expires),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.Expires).toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-expiration\": input.Expiration,\n        \"x-amz-fwd-header-last-modified\": [\n            () => isSerializableHeaderValue(input.LastModified),\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.dateToUtcString)(input.LastModified).toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-missing-meta\": [\n            () => isSerializableHeaderValue(input.MissingMeta),\n            () => input.MissingMeta.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-fwd-header-x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-fwd-header-x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-mp-parts-count\": [\n            () => isSerializableHeaderValue(input.PartsCount),\n            () => input.PartsCount.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-replication-status\": input.ReplicationStatus,\n        \"x-amz-fwd-header-x-amz-request-charged\": input.RequestCharged,\n        \"x-amz-fwd-header-x-amz-restore\": input.Restore,\n        \"x-amz-fwd-header-x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-fwd-header-x-amz-storage-class\": input.StorageClass,\n        \"x-amz-fwd-header-x-amz-tagging-count\": [\n            () => isSerializableHeaderValue(input.TagCount),\n            () => input.TagCount.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-version-id\": input.VersionId,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => ({\n                ...acc,\n                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],\n            }), {})),\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/WriteGetObjectResponse\";\n    const query = map({\n        \"x-id\": [, \"WriteGetObjectResponse\"],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    let { hostname: resolvedHostname } = await context.endpoint();\n    if (context.disableHostPrefix !== true) {\n        resolvedHostname = \"{RequestRoute}.\" + resolvedHostname;\n        if (input.RequestRoute === undefined) {\n            throw new Error(\"Empty value provided for input host prefix: RequestRoute.\");\n        }\n        resolvedHostname = resolvedHostname.replace(\"{RequestRoute}\", input.RequestRoute);\n        if (!(0,_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.isValidHostname)(resolvedHostname)) {\n            throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n        }\n    }\n    return new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({\n        protocol,\n        hostname: resolvedHostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nconst deserializeAws_restXmlAbortMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlAbortMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchUpload\":\n        case \"com.amazonaws.s3#NoSuchUpload\":\n            throw await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlCompleteMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Bucket\"]);\n    }\n    if (data[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ChecksumCRC32\"]);\n    }\n    if (data[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ChecksumCRC32C\"]);\n    }\n    if (data[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ChecksumSHA1\"]);\n    }\n    if (data[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ChecksumSHA256\"]);\n    }\n    if (data[\"ETag\"] !== undefined) {\n        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ETag\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Key\"]);\n    }\n    if (data[\"Location\"] !== undefined) {\n        contents.Location = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Location\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCompleteMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlCopyObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCopyObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlCopyObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ObjectNotInActiveTierError\":\n        case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n            throw await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlCreateBucketCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Location: [, output.headers[\"location\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlCreateBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"BucketAlreadyExists\":\n        case \"com.amazonaws.s3#BucketAlreadyExists\":\n            throw await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context);\n        case \"BucketAlreadyOwnedByYou\":\n        case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n            throw await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlCreateMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        AbortDate: [\n            () => void 0 !== output.headers[\"x-amz-abort-date\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers[\"x-amz-abort-date\"])),\n        ],\n        AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ChecksumAlgorithm: [, output.headers[\"x-amz-checksum-algorithm\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Bucket\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Key\"]);\n    }\n    if (data[\"UploadId\"] !== undefined) {\n        contents.UploadId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"UploadId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCreateMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketLifecycleCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteObjectCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteObjectsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.Deleted === \"\") {\n        contents.Deleted = [];\n    }\n    else if (data[\"Deleted\"] !== undefined) {\n        contents.Deleted = deserializeAws_restXmlDeletedObjects((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Deleted\"]), context);\n    }\n    if (data.Error === \"\") {\n        contents.Errors = [];\n    }\n    else if (data[\"Error\"] !== undefined) {\n        contents.Errors = deserializeAws_restXmlErrors((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Error\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeleteObjectsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeleteObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeleteObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlDeletePublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.AccessControlList === \"\") {\n        contents.Grants = [];\n    }\n    else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n        contents.Grants = deserializeAws_restXmlGrants((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"AccessControlList\"][\"Grant\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.CORSRule === \"\") {\n        contents.CORSRules = [];\n    }\n    else if (data[\"CORSRule\"] !== undefined) {\n        contents.CORSRules = deserializeAws_restXmlCORSRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"CORSRule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (data[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlLifecycleRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketLocationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLocationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"LocationConstraint\"] !== undefined) {\n        contents.LocationConstraint = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"LocationConstraint\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketLocationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketLoggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"LoggingEnabled\"] !== undefined) {\n        contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketLoggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"EventBridgeConfiguration\"] !== undefined) {\n        contents.EventBridgeConfiguration = deserializeAws_restXmlEventBridgeConfiguration(data[\"EventBridgeConfiguration\"], context);\n    }\n    if (data.CloudFunctionConfiguration === \"\") {\n        contents.LambdaFunctionConfigurations = [];\n    }\n    else if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n        contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"CloudFunctionConfiguration\"]), context);\n    }\n    if (data.QueueConfiguration === \"\") {\n        contents.QueueConfigurations = [];\n    }\n    else if (data[\"QueueConfiguration\"] !== undefined) {\n        contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"QueueConfiguration\"]), context);\n    }\n    if (data.TopicConfiguration === \"\") {\n        contents.TopicConfigurations = [];\n    }\n    else if (data[\"TopicConfiguration\"] !== undefined) {\n        contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"TopicConfiguration\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = await collectBodyString(output.body, context);\n    contents.Policy = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketPolicyStatusCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketRequestPaymentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"Payer\"] !== undefined) {\n        contents.Payer = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Payer\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.TagSet === \"\") {\n        contents.TagSet = [];\n    }\n    else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n        contents.TagSet = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"TagSet\"][\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketVersioningCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"MfaDelete\"] !== undefined) {\n        contents.MFADelete = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"MfaDelete\"]);\n    }\n    if (data[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketVersioningCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"ErrorDocument\"] !== undefined) {\n        contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n    }\n    if (data[\"IndexDocument\"] !== undefined) {\n        contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n    }\n    if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n        contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data[\"RedirectAllRequestsTo\"], context);\n    }\n    if (data.RoutingRules === \"\") {\n        contents.RoutingRules = [];\n    }\n    else if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n        contents.RoutingRules = deserializeAws_restXmlRoutingRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"RoutingRules\"][\"RoutingRule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        AcceptRanges: [, output.headers[\"accept-ranges\"]],\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        Restore: [, output.headers[\"x-amz-restore\"]],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers[\"last-modified\"])),\n        ],\n        ContentLength: [\n            () => void 0 !== output.headers[\"content-length\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output.headers[\"content-length\"]),\n        ],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        MissingMeta: [\n            () => void 0 !== output.headers[\"x-amz-missing-meta\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers[\"x-amz-missing-meta\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        CacheControl: [, output.headers[\"cache-control\"]],\n        ContentDisposition: [, output.headers[\"content-disposition\"]],\n        ContentEncoding: [, output.headers[\"content-encoding\"]],\n        ContentLanguage: [, output.headers[\"content-language\"]],\n        ContentRange: [, output.headers[\"content-range\"]],\n        ContentType: [, output.headers[\"content-type\"]],\n        Expires: [\n            () => void 0 !== output.headers[\"expires\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers[\"expires\"])),\n        ],\n        WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n        PartsCount: [\n            () => void 0 !== output.headers[\"x-amz-mp-parts-count\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers[\"x-amz-mp-parts-count\"]),\n        ],\n        TagCount: [\n            () => void 0 !== output.headers[\"x-amz-tagging-count\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers[\"x-amz-tagging-count\"]),\n        ],\n        ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n        ObjectLockRetainUntilDate: [\n            () => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output.headers[\"x-amz-object-lock-retain-until-date\"])),\n        ],\n        ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n        Metadata: [\n            ,\n            Object.keys(output.headers)\n                .filter((header) => header.startsWith(\"x-amz-meta-\"))\n                .reduce((acc, header) => {\n                acc[header.substring(11)] = output.headers[header];\n                return acc;\n            }, {}),\n        ],\n    });\n    const data = output.body;\n    context.sdkStreamMixin(data);\n    contents.Body = data;\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidObjectState\":\n        case \"com.amazonaws.s3#InvalidObjectState\":\n            throw await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context);\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlGetObjectAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.AccessControlList === \"\") {\n        contents.Grants = [];\n    }\n    else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n        contents.Grants = deserializeAws_restXmlGrants((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"AccessControlList\"][\"Grant\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlGetObjectAttributesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectAttributesCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers[\"last-modified\"])),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"Checksum\"] !== undefined) {\n        contents.Checksum = deserializeAws_restXmlChecksum(data[\"Checksum\"], context);\n    }\n    if (data[\"ETag\"] !== undefined) {\n        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ETag\"]);\n    }\n    if (data[\"ObjectParts\"] !== undefined) {\n        contents.ObjectParts = deserializeAws_restXmlGetObjectAttributesParts(data[\"ObjectParts\"], context);\n    }\n    if (data[\"ObjectSize\"] !== undefined) {\n        contents.ObjectSize = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(data[\"ObjectSize\"]);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectAttributesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlGetObjectLegalHoldCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectLegalHoldCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetObjectLockConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetObjectRetentionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectRetentionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.TagSet === \"\") {\n        contents.TagSet = [];\n    }\n    else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n        contents.TagSet = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"TagSet\"][\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetObjectTorrentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = output.body;\n    context.sdkStreamMixin(data);\n    contents.Body = data;\n    return contents;\n};\nconst deserializeAws_restXmlGetObjectTorrentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlGetPublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlGetPublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlHeadBucketCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlHeadBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlHeadBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NotFound\":\n        case \"com.amazonaws.s3#NotFound\":\n            throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlHeadObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlHeadObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        AcceptRanges: [, output.headers[\"accept-ranges\"]],\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        Restore: [, output.headers[\"x-amz-restore\"]],\n        ArchiveStatus: [, output.headers[\"x-amz-archive-status\"]],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers[\"last-modified\"])),\n        ],\n        ContentLength: [\n            () => void 0 !== output.headers[\"content-length\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output.headers[\"content-length\"]),\n        ],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        ETag: [, output.headers[\"etag\"]],\n        MissingMeta: [\n            () => void 0 !== output.headers[\"x-amz-missing-meta\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers[\"x-amz-missing-meta\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        CacheControl: [, output.headers[\"cache-control\"]],\n        ContentDisposition: [, output.headers[\"content-disposition\"]],\n        ContentEncoding: [, output.headers[\"content-encoding\"]],\n        ContentLanguage: [, output.headers[\"content-language\"]],\n        ContentType: [, output.headers[\"content-type\"]],\n        Expires: [\n            () => void 0 !== output.headers[\"expires\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers[\"expires\"])),\n        ],\n        WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n        PartsCount: [\n            () => void 0 !== output.headers[\"x-amz-mp-parts-count\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output.headers[\"x-amz-mp-parts-count\"]),\n        ],\n        ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n        ObjectLockRetainUntilDate: [\n            () => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output.headers[\"x-amz-object-lock-retain-until-date\"])),\n        ],\n        ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n        Metadata: [\n            ,\n            Object.keys(output.headers)\n                .filter((header) => header.startsWith(\"x-amz-meta-\"))\n                .reduce((acc, header) => {\n                acc[header.substring(11)] = output.headers[header];\n                return acc;\n            }, {}),\n        ],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlHeadObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NotFound\":\n        case \"com.amazonaws.s3#NotFound\":\n            throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.AnalyticsConfiguration === \"\") {\n        contents.AnalyticsConfigurationList = [];\n    }\n    else if (data[\"AnalyticsConfiguration\"] !== undefined) {\n        contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"AnalyticsConfiguration\"]), context);\n    }\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ContinuationToken\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ContinuationToken\"]);\n    }\n    if (data.IntelligentTieringConfiguration === \"\") {\n        contents.IntelligentTieringConfigurationList = [];\n    }\n    else if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n        contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"IntelligentTieringConfiguration\"]), context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ContinuationToken\"]);\n    }\n    if (data.InventoryConfiguration === \"\") {\n        contents.InventoryConfigurationList = [];\n    }\n    else if (data[\"InventoryConfiguration\"] !== undefined) {\n        contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"InventoryConfiguration\"]), context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ContinuationToken\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data.MetricsConfiguration === \"\") {\n        contents.MetricsConfigurationList = [];\n    }\n    else if (data[\"MetricsConfiguration\"] !== undefined) {\n        contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"MetricsConfiguration\"]), context);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlListBucketsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.Buckets === \"\") {\n        contents.Buckets = [];\n    }\n    else if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n        contents.Buckets = deserializeAws_restXmlBuckets((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Buckets\"][\"Bucket\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListBucketsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlListMultipartUploadsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Bucket\"]);\n    }\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"CommonPrefixes\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyMarker\"] !== undefined) {\n        contents.KeyMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"KeyMarker\"]);\n    }\n    if (data[\"MaxUploads\"] !== undefined) {\n        contents.MaxUploads = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data[\"MaxUploads\"]);\n    }\n    if (data[\"NextKeyMarker\"] !== undefined) {\n        contents.NextKeyMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextKeyMarker\"]);\n    }\n    if (data[\"NextUploadIdMarker\"] !== undefined) {\n        contents.NextUploadIdMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextUploadIdMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Prefix\"]);\n    }\n    if (data[\"UploadIdMarker\"] !== undefined) {\n        contents.UploadIdMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"UploadIdMarker\"]);\n    }\n    if (data.Upload === \"\") {\n        contents.Uploads = [];\n    }\n    else if (data[\"Upload\"] !== undefined) {\n        contents.Uploads = deserializeAws_restXmlMultipartUploadList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Upload\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListMultipartUploadsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlListObjectsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.Contents === \"\") {\n        contents.Contents = [];\n    }\n    else if (data[\"Contents\"] !== undefined) {\n        contents.Contents = deserializeAws_restXmlObjectList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Contents\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data[\"Marker\"] !== undefined) {\n        contents.Marker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Marker\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Name\"]);\n    }\n    if (data[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListObjectsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchBucket\":\n        case \"com.amazonaws.s3#NoSuchBucket\":\n            throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlListObjectsV2Command = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectsV2CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.Contents === \"\") {\n        contents.Contents = [];\n    }\n    else if (data[\"Contents\"] !== undefined) {\n        contents.Contents = deserializeAws_restXmlObjectList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Contents\"]), context);\n    }\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ContinuationToken\"]);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyCount\"] !== undefined) {\n        contents.KeyCount = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data[\"KeyCount\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Name\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextContinuationToken\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Prefix\"]);\n    }\n    if (data[\"StartAfter\"] !== undefined) {\n        contents.StartAfter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"StartAfter\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListObjectsV2CommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchBucket\":\n        case \"com.amazonaws.s3#NoSuchBucket\":\n            throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlListObjectVersionsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectVersionsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.DeleteMarker === \"\") {\n        contents.DeleteMarkers = [];\n    }\n    else if (data[\"DeleteMarker\"] !== undefined) {\n        contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"DeleteMarker\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyMarker\"] !== undefined) {\n        contents.KeyMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"KeyMarker\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Name\"]);\n    }\n    if (data[\"NextKeyMarker\"] !== undefined) {\n        contents.NextKeyMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextKeyMarker\"]);\n    }\n    if (data[\"NextVersionIdMarker\"] !== undefined) {\n        contents.NextVersionIdMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextVersionIdMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Prefix\"]);\n    }\n    if (data[\"VersionIdMarker\"] !== undefined) {\n        contents.VersionIdMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"VersionIdMarker\"]);\n    }\n    if (data.Version === \"\") {\n        contents.Versions = [];\n    }\n    else if (data[\"Version\"] !== undefined) {\n        contents.Versions = deserializeAws_restXmlObjectVersionList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Version\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListObjectVersionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlListPartsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListPartsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        AbortDate: [\n            () => void 0 !== output.headers[\"x-amz-abort-date\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc7231DateTime)(output.headers[\"x-amz-abort-date\"])),\n        ],\n        AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Bucket\"]);\n    }\n    if (data[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"ChecksumAlgorithm\"]);\n    }\n    if (data[\"Initiator\"] !== undefined) {\n        contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(data[\"IsTruncated\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"Key\"]);\n    }\n    if (data[\"MaxParts\"] !== undefined) {\n        contents.MaxParts = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(data[\"MaxParts\"]);\n    }\n    if (data[\"NextPartNumberMarker\"] !== undefined) {\n        contents.NextPartNumberMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"NextPartNumberMarker\"]);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    if (data[\"PartNumberMarker\"] !== undefined) {\n        contents.PartNumberMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"PartNumberMarker\"]);\n    }\n    if (data.Part === \"\") {\n        contents.Parts = [];\n    }\n    else if (data[\"Part\"] !== undefined) {\n        contents.Parts = deserializeAws_restXmlParts((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(data[\"Part\"]), context);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"StorageClass\"]);\n    }\n    if (data[\"UploadId\"] !== undefined) {\n        contents.UploadId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"UploadId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlListPartsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketLoggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketLoggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketRequestPaymentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketVersioningCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketVersioningCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutObjectAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlPutObjectLegalHoldCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectLegalHoldCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutObjectLockConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutObjectRetentionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectRetentionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlPutPublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlPutPublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlRestoreObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlRestoreObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        RestoreOutputPath: [, output.headers[\"x-amz-restore-output-path\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlRestoreObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ObjectAlreadyInActiveTierError\":\n        case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n            throw await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n                output,\n                parsedBody,\n                exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_restXmlSelectObjectContentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlSelectObjectContentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = output.body;\n    contents.Payload = deserializeAws_restXmlSelectObjectContentEventStream(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlSelectObjectContentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlUploadPartCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUploadPartCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlUploadPartCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlUploadPartCopyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUploadPartCopyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectObject)(await parseBody(output.body, context));\n    contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlUploadPartCopyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst deserializeAws_restXmlWriteGetObjectResponseCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlWriteGetObjectResponseCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlWriteGetObjectResponseCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: _models_S3ServiceException__WEBPACK_IMPORTED_MODULE_4__.S3ServiceException,\n        errorCode,\n    });\n};\nconst map = _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.map;\nconst deserializeAws_restXmlBucketAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.BucketAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.BucketAlreadyOwnedByYou({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlInvalidObjectStateResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    if (data[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"AccessTier\"]);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(data[\"StorageClass\"]);\n    }\n    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.InvalidObjectState({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchBucketResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.NoSuchBucket({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchKeyResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.NoSuchKey({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNoSuchUploadResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.NoSuchUpload({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlNotFoundResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.NotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new _models_models_1__WEBPACK_IMPORTED_MODULE_6__.ObjectAlreadyInActiveTierError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new _models_models_0__WEBPACK_IMPORTED_MODULE_5__.ObjectNotInActiveTierError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restXmlSelectObjectContentEventStream = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"Records\"] != null) {\n            return {\n                Records: await deserializeAws_restXmlRecordsEvent_event(event[\"Records\"], context),\n            };\n        }\n        if (event[\"Stats\"] != null) {\n            return {\n                Stats: await deserializeAws_restXmlStatsEvent_event(event[\"Stats\"], context),\n            };\n        }\n        if (event[\"Progress\"] != null) {\n            return {\n                Progress: await deserializeAws_restXmlProgressEvent_event(event[\"Progress\"], context),\n            };\n        }\n        if (event[\"Cont\"] != null) {\n            return {\n                Cont: await deserializeAws_restXmlContinuationEvent_event(event[\"Cont\"], context),\n            };\n        }\n        if (event[\"End\"] != null) {\n            return {\n                End: await deserializeAws_restXmlEndEvent_event(event[\"End\"], context),\n            };\n        }\n        return { $unknown: output };\n    });\n};\nconst deserializeAws_restXmlContinuationEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, deserializeAws_restXmlContinuationEvent(data, context));\n    return contents;\n};\nconst deserializeAws_restXmlEndEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, deserializeAws_restXmlEndEvent(data, context));\n    return contents;\n};\nconst deserializeAws_restXmlProgressEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    contents.Details = deserializeAws_restXmlProgress(data, context);\n    return contents;\n};\nconst deserializeAws_restXmlRecordsEvent_event = async (output, context) => {\n    const contents = {};\n    contents.Payload = output.body;\n    return contents;\n};\nconst deserializeAws_restXmlStatsEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    contents.Details = deserializeAws_restXmlStats(data, context);\n    return contents;\n};\nconst serializeAws_restXmlAbortIncompleteMultipartUpload = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AbortIncompleteMultipartUpload\");\n    if (input.DaysAfterInitiation != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"DaysAfterInitiation\", String(input.DaysAfterInitiation)).withName(\"DaysAfterInitiation\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccelerateConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AccelerateConfiguration\");\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketAccelerateStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccessControlPolicy = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AccessControlPolicy\");\n    if (input.Grants != null) {\n        const nodes = serializeAws_restXmlGrants(input.Grants, context);\n        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AccessControlList\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Owner != null) {\n        const node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccessControlTranslation = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AccessControlTranslation\");\n    if (input.Owner != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"OwnerOverride\", input.Owner).withName(\"Owner\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAllowedHeaders = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AllowedHeader\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAllowedMethods = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AllowedMethod\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAllowedOrigins = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AllowedOrigin\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAnalyticsAndOperator = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AnalyticsAndOperator\");\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AnalyticsConfiguration\");\n    if (input.Id != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AnalyticsId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClassAnalysis != null) {\n        const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\"StorageClassAnalysis\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsExportDestination = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AnalyticsExportDestination\");\n    if (input.S3BucketDestination != null) {\n        const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsFilter = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AnalyticsFilter\");\n    _models_models_0__WEBPACK_IMPORTED_MODULE_5__.AnalyticsFilter.visit(input, {\n        Prefix: (value) => {\n            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode || value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsS3BucketDestination = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AnalyticsS3BucketDestination\");\n    if (input.Format != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AnalyticsS3ExportFileFormat\", input.Format).withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BucketAccountId != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AccountId\", input.BucketAccountId).withName(\"BucketAccountId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlBucketLifecycleConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"BucketLifecycleConfiguration\");\n    if (input.Rules != null) {\n        const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlBucketLoggingStatus = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"BucketLoggingStatus\");\n    if (input.LoggingEnabled != null) {\n        const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedMultipartUpload = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"CompletedMultipartUpload\");\n    if (input.Parts != null) {\n        const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n        nodes.map((node) => {\n            node = node.withName(\"Part\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedPart = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"CompletedPart\");\n    if (input.ETag != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ETag\", input.ETag).withName(\"ETag\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumCRC32 != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ChecksumCRC32\", input.ChecksumCRC32).withName(\"ChecksumCRC32\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumCRC32C != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ChecksumCRC32C\", input.ChecksumCRC32C).withName(\"ChecksumCRC32C\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumSHA1 != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ChecksumSHA1\", input.ChecksumSHA1).withName(\"ChecksumSHA1\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumSHA256 != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ChecksumSHA256\", input.ChecksumSHA256).withName(\"ChecksumSHA256\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.PartNumber != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"PartNumber\", String(input.PartNumber)).withName(\"PartNumber\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedPartList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlCompletedPart(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlCondition = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Condition\");\n    if (input.HttpErrorCodeReturnedEquals != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"HttpErrorCodeReturnedEquals\", input.HttpErrorCodeReturnedEquals)\n            .withName(\"HttpErrorCodeReturnedEquals\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KeyPrefixEquals != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"KeyPrefixEquals\", input.KeyPrefixEquals).withName(\"KeyPrefixEquals\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"CORSConfiguration\");\n    if (input.CORSRules != null) {\n        const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n        nodes.map((node) => {\n            node = node.withName(\"CORSRule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSRule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"CORSRule\");\n    if (input.ID != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowedHeaders != null) {\n        const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedHeader\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AllowedMethods != null) {\n        const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedMethod\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AllowedOrigins != null) {\n        const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedOrigin\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.ExposeHeaders != null) {\n        const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n        nodes.map((node) => {\n            node = node.withName(\"ExposeHeader\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.MaxAgeSeconds != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"MaxAgeSeconds\", String(input.MaxAgeSeconds)).withName(\"MaxAgeSeconds\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlCORSRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlCreateBucketConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"CreateBucketConfiguration\");\n    if (input.LocationConstraint != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketLocationConstraint\", input.LocationConstraint).withName(\"LocationConstraint\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCSVInput = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"CSVInput\");\n    if (input.FileHeaderInfo != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"FileHeaderInfo\", input.FileHeaderInfo).withName(\"FileHeaderInfo\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comments != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Comments\", input.Comments).withName(\"Comments\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteEscapeCharacter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RecordDelimiter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldDelimiter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteCharacter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowQuotedRecordDelimiter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AllowQuotedRecordDelimiter\", String(input.AllowQuotedRecordDelimiter))\n            .withName(\"AllowQuotedRecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCSVOutput = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"CSVOutput\");\n    if (input.QuoteFields != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"QuoteFields\", input.QuoteFields).withName(\"QuoteFields\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteEscapeCharacter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RecordDelimiter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldDelimiter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteCharacter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDefaultRetention = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"DefaultRetention\");\n    if (input.Mode != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Years != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Years\", String(input.Years)).withName(\"Years\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDelete = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Delete\");\n    if (input.Objects != null) {\n        const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n        nodes.map((node) => {\n            node = node.withName(\"Object\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Quiet != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Quiet\", String(input.Quiet)).withName(\"Quiet\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDeleteMarkerReplication = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"DeleteMarkerReplication\");\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"DeleteMarkerReplicationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDestination = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Destination\");\n    if (input.Bucket != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Account != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AccountId\", input.Account).withName(\"Account\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlTranslation != null) {\n        const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\"AccessControlTranslation\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EncryptionConfiguration != null) {\n        const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\"EncryptionConfiguration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplicationTime != null) {\n        const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Metrics != null) {\n        const node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryption = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Encryption\");\n    if (input.EncryptionType != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ServerSideEncryption\", input.EncryptionType).withName(\"EncryptionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSKeyId != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"SSEKMSKeyId\", input.KMSKeyId).withName(\"KMSKeyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSContext != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"KMSContext\", input.KMSContext).withName(\"KMSContext\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryptionConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"EncryptionConfiguration\");\n    if (input.ReplicaKmsKeyID != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ReplicaKmsKeyID\", input.ReplicaKmsKeyID).withName(\"ReplicaKmsKeyID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlErrorDocument = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ErrorDocument\");\n    if (input.Key != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEventBridgeConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"EventBridgeConfiguration\");\n    return bodyNode;\n};\nconst serializeAws_restXmlEventList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Event\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlExistingObjectReplication = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ExistingObjectReplication\");\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ExistingObjectReplicationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlExposeHeaders = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ExposeHeader\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlFilterRule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"FilterRule\");\n    if (input.Name != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"FilterRuleName\", input.Name).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"FilterRuleValue\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlFilterRuleList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlFilterRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlGlacierJobParameters = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"GlacierJobParameters\");\n    if (input.Tier != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrant = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Grant\");\n    if (input.Grantee != null) {\n        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n        node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Permission != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Permission\", input.Permission).withName(\"Permission\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrantee = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Grantee\");\n    if (input.DisplayName != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EmailAddress != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"EmailAddress\", input.EmailAddress).withName(\"EmailAddress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.URI != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"URI\", input.URI).withName(\"URI\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Type != null) {\n        bodyNode.addAttribute(\"xsi:type\", input.Type);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrants = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlGrant(entry, context);\n        return node.withName(\"Grant\");\n    });\n};\nconst serializeAws_restXmlIndexDocument = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"IndexDocument\");\n    if (input.Suffix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Suffix\", input.Suffix).withName(\"Suffix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInputSerialization = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"InputSerialization\");\n    if (input.CSV != null) {\n        const node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CompressionType != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"CompressionType\", input.CompressionType).withName(\"CompressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.JSON != null) {\n        const node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Parquet != null) {\n        const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringAndOperator = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"IntelligentTieringAndOperator\");\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"IntelligentTieringConfiguration\");\n    if (input.Id != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"IntelligentTieringId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"IntelligentTieringStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tierings != null) {\n        const nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tiering\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringFilter = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"IntelligentTieringFilter\");\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tag != null) {\n        const node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.And != null) {\n        const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"InventoryConfiguration\");\n    if (input.Destination != null) {\n        const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IsEnabled != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"IsEnabled\", String(input.IsEnabled)).withName(\"IsEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Id != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"InventoryId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IncludedObjectVersions != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"InventoryIncludedObjectVersions\", input.IncludedObjectVersions)\n            .withName(\"IncludedObjectVersions\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OptionalFields != null) {\n        const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"OptionalFields\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Schedule != null) {\n        const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryDestination = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"InventoryDestination\");\n    if (input.S3BucketDestination != null) {\n        const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryEncryption = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"InventoryEncryption\");\n    if (input.SSES3 != null) {\n        const node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SSEKMS != null) {\n        const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryFilter = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"InventoryFilter\");\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryOptionalFields = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"InventoryOptionalField\", entry);\n        return node.withName(\"Field\");\n    });\n};\nconst serializeAws_restXmlInventoryS3BucketDestination = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"InventoryS3BucketDestination\");\n    if (input.AccountId != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AccountId\", input.AccountId).withName(\"AccountId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Format != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"InventoryFormat\", input.Format).withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Encryption != null) {\n        const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventorySchedule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"InventorySchedule\");\n    if (input.Frequency != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"InventoryFrequency\", input.Frequency).withName(\"Frequency\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlJSONInput = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"JSONInput\");\n    if (input.Type != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"JSONType\", input.Type).withName(\"Type\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlJSONOutput = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"JSONOutput\");\n    if (input.RecordDelimiter != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"LambdaFunctionConfiguration\");\n    if (input.Id != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.LambdaFunctionArn != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"LambdaFunctionArn\", input.LambdaFunctionArn).withName(\"CloudFunction\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlLifecycleExpiration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"LifecycleExpiration\");\n    if (input.Date != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Date\", input.Date.toISOString().split(\".\")[0] + \"Z\").withName(\"Date\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpiredObjectDeleteMarker != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ExpiredObjectDeleteMarker\", String(input.ExpiredObjectDeleteMarker))\n            .withName(\"ExpiredObjectDeleteMarker\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"LifecycleRule\");\n    if (input.Expiration != null) {\n        const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ExpirationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Transitions != null) {\n        const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n        nodes.map((node) => {\n            node = node.withName(\"Transition\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.NoncurrentVersionTransitions != null) {\n        const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n        nodes.map((node) => {\n            node = node.withName(\"NoncurrentVersionTransition\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.NoncurrentVersionExpiration != null) {\n        const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\"NoncurrentVersionExpiration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AbortIncompleteMultipartUpload != null) {\n        const node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName(\"AbortIncompleteMultipartUpload\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRuleAndOperator = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"LifecycleRuleAndOperator\");\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.ObjectSizeGreaterThan != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectSizeGreaterThanBytes\", String(input.ObjectSizeGreaterThan))\n            .withName(\"ObjectSizeGreaterThan\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ObjectSizeLessThan != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectSizeLessThanBytes\", String(input.ObjectSizeLessThan))\n            .withName(\"ObjectSizeLessThan\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRuleFilter = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"LifecycleRuleFilter\");\n    _models_models_0__WEBPACK_IMPORTED_MODULE_5__.LifecycleRuleFilter.visit(input, {\n        Prefix: (value) => {\n            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        ObjectSizeGreaterThan: (value) => {\n            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectSizeGreaterThanBytes\", String(value)).withName(\"ObjectSizeGreaterThan\");\n            bodyNode.addChildNode(node);\n        },\n        ObjectSizeLessThan: (value) => {\n            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectSizeLessThanBytes\", String(value)).withName(\"ObjectSizeLessThan\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode || value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlLifecycleRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlLoggingEnabled = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"LoggingEnabled\");\n    if (input.TargetBucket != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"TargetBucket\", input.TargetBucket).withName(\"TargetBucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TargetGrants != null) {\n        const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"TargetGrants\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.TargetPrefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"TargetPrefix\", input.TargetPrefix).withName(\"TargetPrefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetadataEntry = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"MetadataEntry\");\n    if (input.Name != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"MetadataKey\", input.Name).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"MetadataValue\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetrics = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Metrics\");\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"MetricsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EventThreshold != null) {\n        const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsAndOperator = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"MetricsAndOperator\");\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AccessPointArn != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AccessPointArn\", input.AccessPointArn).withName(\"AccessPointArn\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"MetricsConfiguration\");\n    if (input.Id != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"MetricsId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsFilter = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"MetricsFilter\");\n    _models_models_0__WEBPACK_IMPORTED_MODULE_5__.MetricsFilter.visit(input, {\n        Prefix: (value) => {\n            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        AccessPointArn: (value) => {\n            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"AccessPointArn\", value).withName(\"AccessPointArn\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode || value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionExpiration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"NoncurrentVersionExpiration\");\n    if (input.NoncurrentDays != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.NewerNoncurrentVersions != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"VersionCount\", String(input.NewerNoncurrentVersions))\n            .withName(\"NewerNoncurrentVersions\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionTransition = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"NoncurrentVersionTransition\");\n    if (input.NoncurrentDays != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.NewerNoncurrentVersions != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"VersionCount\", String(input.NewerNoncurrentVersions))\n            .withName(\"NewerNoncurrentVersions\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionTransitionList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlNotificationConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"NotificationConfiguration\");\n    if (input.TopicConfigurations != null) {\n        const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"TopicConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.QueueConfigurations != null) {\n        const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"QueueConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.LambdaFunctionConfigurations != null) {\n        const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"CloudFunctionConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.EventBridgeConfiguration != null) {\n        const node = serializeAws_restXmlEventBridgeConfiguration(input.EventBridgeConfiguration, context).withName(\"EventBridgeConfiguration\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNotificationConfigurationFilter = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"NotificationConfigurationFilter\");\n    if (input.Key != null) {\n        const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectIdentifier = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ObjectIdentifier\");\n    if (input.Key != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.VersionId != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectVersionId\", input.VersionId).withName(\"VersionId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectIdentifierList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlObjectIdentifier(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlObjectLockConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ObjectLockConfiguration\");\n    if (input.ObjectLockEnabled != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectLockEnabled\", input.ObjectLockEnabled).withName(\"ObjectLockEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Rule != null) {\n        const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockLegalHold = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ObjectLockLegalHold\");\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectLockLegalHoldStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockRetention = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ObjectLockRetention\");\n    if (input.Mode != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RetainUntilDate != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Date\", input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\")\n            .withName(\"RetainUntilDate\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockRule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ObjectLockRule\");\n    if (input.DefaultRetention != null) {\n        const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOutputLocation = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"OutputLocation\");\n    if (input.S3 != null) {\n        const node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOutputSerialization = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"OutputSerialization\");\n    if (input.CSV != null) {\n        const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.JSON != null) {\n        const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwner = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Owner\");\n    if (input.DisplayName != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControls = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"OwnershipControls\");\n    if (input.Rules != null) {\n        const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControlsRule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"OwnershipControlsRule\");\n    if (input.ObjectOwnership != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectOwnership\", input.ObjectOwnership).withName(\"ObjectOwnership\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControlsRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlParquetInput = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ParquetInput\");\n    return bodyNode;\n};\nconst serializeAws_restXmlPublicAccessBlockConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"PublicAccessBlockConfiguration\");\n    if (input.BlockPublicAcls != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Setting\", String(input.BlockPublicAcls)).withName(\"BlockPublicAcls\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IgnorePublicAcls != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Setting\", String(input.IgnorePublicAcls)).withName(\"IgnorePublicAcls\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BlockPublicPolicy != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Setting\", String(input.BlockPublicPolicy)).withName(\"BlockPublicPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RestrictPublicBuckets != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Setting\", String(input.RestrictPublicBuckets)).withName(\"RestrictPublicBuckets\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueueConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"QueueConfiguration\");\n    if (input.Id != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueueArn != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"QueueArn\", input.QueueArn).withName(\"Queue\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueueConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlQueueConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlRedirect = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Redirect\");\n    if (input.HostName != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HttpRedirectCode != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"HttpRedirectCode\", input.HttpRedirectCode).withName(\"HttpRedirectCode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protocol != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplaceKeyPrefixWith != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ReplaceKeyPrefixWith\", input.ReplaceKeyPrefixWith).withName(\"ReplaceKeyPrefixWith\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplaceKeyWith != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ReplaceKeyWith\", input.ReplaceKeyWith).withName(\"ReplaceKeyWith\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRedirectAllRequestsTo = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"RedirectAllRequestsTo\");\n    if (input.HostName != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protocol != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicaModifications = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ReplicaModifications\");\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ReplicaModificationsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ReplicationConfiguration\");\n    if (input.Role != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Role\", input.Role).withName(\"Role\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Rules != null) {\n        const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ReplicationRule\");\n    if (input.ID != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Priority != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Priority\", String(input.Priority)).withName(\"Priority\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ReplicationRuleStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SourceSelectionCriteria != null) {\n        const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\"SourceSelectionCriteria\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExistingObjectReplication != null) {\n        const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\"ExistingObjectReplication\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Destination != null) {\n        const node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DeleteMarkerReplication != null) {\n        const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\"DeleteMarkerReplication\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRuleAndOperator = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ReplicationRuleAndOperator\");\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRuleFilter = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ReplicationRuleFilter\");\n    _models_models_0__WEBPACK_IMPORTED_MODULE_5__.ReplicationRuleFilter.visit(input, {\n        Prefix: (value) => {\n            const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode || value instanceof _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlReplicationRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlReplicationTime = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ReplicationTime\");\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ReplicationTimeStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Time != null) {\n        const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationTimeValue = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ReplicationTimeValue\");\n    if (input.Minutes != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Minutes\", String(input.Minutes)).withName(\"Minutes\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRequestPaymentConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"RequestPaymentConfiguration\");\n    if (input.Payer != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Payer\", input.Payer).withName(\"Payer\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRequestProgress = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"RequestProgress\");\n    if (input.Enabled != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"EnableRequestProgress\", String(input.Enabled)).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRestoreRequest = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"RestoreRequest\");\n    if (input.Days != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.GlacierJobParameters != null) {\n        const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\"GlacierJobParameters\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Type != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"RestoreRequestType\", input.Type).withName(\"Type\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tier != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Description != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Description\", input.Description).withName(\"Description\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SelectParameters != null) {\n        const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputLocation != null) {\n        const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRoutingRule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"RoutingRule\");\n    if (input.Condition != null) {\n        const node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Redirect != null) {\n        const node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRoutingRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlRoutingRule(entry, context);\n        return node.withName(\"RoutingRule\");\n    });\n};\nconst serializeAws_restXmlS3KeyFilter = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"S3KeyFilter\");\n    if (input.FilterRules != null) {\n        const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n        nodes.map((node) => {\n            node = node.withName(\"FilterRule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlS3Location = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"S3Location\");\n    if (input.BucketName != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketName\", input.BucketName).withName(\"BucketName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"LocationPrefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Encryption != null) {\n        const node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CannedACL != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectCannedACL\", input.CannedACL).withName(\"CannedACL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlList != null) {\n        const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"AccessControlList\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Tagging != null) {\n        const node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.UserMetadata != null) {\n        const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"UserMetadata\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.StorageClass != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlScanRange = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ScanRange\");\n    if (input.Start != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Start\", String(input.Start)).withName(\"Start\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.End != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"End\", String(input.End)).withName(\"End\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSelectParameters = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"SelectParameters\");\n    if (input.InputSerialization != null) {\n        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpressionType != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Expression != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputSerialization != null) {\n        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionByDefault = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ServerSideEncryptionByDefault\");\n    if (input.SSEAlgorithm != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ServerSideEncryption\", input.SSEAlgorithm).withName(\"SSEAlgorithm\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSMasterKeyID != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"SSEKMSKeyId\", input.KMSMasterKeyID).withName(\"KMSMasterKeyID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ServerSideEncryptionConfiguration\");\n    if (input.Rules != null) {\n        const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionRule = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"ServerSideEncryptionRule\");\n    if (input.ApplyServerSideEncryptionByDefault != null) {\n        const node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName(\"ApplyServerSideEncryptionByDefault\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BucketKeyEnabled != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketKeyEnabled\", String(input.BucketKeyEnabled)).withName(\"BucketKeyEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlSourceSelectionCriteria = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"SourceSelectionCriteria\");\n    if (input.SseKmsEncryptedObjects != null) {\n        const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\"SseKmsEncryptedObjects\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplicaModifications != null) {\n        const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\"ReplicaModifications\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSSEKMS = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"SSE-KMS\");\n    if (input.KeyId != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"SSEKMSKeyId\", input.KeyId).withName(\"KeyId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSseKmsEncryptedObjects = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"SseKmsEncryptedObjects\");\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"SseKmsEncryptedObjectsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSSES3 = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"SSE-S3\");\n    return bodyNode;\n};\nconst serializeAws_restXmlStorageClassAnalysis = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"StorageClassAnalysis\");\n    if (input.DataExport != null) {\n        const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlStorageClassAnalysisDataExport = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"StorageClassAnalysisDataExport\");\n    if (input.OutputSchemaVersion != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"StorageClassAnalysisSchemaVersion\", input.OutputSchemaVersion)\n            .withName(\"OutputSchemaVersion\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Destination != null) {\n        const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTag = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Tag\");\n    if (input.Key != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Value\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTagging = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Tagging\");\n    if (input.TagSet != null) {\n        const nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"TagSet\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTagSet = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTag(entry, context);\n        return node.withName(\"Tag\");\n    });\n};\nconst serializeAws_restXmlTargetGrant = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"TargetGrant\");\n    if (input.Grantee != null) {\n        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n        node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Permission != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketLogsPermission\", input.Permission).withName(\"Permission\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTargetGrants = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTargetGrant(entry, context);\n        return node.withName(\"Grant\");\n    });\n};\nconst serializeAws_restXmlTiering = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Tiering\");\n    if (input.Days != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"IntelligentTieringDays\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessTier != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"IntelligentTieringAccessTier\", input.AccessTier).withName(\"AccessTier\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTieringList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTiering(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlTopicConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"TopicConfiguration\");\n    if (input.Id != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TopicArn != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"TopicArn\", input.TopicArn).withName(\"Topic\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTopicConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTopicConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlTransition = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"Transition\");\n    if (input.Date != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Date\", input.Date.toISOString().split(\".\")[0] + \"Z\").withName(\"Date\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTransitionList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlTransition(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlUserMetadata = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = serializeAws_restXmlMetadataEntry(entry, context);\n        return node.withName(\"MetadataEntry\");\n    });\n};\nconst serializeAws_restXmlVersioningConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"VersioningConfiguration\");\n    if (input.MFADelete != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"MFADelete\", input.MFADelete).withName(\"MfaDelete\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode.of(\"BucketVersioningStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlWebsiteConfiguration = (input, context) => {\n    const bodyNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"WebsiteConfiguration\");\n    if (input.ErrorDocument != null) {\n        const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IndexDocument != null) {\n        const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RedirectAllRequestsTo != null) {\n        const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\"RedirectAllRequestsTo\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RoutingRules != null) {\n        const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n        const containerNode = new _aws_sdk_xml_builder__WEBPACK_IMPORTED_MODULE_2__.XmlNode(\"RoutingRules\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst deserializeAws_restXmlAbortIncompleteMultipartUpload = (output, context) => {\n    const contents = {\n        DaysAfterInitiation: undefined,\n    };\n    if (output[\"DaysAfterInitiation\"] !== undefined) {\n        contents.DaysAfterInitiation = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"DaysAfterInitiation\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAccessControlTranslation = (output, context) => {\n    const contents = {\n        Owner: undefined,\n    };\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Owner\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAllowedHeaders = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);\n    });\n};\nconst deserializeAws_restXmlAllowedMethods = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);\n    });\n};\nconst deserializeAws_restXmlAllowedOrigins = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);\n    });\n};\nconst deserializeAws_restXmlAnalyticsAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n        StorageClassAnalysis: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Id\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlAnalyticsFilter((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectUnion)(output[\"Filter\"]), context);\n    }\n    if (output[\"StorageClassAnalysis\"] !== undefined) {\n        contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlAnalyticsExportDestination = (output, context) => {\n    const contents = {\n        S3BucketDestination: undefined,\n    };\n    if (output[\"S3BucketDestination\"] !== undefined) {\n        contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output[\"S3BucketDestination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlAnalyticsS3BucketDestination = (output, context) => {\n    const contents = {\n        Format: undefined,\n        BucketAccountId: undefined,\n        Bucket: undefined,\n        Prefix: undefined,\n    };\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Format\"]);\n    }\n    if (output[\"BucketAccountId\"] !== undefined) {\n        contents.BucketAccountId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"BucketAccountId\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Bucket\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlBucket = (output, context) => {\n    const contents = {\n        Name: undefined,\n        CreationDate: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Name\"]);\n    }\n    if (output[\"CreationDate\"] !== undefined) {\n        contents.CreationDate = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"CreationDate\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlBuckets = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlBucket(entry, context);\n    });\n};\nconst deserializeAws_restXmlChecksum = (output, context) => {\n    const contents = {\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlChecksumAlgorithmList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);\n    });\n};\nconst deserializeAws_restXmlCommonPrefix = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCommonPrefixList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlCommonPrefix(entry, context);\n    });\n};\nconst deserializeAws_restXmlCondition = (output, context) => {\n    const contents = {\n        HttpErrorCodeReturnedEquals: undefined,\n        KeyPrefixEquals: undefined,\n    };\n    if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n        contents.HttpErrorCodeReturnedEquals = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"HttpErrorCodeReturnedEquals\"]);\n    }\n    if (output[\"KeyPrefixEquals\"] !== undefined) {\n        contents.KeyPrefixEquals = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"KeyPrefixEquals\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlContinuationEvent = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlCopyObjectResult = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        LastModified: undefined,\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ETag\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"LastModified\"]));\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCopyPartResult = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        LastModified: undefined,\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ETag\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"LastModified\"]));\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCORSRule = (output, context) => {\n    const contents = {\n        ID: undefined,\n        AllowedHeaders: undefined,\n        AllowedMethods: undefined,\n        AllowedOrigins: undefined,\n        ExposeHeaders: undefined,\n        MaxAgeSeconds: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ID\"]);\n    }\n    if (output.AllowedHeader === \"\") {\n        contents.AllowedHeaders = [];\n    }\n    else if (output[\"AllowedHeader\"] !== undefined) {\n        contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"AllowedHeader\"]), context);\n    }\n    if (output.AllowedMethod === \"\") {\n        contents.AllowedMethods = [];\n    }\n    else if (output[\"AllowedMethod\"] !== undefined) {\n        contents.AllowedMethods = deserializeAws_restXmlAllowedMethods((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"AllowedMethod\"]), context);\n    }\n    if (output.AllowedOrigin === \"\") {\n        contents.AllowedOrigins = [];\n    }\n    else if (output[\"AllowedOrigin\"] !== undefined) {\n        contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"AllowedOrigin\"]), context);\n    }\n    if (output.ExposeHeader === \"\") {\n        contents.ExposeHeaders = [];\n    }\n    else if (output[\"ExposeHeader\"] !== undefined) {\n        contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"ExposeHeader\"]), context);\n    }\n    if (output[\"MaxAgeSeconds\"] !== undefined) {\n        contents.MaxAgeSeconds = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"MaxAgeSeconds\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCORSRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlCORSRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlDefaultRetention = (output, context) => {\n    const contents = {\n        Mode: undefined,\n        Days: undefined,\n        Years: undefined,\n    };\n    if (output[\"Mode\"] !== undefined) {\n        contents.Mode = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Mode\"]);\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"Days\"]);\n    }\n    if (output[\"Years\"] !== undefined) {\n        contents.Years = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"Years\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeletedObject = (output, context) => {\n    const contents = {\n        Key: undefined,\n        VersionId: undefined,\n        DeleteMarker: undefined,\n        DeleteMarkerVersionId: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"VersionId\"]);\n    }\n    if (output[\"DeleteMarker\"] !== undefined) {\n        contents.DeleteMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"DeleteMarker\"]);\n    }\n    if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n        contents.DeleteMarkerVersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"DeleteMarkerVersionId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeletedObjects = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlDeletedObject(entry, context);\n    });\n};\nconst deserializeAws_restXmlDeleteMarkerEntry = (output, context) => {\n    const contents = {\n        Owner: undefined,\n        Key: undefined,\n        VersionId: undefined,\n        IsLatest: undefined,\n        LastModified: undefined,\n    };\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"VersionId\"]);\n    }\n    if (output[\"IsLatest\"] !== undefined) {\n        contents.IsLatest = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"IsLatest\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"LastModified\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeleteMarkerReplication = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeleteMarkers = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n    });\n};\nconst deserializeAws_restXmlDestination = (output, context) => {\n    const contents = {\n        Bucket: undefined,\n        Account: undefined,\n        StorageClass: undefined,\n        AccessControlTranslation: undefined,\n        EncryptionConfiguration: undefined,\n        ReplicationTime: undefined,\n        Metrics: undefined,\n    };\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Bucket\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Account\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"StorageClass\"]);\n    }\n    if (output[\"AccessControlTranslation\"] !== undefined) {\n        contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output[\"AccessControlTranslation\"], context);\n    }\n    if (output[\"EncryptionConfiguration\"] !== undefined) {\n        contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output[\"EncryptionConfiguration\"], context);\n    }\n    if (output[\"ReplicationTime\"] !== undefined) {\n        contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n    }\n    if (output[\"Metrics\"] !== undefined) {\n        contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEncryptionConfiguration = (output, context) => {\n    const contents = {\n        ReplicaKmsKeyID: undefined,\n    };\n    if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n        contents.ReplicaKmsKeyID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ReplicaKmsKeyID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEndEvent = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXml_Error = (output, context) => {\n    const contents = {\n        Key: undefined,\n        VersionId: undefined,\n        Code: undefined,\n        Message: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"VersionId\"]);\n    }\n    if (output[\"Code\"] !== undefined) {\n        contents.Code = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Code\"]);\n    }\n    if (output[\"Message\"] !== undefined) {\n        contents.Message = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlErrorDocument = (output, context) => {\n    const contents = {\n        Key: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Key\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlErrors = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXml_Error(entry, context);\n    });\n};\nconst deserializeAws_restXmlEventBridgeConfiguration = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlEventList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);\n    });\n};\nconst deserializeAws_restXmlExistingObjectReplication = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlExposeHeaders = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);\n    });\n};\nconst deserializeAws_restXmlFilterRule = (output, context) => {\n    const contents = {\n        Name: undefined,\n        Value: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Name\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Value\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFilterRuleList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlFilterRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlGetObjectAttributesParts = (output, context) => {\n    const contents = {\n        TotalPartsCount: undefined,\n        PartNumberMarker: undefined,\n        NextPartNumberMarker: undefined,\n        MaxParts: undefined,\n        IsTruncated: undefined,\n        Parts: undefined,\n    };\n    if (output[\"PartsCount\"] !== undefined) {\n        contents.TotalPartsCount = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"PartsCount\"]);\n    }\n    if (output[\"PartNumberMarker\"] !== undefined) {\n        contents.PartNumberMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"PartNumberMarker\"]);\n    }\n    if (output[\"NextPartNumberMarker\"] !== undefined) {\n        contents.NextPartNumberMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"NextPartNumberMarker\"]);\n    }\n    if (output[\"MaxParts\"] !== undefined) {\n        contents.MaxParts = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"MaxParts\"]);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"IsTruncated\"]);\n    }\n    if (output.Part === \"\") {\n        contents.Parts = [];\n    }\n    else if (output[\"Part\"] !== undefined) {\n        contents.Parts = deserializeAws_restXmlPartsList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Part\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGrant = (output, context) => {\n    const contents = {\n        Grantee: undefined,\n        Permission: undefined,\n    };\n    if (output[\"Grantee\"] !== undefined) {\n        contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n    }\n    if (output[\"Permission\"] !== undefined) {\n        contents.Permission = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Permission\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGrantee = (output, context) => {\n    const contents = {\n        DisplayName: undefined,\n        EmailAddress: undefined,\n        ID: undefined,\n        URI: undefined,\n        Type: undefined,\n    };\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"DisplayName\"]);\n    }\n    if (output[\"EmailAddress\"] !== undefined) {\n        contents.EmailAddress = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"EmailAddress\"]);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ID\"]);\n    }\n    if (output[\"URI\"] !== undefined) {\n        contents.URI = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"URI\"]);\n    }\n    if (output[\"xsi:type\"] !== undefined) {\n        contents.Type = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"xsi:type\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGrants = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlGrant(entry, context);\n    });\n};\nconst deserializeAws_restXmlIndexDocument = (output, context) => {\n    const contents = {\n        Suffix: undefined,\n    };\n    if (output[\"Suffix\"] !== undefined) {\n        contents.Suffix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Suffix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInitiator = (output, context) => {\n    const contents = {\n        ID: undefined,\n        DisplayName: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ID\"]);\n    }\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"DisplayName\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n        Status: undefined,\n        Tierings: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Id\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    if (output.Tiering === \"\") {\n        contents.Tierings = [];\n    }\n    else if (output[\"Tiering\"] !== undefined) {\n        contents.Tierings = deserializeAws_restXmlTieringList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Tiering\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlIntelligentTieringFilter = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tag: undefined,\n        And: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n    }\n    if (output[\"And\"] !== undefined) {\n        contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryConfiguration = (output, context) => {\n    const contents = {\n        Destination: undefined,\n        IsEnabled: undefined,\n        Filter: undefined,\n        Id: undefined,\n        IncludedObjectVersions: undefined,\n        OptionalFields: undefined,\n        Schedule: undefined,\n    };\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n    }\n    if (output[\"IsEnabled\"] !== undefined) {\n        contents.IsEnabled = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"IsEnabled\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n    }\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Id\"]);\n    }\n    if (output[\"IncludedObjectVersions\"] !== undefined) {\n        contents.IncludedObjectVersions = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"IncludedObjectVersions\"]);\n    }\n    if (output.OptionalFields === \"\") {\n        contents.OptionalFields = [];\n    }\n    else if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n        contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"OptionalFields\"][\"Field\"]), context);\n    }\n    if (output[\"Schedule\"] !== undefined) {\n        contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlInventoryConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlInventoryDestination = (output, context) => {\n    const contents = {\n        S3BucketDestination: undefined,\n    };\n    if (output[\"S3BucketDestination\"] !== undefined) {\n        contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output[\"S3BucketDestination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryEncryption = (output, context) => {\n    const contents = {\n        SSES3: undefined,\n        SSEKMS: undefined,\n    };\n    if (output[\"SSE-S3\"] !== undefined) {\n        contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n    }\n    if (output[\"SSE-KMS\"] !== undefined) {\n        contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryFilter = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryOptionalFields = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(entry);\n    });\n};\nconst deserializeAws_restXmlInventoryS3BucketDestination = (output, context) => {\n    const contents = {\n        AccountId: undefined,\n        Bucket: undefined,\n        Format: undefined,\n        Prefix: undefined,\n        Encryption: undefined,\n    };\n    if (output[\"AccountId\"] !== undefined) {\n        contents.AccountId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"AccountId\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Bucket\"]);\n    }\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Format\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output[\"Encryption\"] !== undefined) {\n        contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventorySchedule = (output, context) => {\n    const contents = {\n        Frequency: undefined,\n    };\n    if (output[\"Frequency\"] !== undefined) {\n        contents.Frequency = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Frequency\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LambdaFunctionArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Id\"]);\n    }\n    if (output[\"CloudFunction\"] !== undefined) {\n        contents.LambdaFunctionArn = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"CloudFunction\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlLifecycleExpiration = (output, context) => {\n    const contents = {\n        Date: undefined,\n        Days: undefined,\n        ExpiredObjectDeleteMarker: undefined,\n    };\n    if (output[\"Date\"] !== undefined) {\n        contents.Date = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"Date\"]));\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"Days\"]);\n    }\n    if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n        contents.ExpiredObjectDeleteMarker = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"ExpiredObjectDeleteMarker\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRule = (output, context) => {\n    const contents = {\n        Expiration: undefined,\n        ID: undefined,\n        Prefix: undefined,\n        Filter: undefined,\n        Status: undefined,\n        Transitions: undefined,\n        NoncurrentVersionTransitions: undefined,\n        NoncurrentVersionExpiration: undefined,\n        AbortIncompleteMultipartUpload: undefined,\n    };\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ID\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlLifecycleRuleFilter((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectUnion)(output[\"Filter\"]), context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    if (output.Transition === \"\") {\n        contents.Transitions = [];\n    }\n    else if (output[\"Transition\"] !== undefined) {\n        contents.Transitions = deserializeAws_restXmlTransitionList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Transition\"]), context);\n    }\n    if (output.NoncurrentVersionTransition === \"\") {\n        contents.NoncurrentVersionTransitions = [];\n    }\n    else if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n        contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"NoncurrentVersionTransition\"]), context);\n    }\n    if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n        contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output[\"NoncurrentVersionExpiration\"], context);\n    }\n    if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n        contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output[\"AbortIncompleteMultipartUpload\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRuleAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n        ObjectSizeGreaterThan: undefined,\n        ObjectSizeLessThan: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Tag\"]), context);\n    }\n    if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n        contents.ObjectSizeGreaterThan = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"ObjectSizeGreaterThan\"]);\n    }\n    if (output[\"ObjectSizeLessThan\"] !== undefined) {\n        contents.ObjectSizeLessThan = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"ObjectSizeLessThan\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRuleFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n        return {\n            ObjectSizeGreaterThan: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"ObjectSizeGreaterThan\"]),\n        };\n    }\n    if (output[\"ObjectSizeLessThan\"] !== undefined) {\n        return {\n            ObjectSizeLessThan: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"ObjectSizeLessThan\"]),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlLifecycleRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlLifecycleRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlLoggingEnabled = (output, context) => {\n    const contents = {\n        TargetBucket: undefined,\n        TargetGrants: undefined,\n        TargetPrefix: undefined,\n    };\n    if (output[\"TargetBucket\"] !== undefined) {\n        contents.TargetBucket = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"TargetBucket\"]);\n    }\n    if (output.TargetGrants === \"\") {\n        contents.TargetGrants = [];\n    }\n    else if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n        contents.TargetGrants = deserializeAws_restXmlTargetGrants((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"TargetGrants\"][\"Grant\"]), context);\n    }\n    if (output[\"TargetPrefix\"] !== undefined) {\n        contents.TargetPrefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"TargetPrefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetrics = (output, context) => {\n    const contents = {\n        Status: undefined,\n        EventThreshold: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    if (output[\"EventThreshold\"] !== undefined) {\n        contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n        AccessPointArn: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Tag\"]), context);\n    }\n    if (output[\"AccessPointArn\"] !== undefined) {\n        contents.AccessPointArn = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"AccessPointArn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Id\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlMetricsFilter((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectUnion)(output[\"Filter\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlMetricsConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlMetricsFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"AccessPointArn\"] !== undefined) {\n        return {\n            AccessPointArn: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"AccessPointArn\"]),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlMultipartUpload = (output, context) => {\n    const contents = {\n        UploadId: undefined,\n        Key: undefined,\n        Initiated: undefined,\n        StorageClass: undefined,\n        Owner: undefined,\n        Initiator: undefined,\n        ChecksumAlgorithm: undefined,\n    };\n    if (output[\"UploadId\"] !== undefined) {\n        contents.UploadId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"UploadId\"]);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Key\"]);\n    }\n    if (output[\"Initiated\"] !== undefined) {\n        contents.Initiated = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"Initiated\"]));\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"StorageClass\"]);\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    if (output[\"Initiator\"] !== undefined) {\n        contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n    }\n    if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumAlgorithm\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMultipartUploadList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlMultipartUpload(entry, context);\n    });\n};\nconst deserializeAws_restXmlNoncurrentVersionExpiration = (output, context) => {\n    const contents = {\n        NoncurrentDays: undefined,\n        NewerNoncurrentVersions: undefined,\n    };\n    if (output[\"NoncurrentDays\"] !== undefined) {\n        contents.NoncurrentDays = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"NoncurrentDays\"]);\n    }\n    if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n        contents.NewerNoncurrentVersions = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"NewerNoncurrentVersions\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoncurrentVersionTransition = (output, context) => {\n    const contents = {\n        NoncurrentDays: undefined,\n        StorageClass: undefined,\n        NewerNoncurrentVersions: undefined,\n    };\n    if (output[\"NoncurrentDays\"] !== undefined) {\n        contents.NoncurrentDays = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"NoncurrentDays\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"StorageClass\"]);\n    }\n    if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n        contents.NewerNoncurrentVersions = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"NewerNoncurrentVersions\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoncurrentVersionTransitionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    });\n};\nconst deserializeAws_restXmlNotificationConfigurationFilter = (output, context) => {\n    const contents = {\n        Key: undefined,\n    };\n    if (output[\"S3Key\"] !== undefined) {\n        contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXml_Object = (output, context) => {\n    const contents = {\n        Key: undefined,\n        LastModified: undefined,\n        ETag: undefined,\n        ChecksumAlgorithm: undefined,\n        Size: undefined,\n        StorageClass: undefined,\n        Owner: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Key\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"LastModified\"]));\n    }\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ETag\"]);\n    }\n    if (output.ChecksumAlgorithm === \"\") {\n        contents.ChecksumAlgorithm = [];\n    }\n    else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"ChecksumAlgorithm\"]), context);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"Size\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"StorageClass\"]);\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXml_Object(entry, context);\n    });\n};\nconst deserializeAws_restXmlObjectLockConfiguration = (output, context) => {\n    const contents = {\n        ObjectLockEnabled: undefined,\n        Rule: undefined,\n    };\n    if (output[\"ObjectLockEnabled\"] !== undefined) {\n        contents.ObjectLockEnabled = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ObjectLockEnabled\"]);\n    }\n    if (output[\"Rule\"] !== undefined) {\n        contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockLegalHold = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockRetention = (output, context) => {\n    const contents = {\n        Mode: undefined,\n        RetainUntilDate: undefined,\n    };\n    if (output[\"Mode\"] !== undefined) {\n        contents.Mode = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Mode\"]);\n    }\n    if (output[\"RetainUntilDate\"] !== undefined) {\n        contents.RetainUntilDate = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"RetainUntilDate\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockRule = (output, context) => {\n    const contents = {\n        DefaultRetention: undefined,\n    };\n    if (output[\"DefaultRetention\"] !== undefined) {\n        contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectPart = (output, context) => {\n    const contents = {\n        PartNumber: undefined,\n        Size: undefined,\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"PartNumber\"] !== undefined) {\n        contents.PartNumber = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"PartNumber\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"Size\"]);\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectVersion = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        ChecksumAlgorithm: undefined,\n        Size: undefined,\n        StorageClass: undefined,\n        Key: undefined,\n        VersionId: undefined,\n        IsLatest: undefined,\n        LastModified: undefined,\n        Owner: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ETag\"]);\n    }\n    if (output.ChecksumAlgorithm === \"\") {\n        contents.ChecksumAlgorithm = [];\n    }\n    else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"ChecksumAlgorithm\"]), context);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"Size\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"StorageClass\"]);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"VersionId\"]);\n    }\n    if (output[\"IsLatest\"] !== undefined) {\n        contents.IsLatest = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"IsLatest\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"LastModified\"]));\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectVersionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlObjectVersion(entry, context);\n    });\n};\nconst deserializeAws_restXmlOwner = (output, context) => {\n    const contents = {\n        DisplayName: undefined,\n        ID: undefined,\n    };\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"DisplayName\"]);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControls = (output, context) => {\n    const contents = {\n        Rules: undefined,\n    };\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlOwnershipControlsRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControlsRule = (output, context) => {\n    const contents = {\n        ObjectOwnership: undefined,\n    };\n    if (output[\"ObjectOwnership\"] !== undefined) {\n        contents.ObjectOwnership = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ObjectOwnership\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControlsRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlPart = (output, context) => {\n    const contents = {\n        PartNumber: undefined,\n        LastModified: undefined,\n        ETag: undefined,\n        Size: undefined,\n        ChecksumCRC32: undefined,\n        ChecksumCRC32C: undefined,\n        ChecksumSHA1: undefined,\n        ChecksumSHA256: undefined,\n    };\n    if (output[\"PartNumber\"] !== undefined) {\n        contents.PartNumber = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"PartNumber\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"LastModified\"]));\n    }\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ETag\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"Size\"]);\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlParts = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlPart(entry, context);\n    });\n};\nconst deserializeAws_restXmlPartsList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlObjectPart(entry, context);\n    });\n};\nconst deserializeAws_restXmlPolicyStatus = (output, context) => {\n    const contents = {\n        IsPublic: undefined,\n    };\n    if (output[\"IsPublic\"] !== undefined) {\n        contents.IsPublic = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"IsPublic\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlProgress = (output, context) => {\n    const contents = {\n        BytesScanned: undefined,\n        BytesProcessed: undefined,\n        BytesReturned: undefined,\n    };\n    if (output[\"BytesScanned\"] !== undefined) {\n        contents.BytesScanned = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"BytesScanned\"]);\n    }\n    if (output[\"BytesProcessed\"] !== undefined) {\n        contents.BytesProcessed = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"BytesProcessed\"]);\n    }\n    if (output[\"BytesReturned\"] !== undefined) {\n        contents.BytesReturned = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"BytesReturned\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicAccessBlockConfiguration = (output, context) => {\n    const contents = {\n        BlockPublicAcls: undefined,\n        IgnorePublicAcls: undefined,\n        BlockPublicPolicy: undefined,\n        RestrictPublicBuckets: undefined,\n    };\n    if (output[\"BlockPublicAcls\"] !== undefined) {\n        contents.BlockPublicAcls = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"BlockPublicAcls\"]);\n    }\n    if (output[\"IgnorePublicAcls\"] !== undefined) {\n        contents.IgnorePublicAcls = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"IgnorePublicAcls\"]);\n    }\n    if (output[\"BlockPublicPolicy\"] !== undefined) {\n        contents.BlockPublicPolicy = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"BlockPublicPolicy\"]);\n    }\n    if (output[\"RestrictPublicBuckets\"] !== undefined) {\n        contents.RestrictPublicBuckets = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"RestrictPublicBuckets\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueueConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        QueueArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Id\"]);\n    }\n    if (output[\"Queue\"] !== undefined) {\n        contents.QueueArn = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Queue\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueueConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlQueueConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlRedirect = (output, context) => {\n    const contents = {\n        HostName: undefined,\n        HttpRedirectCode: undefined,\n        Protocol: undefined,\n        ReplaceKeyPrefixWith: undefined,\n        ReplaceKeyWith: undefined,\n    };\n    if (output[\"HostName\"] !== undefined) {\n        contents.HostName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"HostName\"]);\n    }\n    if (output[\"HttpRedirectCode\"] !== undefined) {\n        contents.HttpRedirectCode = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"HttpRedirectCode\"]);\n    }\n    if (output[\"Protocol\"] !== undefined) {\n        contents.Protocol = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Protocol\"]);\n    }\n    if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n        contents.ReplaceKeyPrefixWith = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ReplaceKeyPrefixWith\"]);\n    }\n    if (output[\"ReplaceKeyWith\"] !== undefined) {\n        contents.ReplaceKeyWith = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ReplaceKeyWith\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRedirectAllRequestsTo = (output, context) => {\n    const contents = {\n        HostName: undefined,\n        Protocol: undefined,\n    };\n    if (output[\"HostName\"] !== undefined) {\n        contents.HostName = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"HostName\"]);\n    }\n    if (output[\"Protocol\"] !== undefined) {\n        contents.Protocol = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Protocol\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicaModifications = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationConfiguration = (output, context) => {\n    const contents = {\n        Role: undefined,\n        Rules: undefined,\n    };\n    if (output[\"Role\"] !== undefined) {\n        contents.Role = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Role\"]);\n    }\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlReplicationRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRule = (output, context) => {\n    const contents = {\n        ID: undefined,\n        Priority: undefined,\n        Prefix: undefined,\n        Filter: undefined,\n        Status: undefined,\n        SourceSelectionCriteria: undefined,\n        ExistingObjectReplication: undefined,\n        Destination: undefined,\n        DeleteMarkerReplication: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"ID\"]);\n    }\n    if (output[\"Priority\"] !== undefined) {\n        contents.Priority = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"Priority\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlReplicationRuleFilter((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectUnion)(output[\"Filter\"]), context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    if (output[\"SourceSelectionCriteria\"] !== undefined) {\n        contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output[\"SourceSelectionCriteria\"], context);\n    }\n    if (output[\"ExistingObjectReplication\"] !== undefined) {\n        contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output[\"ExistingObjectReplication\"], context);\n    }\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n    }\n    if (output[\"DeleteMarkerReplication\"] !== undefined) {\n        contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output[\"DeleteMarkerReplication\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRuleAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRuleFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlReplicationRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlReplicationRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlReplicationTime = (output, context) => {\n    const contents = {\n        Status: undefined,\n        Time: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    if (output[\"Time\"] !== undefined) {\n        contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationTimeValue = (output, context) => {\n    const contents = {\n        Minutes: undefined,\n    };\n    if (output[\"Minutes\"] !== undefined) {\n        contents.Minutes = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"Minutes\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRoutingRule = (output, context) => {\n    const contents = {\n        Condition: undefined,\n        Redirect: undefined,\n    };\n    if (output[\"Condition\"] !== undefined) {\n        contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n    }\n    if (output[\"Redirect\"] !== undefined) {\n        contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRoutingRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlRoutingRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlS3KeyFilter = (output, context) => {\n    const contents = {\n        FilterRules: undefined,\n    };\n    if (output.FilterRule === \"\") {\n        contents.FilterRules = [];\n    }\n    else if (output[\"FilterRule\"] !== undefined) {\n        contents.FilterRules = deserializeAws_restXmlFilterRuleList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"FilterRule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionByDefault = (output, context) => {\n    const contents = {\n        SSEAlgorithm: undefined,\n        KMSMasterKeyID: undefined,\n    };\n    if (output[\"SSEAlgorithm\"] !== undefined) {\n        contents.SSEAlgorithm = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"SSEAlgorithm\"]);\n    }\n    if (output[\"KMSMasterKeyID\"] !== undefined) {\n        contents.KMSMasterKeyID = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"KMSMasterKeyID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionConfiguration = (output, context) => {\n    const contents = {\n        Rules: undefined,\n    };\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlServerSideEncryptionRules((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionRule = (output, context) => {\n    const contents = {\n        ApplyServerSideEncryptionByDefault: undefined,\n        BucketKeyEnabled: undefined,\n    };\n    if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n        contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output[\"ApplyServerSideEncryptionByDefault\"], context);\n    }\n    if (output[\"BucketKeyEnabled\"] !== undefined) {\n        contents.BucketKeyEnabled = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseBoolean)(output[\"BucketKeyEnabled\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlSourceSelectionCriteria = (output, context) => {\n    const contents = {\n        SseKmsEncryptedObjects: undefined,\n        ReplicaModifications: undefined,\n    };\n    if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n        contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output[\"SseKmsEncryptedObjects\"], context);\n    }\n    if (output[\"ReplicaModifications\"] !== undefined) {\n        contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSSEKMS = (output, context) => {\n    const contents = {\n        KeyId: undefined,\n    };\n    if (output[\"KeyId\"] !== undefined) {\n        contents.KeyId = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"KeyId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSseKmsEncryptedObjects = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSSES3 = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlStats = (output, context) => {\n    const contents = {\n        BytesScanned: undefined,\n        BytesProcessed: undefined,\n        BytesReturned: undefined,\n    };\n    if (output[\"BytesScanned\"] !== undefined) {\n        contents.BytesScanned = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"BytesScanned\"]);\n    }\n    if (output[\"BytesProcessed\"] !== undefined) {\n        contents.BytesProcessed = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"BytesProcessed\"]);\n    }\n    if (output[\"BytesReturned\"] !== undefined) {\n        contents.BytesReturned = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseLong)(output[\"BytesReturned\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStorageClassAnalysis = (output, context) => {\n    const contents = {\n        DataExport: undefined,\n    };\n    if (output[\"DataExport\"] !== undefined) {\n        contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStorageClassAnalysisDataExport = (output, context) => {\n    const contents = {\n        OutputSchemaVersion: undefined,\n        Destination: undefined,\n    };\n    if (output[\"OutputSchemaVersion\"] !== undefined) {\n        contents.OutputSchemaVersion = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"OutputSchemaVersion\"]);\n    }\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTag = (output, context) => {\n    const contents = {\n        Key: undefined,\n        Value: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Key\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Value\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTagSet = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTag(entry, context);\n    });\n};\nconst deserializeAws_restXmlTargetGrant = (output, context) => {\n    const contents = {\n        Grantee: undefined,\n        Permission: undefined,\n    };\n    if (output[\"Grantee\"] !== undefined) {\n        contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n    }\n    if (output[\"Permission\"] !== undefined) {\n        contents.Permission = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Permission\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTargetGrants = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTargetGrant(entry, context);\n    });\n};\nconst deserializeAws_restXmlTiering = (output, context) => {\n    const contents = {\n        Days: undefined,\n        AccessTier: undefined,\n    };\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"Days\"]);\n    }\n    if (output[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"AccessTier\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTieringList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTiering(entry, context);\n    });\n};\nconst deserializeAws_restXmlTopicConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        TopicArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Id\"]);\n    }\n    if (output[\"Topic\"] !== undefined) {\n        contents.TopicArn = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"Topic\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getArrayIfSingleItem)(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTopicConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTopicConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlTransition = (output, context) => {\n    const contents = {\n        Date: undefined,\n        Days: undefined,\n        StorageClass: undefined,\n    };\n    if (output[\"Date\"] !== undefined) {\n        contents.Date = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectNonNull)((0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.parseRfc3339DateTime)(output[\"Date\"]));\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.strictParseInt32)(output[\"Days\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.expectString)(output[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTransitionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return deserializeAws_restXmlTransition(entry, context);\n    });\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_3__.XMLParser({\n            attributeNamePrefix: \"\",\n            htmlEntities: true,\n            ignoreAttributes: false,\n            ignoreDeclaration: true,\n            parseTagValue: false,\n            trimValues: false,\n            tagValueProcessor: (_, val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined),\n        });\n        parser.addEntity(\"#xD\", \"\\r\");\n        parser.addEntity(\"#10\", \"\\n\");\n        const parsedObj = parser.parse(encoded);\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.getValueFromTextNode)(parsedObjToReturn);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    if (value.Error) {\n        value.Error.message = value.Error.message ?? value.Error.Message;\n    }\n    return value;\n};\nconst loadRestXmlErrorCode = (output, data) => {\n    if (data.Code !== undefined) {\n        return data.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRuntimeConfig\": () => (/* binding */ getRuntimeConfig)\n/* harmony export */ });\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../package.json */ \"./node_modules/@aws-sdk/client-s3/package.json\");\n/* harmony import */ var _aws_crypto_sha1_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/sha1-browser */ \"./node_modules/@aws-crypto/sha1-browser/build/index.js\");\n/* harmony import */ var _aws_crypto_sha1_browser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aws_crypto_sha1_browser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-crypto/sha256-browser */ \"./node_modules/@aws-crypto/sha256-browser/build/index.js\");\n/* harmony import */ var _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/config-resolver */ \"./node_modules/@aws-sdk/config-resolver/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_eventstream_serde_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/eventstream-serde-browser */ \"./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/fetch-http-handler */ \"./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_hash_blob_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/hash-blob-browser */ \"./node_modules/@aws-sdk/hash-blob-browser/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/invalid-dependency */ \"./node_modules/@aws-sdk/invalid-dependency/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_md5_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/md5-js */ \"./node_modules/@aws-sdk/md5-js/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/middleware-retry */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @aws-sdk/util-base64-browser */ \"./node_modules/@aws-sdk/util-base64-browser/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_body_length_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @aws-sdk/util-body-length-browser */ \"./node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_stream_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @aws-sdk/util-stream-browser */ \"./node_modules/@aws-sdk/util-stream-browser/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_user_agent_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @aws-sdk/util-user-agent-browser */ \"./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js\");\n/* harmony import */ var _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./runtimeConfig.shared */ \"./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js\");\n/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @aws-sdk/smithy-client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_defaults_mode_browser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @aws-sdk/util-defaults-mode-browser */ \"./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst getRuntimeConfig = (config) => {\n    const defaultsMode = (0,_aws_sdk_util_defaults_mode_browser__WEBPACK_IMPORTED_MODULE_15__.resolveDefaultsModeConfig)(config);\n    const defaultConfigProvider = () => defaultsMode().then(_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_14__.loadConfigsForDefaultMode);\n    const clientSharedValues = (0,_runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_16__.getRuntimeConfig)(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"browser\",\n        defaultsMode,\n        base64Decoder: config?.base64Decoder ?? _aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_9__.fromBase64,\n        base64Encoder: config?.base64Encoder ?? _aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_9__.toBase64,\n        bodyLengthChecker: config?.bodyLengthChecker ?? _aws_sdk_util_body_length_browser__WEBPACK_IMPORTED_MODULE_10__.calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error(\"Credential is missing\"))),\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            (0,_aws_sdk_util_user_agent_browser__WEBPACK_IMPORTED_MODULE_12__.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: _package_json__WEBPACK_IMPORTED_MODULE_17__.version }),\n        eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? _aws_sdk_eventstream_serde_browser__WEBPACK_IMPORTED_MODULE_3__.eventStreamSerdeProvider,\n        getAwsChunkedEncodingStream: config?.getAwsChunkedEncodingStream ?? _aws_sdk_util_stream_browser__WEBPACK_IMPORTED_MODULE_11__.getAwsChunkedEncodingStream,\n        maxAttempts: config?.maxAttempts ?? _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_MAX_ATTEMPTS,\n        md5: config?.md5 ?? _aws_sdk_md5_js__WEBPACK_IMPORTED_MODULE_7__.Md5,\n        region: config?.region ?? (0,_aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_6__.invalidProvider)(\"Region is missing\"),\n        requestHandler: config?.requestHandler ?? new _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_4__.FetchHttpHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_RETRY_MODE),\n        sdkStreamMixin: config?.sdkStreamMixin ?? _aws_sdk_util_stream_browser__WEBPACK_IMPORTED_MODULE_11__.sdkStreamMixin,\n        sha1: config?.sha1 ?? _aws_crypto_sha1_browser__WEBPACK_IMPORTED_MODULE_0__.Sha1,\n        sha256: config?.sha256 ?? _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_1__.Sha256,\n        streamCollector: config?.streamCollector ?? _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_4__.streamCollector,\n        streamHasher: config?.streamHasher ?? _aws_sdk_hash_blob_browser__WEBPACK_IMPORTED_MODULE_5__.blobHasher,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_USE_DUALSTACK_ENDPOINT)),\n        useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_USE_FIPS_ENDPOINT)),\n        utf8Decoder: config?.utf8Decoder ?? _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_13__.fromUtf8,\n        utf8Encoder: config?.utf8Encoder ?? _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_13__.toUtf8,\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.browser.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRuntimeConfig\": () => (/* binding */ getRuntimeConfig)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_signature_v4_multi_region__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/signature-v4-multi-region */ \"./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/url-parser */ \"./node_modules/@aws-sdk/url-parser/dist-es/index.js\");\n/* harmony import */ var _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./endpoint/endpointResolver */ \"./node_modules/@aws-sdk/client-s3/dist-es/endpoint/endpointResolver.js\");\n\n\n\nconst getRuntimeConfig = (config) => ({\n    apiVersion: \"2006-03-01\",\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? _endpoint_endpointResolver__WEBPACK_IMPORTED_MODULE_2__.defaultEndpointResolver,\n    logger: config?.logger ?? {},\n    serviceId: config?.serviceId ?? \"S3\",\n    signerConstructor: config?.signerConstructor ?? _aws_sdk_signature_v4_multi_region__WEBPACK_IMPORTED_MODULE_0__.SignatureV4MultiRegion,\n    signingEscapePath: config?.signingEscapePath ?? false,\n    urlParser: config?.urlParser ?? _aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_1__.parseUrl,\n    useArnRegion: config?.useArnRegion ?? false,\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/runtimeConfig.shared.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"waitForBucketExists\": () => (/* reexport safe */ _waitForBucketExists__WEBPACK_IMPORTED_MODULE_0__.waitForBucketExists),\n/* harmony export */   \"waitForBucketNotExists\": () => (/* reexport safe */ _waitForBucketNotExists__WEBPACK_IMPORTED_MODULE_1__.waitForBucketNotExists),\n/* harmony export */   \"waitForObjectExists\": () => (/* reexport safe */ _waitForObjectExists__WEBPACK_IMPORTED_MODULE_2__.waitForObjectExists),\n/* harmony export */   \"waitForObjectNotExists\": () => (/* reexport safe */ _waitForObjectNotExists__WEBPACK_IMPORTED_MODULE_3__.waitForObjectNotExists),\n/* harmony export */   \"waitUntilBucketExists\": () => (/* reexport safe */ _waitForBucketExists__WEBPACK_IMPORTED_MODULE_0__.waitUntilBucketExists),\n/* harmony export */   \"waitUntilBucketNotExists\": () => (/* reexport safe */ _waitForBucketNotExists__WEBPACK_IMPORTED_MODULE_1__.waitUntilBucketNotExists),\n/* harmony export */   \"waitUntilObjectExists\": () => (/* reexport safe */ _waitForObjectExists__WEBPACK_IMPORTED_MODULE_2__.waitUntilObjectExists),\n/* harmony export */   \"waitUntilObjectNotExists\": () => (/* reexport safe */ _waitForObjectNotExists__WEBPACK_IMPORTED_MODULE_3__.waitUntilObjectNotExists)\n/* harmony export */ });\n/* harmony import */ var _waitForBucketExists__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./waitForBucketExists */ \"./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js\");\n/* harmony import */ var _waitForBucketNotExists__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./waitForBucketNotExists */ \"./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js\");\n/* harmony import */ var _waitForObjectExists__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./waitForObjectExists */ \"./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js\");\n/* harmony import */ var _waitForObjectNotExists__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./waitForObjectNotExists */ \"./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js\");\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/waiters/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"waitForBucketExists\": () => (/* binding */ waitForBucketExists),\n/* harmony export */   \"waitUntilBucketExists\": () => (/* binding */ waitUntilBucketExists)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-waiter */ \"./node_modules/@aws-sdk/util-waiter/dist-es/index.js\");\n/* harmony import */ var _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../commands/HeadBucketCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js\");\n\n\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_1__.HeadBucketCommand(input));\n        reason = result;\n        return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.SUCCESS, reason };\n    }\n    catch (exception) {\n        reason = exception;\n        if (exception.name && exception.name == \"NotFound\") {\n            return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };\n        }\n    }\n    return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };\n};\nconst waitForBucketExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n};\nconst waitUntilBucketExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    const result = await (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.checkExceptions)(result);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketExists.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"waitForBucketNotExists\": () => (/* binding */ waitForBucketNotExists),\n/* harmony export */   \"waitUntilBucketNotExists\": () => (/* binding */ waitUntilBucketNotExists)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-waiter */ \"./node_modules/@aws-sdk/util-waiter/dist-es/index.js\");\n/* harmony import */ var _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../commands/HeadBucketCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadBucketCommand.js\");\n\n\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new _commands_HeadBucketCommand__WEBPACK_IMPORTED_MODULE_1__.HeadBucketCommand(input));\n        reason = result;\n    }\n    catch (exception) {\n        reason = exception;\n        if (exception.name && exception.name == \"NotFound\") {\n            return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.SUCCESS, reason };\n        }\n    }\n    return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };\n};\nconst waitForBucketNotExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n};\nconst waitUntilBucketNotExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    const result = await (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.checkExceptions)(result);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForBucketNotExists.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"waitForObjectExists\": () => (/* binding */ waitForObjectExists),\n/* harmony export */   \"waitUntilObjectExists\": () => (/* binding */ waitUntilObjectExists)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-waiter */ \"./node_modules/@aws-sdk/util-waiter/dist-es/index.js\");\n/* harmony import */ var _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../commands/HeadObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js\");\n\n\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_1__.HeadObjectCommand(input));\n        reason = result;\n        return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.SUCCESS, reason };\n    }\n    catch (exception) {\n        reason = exception;\n        if (exception.name && exception.name == \"NotFound\") {\n            return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };\n        }\n    }\n    return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };\n};\nconst waitForObjectExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n};\nconst waitUntilObjectExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    const result = await (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.checkExceptions)(result);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectExists.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"waitForObjectNotExists\": () => (/* binding */ waitForObjectNotExists),\n/* harmony export */   \"waitUntilObjectNotExists\": () => (/* binding */ waitUntilObjectNotExists)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-waiter */ \"./node_modules/@aws-sdk/util-waiter/dist-es/index.js\");\n/* harmony import */ var _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../commands/HeadObjectCommand */ \"./node_modules/@aws-sdk/client-s3/dist-es/commands/HeadObjectCommand.js\");\n\n\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new _commands_HeadObjectCommand__WEBPACK_IMPORTED_MODULE_1__.HeadObjectCommand(input));\n        reason = result;\n    }\n    catch (exception) {\n        reason = exception;\n        if (exception.name && exception.name == \"NotFound\") {\n            return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.SUCCESS, reason };\n        }\n    }\n    return { state: _aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.WaiterState.RETRY, reason };\n};\nconst waitForObjectNotExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n};\nconst waitUntilObjectNotExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    const result = await (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);\n    return (0,_aws_sdk_util_waiter__WEBPACK_IMPORTED_MODULE_0__.checkExceptions)(result);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/dist-es/waiters/waitForObjectNotExists.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONFIG_USE_DUALSTACK_ENDPOINT\": () => (/* binding */ CONFIG_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"DEFAULT_USE_DUALSTACK_ENDPOINT\": () => (/* binding */ DEFAULT_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"ENV_USE_DUALSTACK_ENDPOINT\": () => (/* binding */ ENV_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS\": () => (/* binding */ NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-config-provider */ \"./node_modules/@aws-sdk/util-config-provider/dist-es/index.js\");\n\nconst ENV_USE_DUALSTACK_ENDPOINT = \"AWS_USE_DUALSTACK_ENDPOINT\";\nconst CONFIG_USE_DUALSTACK_ENDPOINT = \"use_dualstack_endpoint\";\nconst DEFAULT_USE_DUALSTACK_ENDPOINT = false;\nconst NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),\n    configFileSelector: (profile) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),\n    default: false,\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONFIG_USE_FIPS_ENDPOINT\": () => (/* binding */ CONFIG_USE_FIPS_ENDPOINT),\n/* harmony export */   \"DEFAULT_USE_FIPS_ENDPOINT\": () => (/* binding */ DEFAULT_USE_FIPS_ENDPOINT),\n/* harmony export */   \"ENV_USE_FIPS_ENDPOINT\": () => (/* binding */ ENV_USE_FIPS_ENDPOINT),\n/* harmony export */   \"NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS\": () => (/* binding */ NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-config-provider */ \"./node_modules/@aws-sdk/util-config-provider/dist-es/index.js\");\n\nconst ENV_USE_FIPS_ENDPOINT = \"AWS_USE_FIPS_ENDPOINT\";\nconst CONFIG_USE_FIPS_ENDPOINT = \"use_fips_endpoint\";\nconst DEFAULT_USE_FIPS_ENDPOINT = false;\nconst NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),\n    configFileSelector: (profile) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),\n    default: false,\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONFIG_USE_DUALSTACK_ENDPOINT\": () => (/* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.CONFIG_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"CONFIG_USE_FIPS_ENDPOINT\": () => (/* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.CONFIG_USE_FIPS_ENDPOINT),\n/* harmony export */   \"DEFAULT_USE_DUALSTACK_ENDPOINT\": () => (/* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"DEFAULT_USE_FIPS_ENDPOINT\": () => (/* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_USE_FIPS_ENDPOINT),\n/* harmony export */   \"ENV_USE_DUALSTACK_ENDPOINT\": () => (/* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.ENV_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"ENV_USE_FIPS_ENDPOINT\": () => (/* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.ENV_USE_FIPS_ENDPOINT),\n/* harmony export */   \"NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS\": () => (/* reexport safe */ _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS\": () => (/* reexport safe */ _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n/* harmony export */   \"resolveCustomEndpointsConfig\": () => (/* reexport safe */ _resolveCustomEndpointsConfig__WEBPACK_IMPORTED_MODULE_2__.resolveCustomEndpointsConfig),\n/* harmony export */   \"resolveEndpointsConfig\": () => (/* reexport safe */ _resolveEndpointsConfig__WEBPACK_IMPORTED_MODULE_3__.resolveEndpointsConfig)\n/* harmony export */ });\n/* harmony import */ var _NodeUseDualstackEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeUseDualstackEndpointConfigOptions */ \"./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js\");\n/* harmony import */ var _NodeUseFipsEndpointConfigOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NodeUseFipsEndpointConfigOptions */ \"./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js\");\n/* harmony import */ var _resolveCustomEndpointsConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolveCustomEndpointsConfig */ \"./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js\");\n/* harmony import */ var _resolveEndpointsConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveEndpointsConfig */ \"./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js\");\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveCustomEndpointsConfig\": () => (/* binding */ resolveCustomEndpointsConfig)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-middleware */ \"./node_modules/@aws-sdk/util-middleware/dist-es/index.js\");\n\nconst resolveCustomEndpointsConfig = (input) => {\n    const { endpoint, urlParser } = input;\n    return {\n        ...input,\n        tls: input.tls ?? true,\n        endpoint: (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint),\n        isCustomEndpoint: true,\n        useDualstackEndpoint: (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useDualstackEndpoint),\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveEndpointsConfig\": () => (/* binding */ resolveEndpointsConfig)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-middleware */ \"./node_modules/@aws-sdk/util-middleware/dist-es/index.js\");\n/* harmony import */ var _utils_getEndpointFromRegion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/getEndpointFromRegion */ \"./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js\");\n\n\nconst resolveEndpointsConfig = (input) => {\n    const useDualstackEndpoint = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useDualstackEndpoint);\n    const { endpoint, useFipsEndpoint, urlParser } = input;\n    return {\n        ...input,\n        tls: input.tls ?? true,\n        endpoint: endpoint\n            ? (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint)\n            : () => (0,_utils_getEndpointFromRegion__WEBPACK_IMPORTED_MODULE_1__.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),\n        isCustomEndpoint: !!endpoint,\n        useDualstackEndpoint,\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEndpointFromRegion\": () => (/* binding */ getEndpointFromRegion)\n/* harmony export */ });\nconst getEndpointFromRegion = async (input) => {\n    const { tls = true } = input;\n    const region = await input.region();\n    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(region)) {\n        throw new Error(\"Invalid region in client config\");\n    }\n    const useDualstackEndpoint = await input.useDualstackEndpoint();\n    const useFipsEndpoint = await input.useFipsEndpoint();\n    const { hostname } = (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) ?? {};\n    if (!hostname) {\n        throw new Error(\"Cannot resolve hostname from client config\");\n    }\n    return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONFIG_USE_DUALSTACK_ENDPOINT\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.CONFIG_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"CONFIG_USE_FIPS_ENDPOINT\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.CONFIG_USE_FIPS_ENDPOINT),\n/* harmony export */   \"DEFAULT_USE_DUALSTACK_ENDPOINT\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"DEFAULT_USE_FIPS_ENDPOINT\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_USE_FIPS_ENDPOINT),\n/* harmony export */   \"ENV_USE_DUALSTACK_ENDPOINT\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.ENV_USE_DUALSTACK_ENDPOINT),\n/* harmony export */   \"ENV_USE_FIPS_ENDPOINT\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.ENV_USE_FIPS_ENDPOINT),\n/* harmony export */   \"NODE_REGION_CONFIG_FILE_OPTIONS\": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.NODE_REGION_CONFIG_FILE_OPTIONS),\n/* harmony export */   \"NODE_REGION_CONFIG_OPTIONS\": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.NODE_REGION_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n/* harmony export */   \"REGION_ENV_NAME\": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.REGION_ENV_NAME),\n/* harmony export */   \"REGION_INI_NAME\": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.REGION_INI_NAME),\n/* harmony export */   \"getRegionInfo\": () => (/* reexport safe */ _regionInfo__WEBPACK_IMPORTED_MODULE_2__.getRegionInfo),\n/* harmony export */   \"resolveCustomEndpointsConfig\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.resolveCustomEndpointsConfig),\n/* harmony export */   \"resolveEndpointsConfig\": () => (/* reexport safe */ _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__.resolveEndpointsConfig),\n/* harmony export */   \"resolveRegionConfig\": () => (/* reexport safe */ _regionConfig__WEBPACK_IMPORTED_MODULE_1__.resolveRegionConfig)\n/* harmony export */ });\n/* harmony import */ var _endpointsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./endpointsConfig */ \"./node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/index.js\");\n/* harmony import */ var _regionConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./regionConfig */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/index.js\");\n/* harmony import */ var _regionInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regionInfo */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/index.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NODE_REGION_CONFIG_FILE_OPTIONS\": () => (/* binding */ NODE_REGION_CONFIG_FILE_OPTIONS),\n/* harmony export */   \"NODE_REGION_CONFIG_OPTIONS\": () => (/* binding */ NODE_REGION_CONFIG_OPTIONS),\n/* harmony export */   \"REGION_ENV_NAME\": () => (/* binding */ REGION_ENV_NAME),\n/* harmony export */   \"REGION_INI_NAME\": () => (/* binding */ REGION_INI_NAME)\n/* harmony export */ });\nconst REGION_ENV_NAME = \"AWS_REGION\";\nconst REGION_INI_NAME = \"region\";\nconst NODE_REGION_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[REGION_ENV_NAME],\n    configFileSelector: (profile) => profile[REGION_INI_NAME],\n    default: () => {\n        throw new Error(\"Region is missing\");\n    },\n};\nconst NODE_REGION_CONFIG_FILE_OPTIONS = {\n    preferredFile: \"credentials\",\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRealRegion\": () => (/* binding */ getRealRegion)\n/* harmony export */ });\n/* harmony import */ var _isFipsRegion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isFipsRegion */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js\");\n\nconst getRealRegion = (region) => (0,_isFipsRegion__WEBPACK_IMPORTED_MODULE_0__.isFipsRegion)(region)\n    ? [\"fips-aws-global\", \"aws-fips\"].includes(region)\n        ? \"us-east-1\"\n        : region.replace(/fips-(dkr-|prod-)?|-fips/, \"\")\n    : region;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NODE_REGION_CONFIG_FILE_OPTIONS\": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.NODE_REGION_CONFIG_FILE_OPTIONS),\n/* harmony export */   \"NODE_REGION_CONFIG_OPTIONS\": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.NODE_REGION_CONFIG_OPTIONS),\n/* harmony export */   \"REGION_ENV_NAME\": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.REGION_ENV_NAME),\n/* harmony export */   \"REGION_INI_NAME\": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_0__.REGION_INI_NAME),\n/* harmony export */   \"resolveRegionConfig\": () => (/* reexport safe */ _resolveRegionConfig__WEBPACK_IMPORTED_MODULE_1__.resolveRegionConfig)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js\");\n/* harmony import */ var _resolveRegionConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveRegionConfig */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isFipsRegion\": () => (/* binding */ isFipsRegion)\n/* harmony export */ });\nconst isFipsRegion = (region) => typeof region === \"string\" && (region.startsWith(\"fips-\") || region.endsWith(\"-fips\"));\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveRegionConfig\": () => (/* binding */ resolveRegionConfig)\n/* harmony export */ });\n/* harmony import */ var _getRealRegion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getRealRegion */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js\");\n/* harmony import */ var _isFipsRegion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFipsRegion */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js\");\n\n\nconst resolveRegionConfig = (input) => {\n    const { region, useFipsEndpoint } = input;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return {\n        ...input,\n        region: async () => {\n            if (typeof region === \"string\") {\n                return (0,_getRealRegion__WEBPACK_IMPORTED_MODULE_0__.getRealRegion)(region);\n            }\n            const providedRegion = await region();\n            return (0,_getRealRegion__WEBPACK_IMPORTED_MODULE_0__.getRealRegion)(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n            const providedRegion = typeof region === \"string\" ? region : await region();\n            if ((0,_isFipsRegion__WEBPACK_IMPORTED_MODULE_1__.isFipsRegion)(providedRegion)) {\n                return true;\n            }\n            return typeof useFipsEndpoint === \"boolean\" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();\n        },\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/PartitionHash.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/PartitionHash.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/PartitionHash.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/RegionHash.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/RegionHash.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/RegionHash.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getHostnameFromVariants\": () => (/* binding */ getHostnameFromVariants)\n/* harmony export */ });\nconst getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => variants.find(({ tags }) => useFipsEndpoint === tags.includes(\"fips\") && useDualstackEndpoint === tags.includes(\"dualstack\"))?.hostname;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRegionInfo\": () => (/* binding */ getRegionInfo)\n/* harmony export */ });\n/* harmony import */ var _getHostnameFromVariants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getHostnameFromVariants */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js\");\n/* harmony import */ var _getResolvedHostname__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getResolvedHostname */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js\");\n/* harmony import */ var _getResolvedPartition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getResolvedPartition */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js\");\n/* harmony import */ var _getResolvedSigningRegion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getResolvedSigningRegion */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js\");\n\n\n\n\nconst getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {\n    const partition = (0,_getResolvedPartition__WEBPACK_IMPORTED_MODULE_2__.getResolvedPartition)(region, { partitionHash });\n    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };\n    const regionHostname = (0,_getHostnameFromVariants__WEBPACK_IMPORTED_MODULE_0__.getHostnameFromVariants)(regionHash[resolvedRegion]?.variants, hostnameOptions);\n    const partitionHostname = (0,_getHostnameFromVariants__WEBPACK_IMPORTED_MODULE_0__.getHostnameFromVariants)(partitionHash[partition]?.variants, hostnameOptions);\n    const hostname = (0,_getResolvedHostname__WEBPACK_IMPORTED_MODULE_1__.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });\n    if (hostname === undefined) {\n        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);\n    }\n    const signingRegion = (0,_getResolvedSigningRegion__WEBPACK_IMPORTED_MODULE_3__.getResolvedSigningRegion)(hostname, {\n        signingRegion: regionHash[resolvedRegion]?.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint,\n    });\n    return {\n        partition,\n        signingService,\n        hostname,\n        ...(signingRegion && { signingRegion }),\n        ...(regionHash[resolvedRegion]?.signingService && {\n            signingService: regionHash[resolvedRegion].signingService,\n        }),\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getResolvedHostname\": () => (/* binding */ getResolvedHostname)\n/* harmony export */ });\nconst getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname\n    ? regionHostname\n    : partitionHostname\n        ? partitionHostname.replace(\"{region}\", resolvedRegion)\n        : undefined;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedHostname.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getResolvedPartition\": () => (/* binding */ getResolvedPartition)\n/* harmony export */ });\nconst getResolvedPartition = (region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? \"aws\";\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedPartition.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getResolvedSigningRegion\": () => (/* binding */ getResolvedSigningRegion)\n/* harmony export */ });\nconst getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {\n    if (signingRegion) {\n        return signingRegion;\n    }\n    else if (useFipsEndpoint) {\n        const regionRegexJs = regionRegex.replace(\"\\\\\\\\\", \"\\\\\").replace(/^\\^/g, \"\\\\.\").replace(/\\$$/g, \"\\\\.\");\n        const regionRegexmatchArray = hostname.match(regionRegexJs);\n        if (regionRegexmatchArray) {\n            return regionRegexmatchArray[0].slice(1, -1);\n        }\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRegionInfo\": () => (/* reexport safe */ _getRegionInfo__WEBPACK_IMPORTED_MODULE_2__.getRegionInfo)\n/* harmony export */ });\n/* harmony import */ var _PartitionHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PartitionHash */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/PartitionHash.js\");\n/* harmony import */ var _RegionHash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RegionHash */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/RegionHash.js\");\n/* harmony import */ var _getRegionInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getRegionInfo */ \"./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventStreamCodec\": () => (/* binding */ EventStreamCodec)\n/* harmony export */ });\n/* harmony import */ var _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/crc32 */ \"./node_modules/@aws-crypto/crc32/build/index.js\");\n/* harmony import */ var _HeaderMarshaller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HeaderMarshaller */ \"./node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js\");\n/* harmony import */ var _splitMessage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./splitMessage */ \"./node_modules/@aws-sdk/eventstream-codec/dist-es/splitMessage.js\");\n\n\n\nclass EventStreamCodec {\n    constructor(toUtf8, fromUtf8) {\n        this.headerMarshaller = new _HeaderMarshaller__WEBPACK_IMPORTED_MODULE_1__.HeaderMarshaller(toUtf8, fromUtf8);\n    }\n    encode({ headers: rawHeaders, body }) {\n        const headers = this.headerMarshaller.format(rawHeaders);\n        const length = headers.byteLength + body.byteLength + 16;\n        const out = new Uint8Array(length);\n        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n        const checksum = new _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__.Crc32();\n        view.setUint32(0, length, false);\n        view.setUint32(4, headers.byteLength, false);\n        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n        out.set(headers, 12);\n        out.set(body, headers.byteLength + 12);\n        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n        return out;\n    }\n    decode(message) {\n        const { headers, body } = (0,_splitMessage__WEBPACK_IMPORTED_MODULE_2__.splitMessage)(message);\n        return { headers: this.headerMarshaller.parse(headers), body };\n    }\n    formatHeaders(rawHeaders) {\n        return this.headerMarshaller.format(rawHeaders);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HeaderMarshaller\": () => (/* binding */ HeaderMarshaller)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ \"./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js\");\n/* harmony import */ var _Int64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Int64 */ \"./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js\");\n\n\nclass HeaderMarshaller {\n    constructor(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)) {\n            const bytes = this.fromUtf8(headerName);\n            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks) {\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = this.fromUtf8(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(_Int64__WEBPACK_IMPORTED_MODULE_1__.Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set((0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.fromHex)(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n    parse(headers) {\n        const out = {};\n        let position = 0;\n        while (position < headers.byteLength) {\n            const nameLength = headers.getUint8(position++);\n            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2:\n                    out[name] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3:\n                    out[name] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4:\n                    out[name] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5:\n                    out[name] = {\n                        type: LONG_TAG,\n                        value: new _Int64__WEBPACK_IMPORTED_MODULE_1__.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n                    };\n                    position += 8;\n                    break;\n                case 6:\n                    const binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7:\n                    const stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8:\n                    out[name] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new _Int64__WEBPACK_IMPORTED_MODULE_1__.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9:\n                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name] = {\n                        type: UUID_TAG,\n                        value: `${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(0, 4))}-${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(4, 6))}-${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(6, 8))}-${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(8, 10))}-${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(uuidBytes.subarray(10))}`,\n                    };\n                    break;\n                default:\n                    throw new Error(`Unrecognized header type tag`);\n            }\n        }\n        return out;\n    }\n}\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Int64\": () => (/* binding */ Int64)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ \"./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js\");\n\nclass Int64 {\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854776000 || number < -9223372036854776000) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    }\n    valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 0b10000000;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt((0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n}\nfunction negate(bytes) {\n    for (let i = 0; i < 8; i++) {\n        bytes[i] ^= 0xff;\n    }\n    for (let i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/Message.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/Message.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-codec/dist-es/Message.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventStreamCodec\": () => (/* reexport safe */ _EventStreamCodec__WEBPACK_IMPORTED_MODULE_0__.EventStreamCodec),\n/* harmony export */   \"Int64\": () => (/* reexport safe */ _Int64__WEBPACK_IMPORTED_MODULE_1__.Int64)\n/* harmony export */ });\n/* harmony import */ var _EventStreamCodec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamCodec */ \"./node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js\");\n/* harmony import */ var _Int64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Int64 */ \"./node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js\");\n/* harmony import */ var _Message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Message */ \"./node_modules/@aws-sdk/eventstream-codec/dist-es/Message.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-codec/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-codec/dist-es/splitMessage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-codec/dist-es/splitMessage.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"splitMessage\": () => (/* binding */ splitMessage)\n/* harmony export */ });\n/* harmony import */ var _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/crc32 */ \"./node_modules/@aws-crypto/crc32/build/index.js\");\n\nconst PRELUDE_MEMBER_LENGTH = 4;\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nconst CHECKSUM_LENGTH = 4;\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nfunction splitMessage({ byteLength, byteOffset, buffer }) {\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n    }\n    const view = new DataView(buffer, byteOffset, byteLength);\n    const messageLength = view.getUint32(0, false);\n    if (byteLength !== messageLength) {\n        throw new Error(\"Reported message length does not match received message length\");\n    }\n    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n    const checksummer = new _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n    if (expectedPreludeChecksum !== checksummer.digest()) {\n        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);\n    }\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n    if (expectedMessageChecksum !== checksummer.digest()) {\n        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);\n    }\n    return {\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),\n    };\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-codec/dist-es/splitMessage.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventStreamMarshaller\": () => (/* binding */ EventStreamMarshaller)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_eventstream_serde_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/eventstream-serde-universal */ \"./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js\");\n\n\nclass EventStreamMarshaller {\n    constructor({ utf8Encoder, utf8Decoder }) {\n        this.universalMarshaller = new _aws_sdk_eventstream_serde_universal__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller({\n            utf8Decoder,\n            utf8Encoder,\n        });\n    }\n    deserialize(body, deserializer) {\n        const bodyIterable = isReadableStream(body) ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.readableStreamtoIterable)(body) : body;\n        return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n    }\n    serialize(input, serializer) {\n        const serialziedIterable = this.universalMarshaller.serialize(input, serializer);\n        return typeof ReadableStream === \"function\" ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.iterableToReadableStream)(serialziedIterable) : serialziedIterable;\n    }\n}\nconst isReadableStream = (body) => typeof ReadableStream === \"function\" && body instanceof ReadableStream;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventStreamMarshaller\": () => (/* reexport safe */ _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller),\n/* harmony export */   \"eventStreamSerdeProvider\": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_1__.eventStreamSerdeProvider),\n/* harmony export */   \"iterableToReadableStream\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.iterableToReadableStream),\n/* harmony export */   \"readableStreamtoIterable\": () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_2__.readableStreamtoIterable)\n/* harmony export */ });\n/* harmony import */ var _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamMarshaller */ \"./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js\");\n/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider */ \"./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/provider.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/provider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/provider.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"eventStreamSerdeProvider\": () => (/* binding */ eventStreamSerdeProvider)\n/* harmony export */ });\n/* harmony import */ var _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamMarshaller */ \"./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/EventStreamMarshaller.js\");\n\nconst eventStreamSerdeProvider = (options) => new _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller(options);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/provider.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"iterableToReadableStream\": () => (/* binding */ iterableToReadableStream),\n/* harmony export */   \"readableStreamtoIterable\": () => (/* binding */ readableStreamtoIterable)\n/* harmony export */ });\nconst readableStreamtoIterable = (readableStream) => ({\n    [Symbol.asyncIterator]: async function* () {\n        const reader = readableStream.getReader();\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done)\n                    return;\n                yield value;\n            }\n        }\n        finally {\n            reader.releaseLock();\n        }\n    },\n});\nconst iterableToReadableStream = (asyncIterable) => {\n    const iterator = asyncIterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (done) {\n                return controller.close();\n            }\n            controller.enqueue(value);\n        },\n    });\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveEventStreamSerdeConfig\": () => (/* binding */ resolveEventStreamSerdeConfig)\n/* harmony export */ });\nconst resolveEventStreamSerdeConfig = (input) => ({\n    ...input,\n    eventStreamMarshaller: input.eventStreamSerdeProvider(input),\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveEventStreamSerdeConfig\": () => (/* reexport safe */ _EventStreamSerdeConfig__WEBPACK_IMPORTED_MODULE_0__.resolveEventStreamSerdeConfig)\n/* harmony export */ });\n/* harmony import */ var _EventStreamSerdeConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamSerdeConfig */ \"./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventStreamMarshaller\": () => (/* binding */ EventStreamMarshaller)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_eventstream_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/eventstream-codec */ \"./node_modules/@aws-sdk/eventstream-codec/dist-es/index.js\");\n/* harmony import */ var _getChunkedStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getChunkedStream */ \"./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js\");\n/* harmony import */ var _getUnmarshalledStream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getUnmarshalledStream */ \"./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js\");\n\n\n\nclass EventStreamMarshaller {\n    constructor({ utf8Encoder, utf8Decoder }) {\n        this.eventStreamCodec = new _aws_sdk_eventstream_codec__WEBPACK_IMPORTED_MODULE_0__.EventStreamCodec(utf8Encoder, utf8Decoder);\n        this.utfEncoder = utf8Encoder;\n    }\n    deserialize(body, deserializer) {\n        const chunkedStream = (0,_getChunkedStream__WEBPACK_IMPORTED_MODULE_1__.getChunkedStream)(body);\n        const unmarshalledStream = (0,_getUnmarshalledStream__WEBPACK_IMPORTED_MODULE_2__.getUnmarshalledStream)(chunkedStream, {\n            eventStreamCodec: this.eventStreamCodec,\n            deserializer,\n            toUtf8: this.utfEncoder,\n        });\n        return unmarshalledStream;\n    }\n    serialize(input, serializer) {\n        const self = this;\n        const serializedIterator = async function* () {\n            for await (const chunk of input) {\n                const payloadBuf = self.eventStreamCodec.encode(serializer(chunk));\n                yield payloadBuf;\n            }\n            yield new Uint8Array(0);\n        };\n        return {\n            [Symbol.asyncIterator]: serializedIterator,\n        };\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getChunkedStream\": () => (/* binding */ getChunkedStream)\n/* harmony export */ });\nfunction getChunkedStream(source) {\n    let currentMessageTotalLength = 0;\n    let currentMessagePendingLength = 0;\n    let currentMessage = null;\n    let messageLengthBuffer = null;\n    const allocateMessage = (size) => {\n        if (typeof size !== \"number\") {\n            throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n        }\n        currentMessageTotalLength = size;\n        currentMessagePendingLength = 4;\n        currentMessage = new Uint8Array(size);\n        const currentMessageView = new DataView(currentMessage.buffer);\n        currentMessageView.setUint32(0, size, false);\n    };\n    const iterator = async function* () {\n        const sourceIterator = source[Symbol.asyncIterator]();\n        while (true) {\n            const { value, done } = await sourceIterator.next();\n            if (done) {\n                if (!currentMessageTotalLength) {\n                    return;\n                }\n                else if (currentMessageTotalLength === currentMessagePendingLength) {\n                    yield currentMessage;\n                }\n                else {\n                    throw new Error(\"Truncated event message received.\");\n                }\n                return;\n            }\n            const chunkLength = value.length;\n            let currentOffset = 0;\n            while (currentOffset < chunkLength) {\n                if (!currentMessage) {\n                    const bytesRemaining = chunkLength - currentOffset;\n                    if (!messageLengthBuffer) {\n                        messageLengthBuffer = new Uint8Array(4);\n                    }\n                    const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);\n                    messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n                    currentMessagePendingLength += numBytesForTotal;\n                    currentOffset += numBytesForTotal;\n                    if (currentMessagePendingLength < 4) {\n                        break;\n                    }\n                    allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n                    messageLengthBuffer = null;\n                }\n                const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);\n                currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n                currentMessagePendingLength += numBytesToWrite;\n                currentOffset += numBytesToWrite;\n                if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {\n                    yield currentMessage;\n                    currentMessage = null;\n                    currentMessageTotalLength = 0;\n                    currentMessagePendingLength = 0;\n                }\n            }\n        }\n    };\n    return {\n        [Symbol.asyncIterator]: iterator,\n    };\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getChunkedStream.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getUnmarshalledStream\": () => (/* binding */ getUnmarshalledStream)\n/* harmony export */ });\nfunction getUnmarshalledStream(source, options) {\n    return {\n        [Symbol.asyncIterator]: async function* () {\n            for await (const chunk of source) {\n                const message = options.eventStreamCodec.decode(chunk);\n                const { value: messageType } = message.headers[\":message-type\"];\n                if (messageType === \"error\") {\n                    const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n                    unmodeledError.name = message.headers[\":error-code\"].value;\n                    throw unmodeledError;\n                }\n                else if (messageType === \"exception\") {\n                    const code = message.headers[\":exception-type\"].value;\n                    const exception = { [code]: message };\n                    const deserializedException = await options.deserializer(exception);\n                    if (deserializedException.$unknown) {\n                        const error = new Error(options.toUtf8(message.body));\n                        error.name = code;\n                        throw error;\n                    }\n                    throw deserializedException[code];\n                }\n                else if (messageType === \"event\") {\n                    const event = {\n                        [message.headers[\":event-type\"].value]: message,\n                    };\n                    const deserialized = await options.deserializer(event);\n                    if (deserialized.$unknown)\n                        continue;\n                    yield deserialized;\n                }\n                else {\n                    throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n                }\n            }\n        },\n    };\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventStreamMarshaller\": () => (/* reexport safe */ _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller),\n/* harmony export */   \"eventStreamSerdeProvider\": () => (/* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_1__.eventStreamSerdeProvider)\n/* harmony export */ });\n/* harmony import */ var _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamMarshaller */ \"./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js\");\n/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./provider */ \"./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/provider.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/provider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/provider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"eventStreamSerdeProvider\": () => (/* binding */ eventStreamSerdeProvider)\n/* harmony export */ });\n/* harmony import */ var _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStreamMarshaller */ \"./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js\");\n\nconst eventStreamSerdeProvider = (options) => new _EventStreamMarshaller__WEBPACK_IMPORTED_MODULE_0__.EventStreamMarshaller(options);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/eventstream-serde-universal/dist-es/provider.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FetchHttpHandler\": () => (/* binding */ FetchHttpHandler)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_querystring_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/querystring-builder */ \"./node_modules/@aws-sdk/querystring-builder/dist-es/index.js\");\n/* harmony import */ var _request_timeout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./request-timeout */ \"./node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js\");\n\n\n\nclass FetchHttpHandler {\n    constructor(options) {\n        if (typeof options === \"function\") {\n            this.configProvider = options().then((opts) => opts || {});\n        }\n        else {\n            this.config = options ?? {};\n            this.configProvider = Promise.resolve(this.config);\n        }\n    }\n    destroy() {\n    }\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n        }\n        const requestTimeoutInMs = this.config.requestTimeout;\n        if (abortSignal?.aborted) {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            return Promise.reject(abortError);\n        }\n        let path = request.path;\n        if (request.query) {\n            const queryString = (0,_aws_sdk_querystring_builder__WEBPACK_IMPORTED_MODULE_1__.buildQueryString)(request.query);\n            if (queryString) {\n                path += `?${queryString}`;\n            }\n        }\n        const { port, method } = request;\n        const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n        const body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n        const requestOptions = {\n            body,\n            headers: new Headers(request.headers),\n            method: method,\n        };\n        if (typeof AbortController !== \"undefined\") {\n            requestOptions[\"signal\"] = abortSignal;\n        }\n        const fetchRequest = new Request(url, requestOptions);\n        const raceOfPromises = [\n            fetch(fetchRequest).then((response) => {\n                const fetchHeaders = response.headers;\n                const transformedHeaders = {};\n                for (const pair of fetchHeaders.entries()) {\n                    transformedHeaders[pair[0]] = pair[1];\n                }\n                const hasReadableStream = response.body !== undefined;\n                if (!hasReadableStream) {\n                    return response.blob().then((body) => ({\n                        response: new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse({\n                            headers: transformedHeaders,\n                            statusCode: response.status,\n                            body,\n                        }),\n                    }));\n                }\n                return {\n                    response: new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse({\n                        headers: transformedHeaders,\n                        statusCode: response.status,\n                        body: response.body,\n                    }),\n                };\n            }),\n            (0,_request_timeout__WEBPACK_IMPORTED_MODULE_2__.requestTimeout)(requestTimeoutInMs),\n        ];\n        if (abortSignal) {\n            raceOfPromises.push(new Promise((resolve, reject) => {\n                abortSignal.onabort = () => {\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                };\n            }));\n        }\n        return Promise.race(raceOfPromises);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FetchHttpHandler\": () => (/* reexport safe */ _fetch_http_handler__WEBPACK_IMPORTED_MODULE_0__.FetchHttpHandler),\n/* harmony export */   \"streamCollector\": () => (/* reexport safe */ _stream_collector__WEBPACK_IMPORTED_MODULE_1__.streamCollector)\n/* harmony export */ });\n/* harmony import */ var _fetch_http_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fetch-http-handler */ \"./node_modules/@aws-sdk/fetch-http-handler/dist-es/fetch-http-handler.js\");\n/* harmony import */ var _stream_collector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream-collector */ \"./node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"requestTimeout\": () => (/* binding */ requestTimeout)\n/* harmony export */ });\nfunction requestTimeout(timeoutInMs = 0) {\n    return new Promise((resolve, reject) => {\n        if (timeoutInMs) {\n            setTimeout(() => {\n                const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);\n                timeoutError.name = \"TimeoutError\";\n                reject(timeoutError);\n            }, timeoutInMs);\n        }\n    });\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/fetch-http-handler/dist-es/request-timeout.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"streamCollector\": () => (/* binding */ streamCollector)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-base64-browser */ \"./node_modules/@aws-sdk/util-base64-browser/dist-es/index.js\");\n\nconst streamCollector = (stream) => {\n    if (typeof Blob === \"function\" && stream instanceof Blob) {\n        return collectBlob(stream);\n    }\n    return collectStream(stream);\n};\nasync function collectBlob(blob) {\n    const base64 = await readToBase64(blob);\n    const arrayBuffer = (0,_aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_0__.fromBase64)(base64);\n    return new Uint8Array(arrayBuffer);\n}\nasync function collectStream(stream) {\n    let res = new Uint8Array(0);\n    const reader = stream.getReader();\n    let isDone = false;\n    while (!isDone) {\n        const { done, value } = await reader.read();\n        if (value) {\n            const prior = res;\n            res = new Uint8Array(prior.length + value.length);\n            res.set(prior);\n            res.set(value, prior.length);\n        }\n        isDone = done;\n    }\n    return res;\n}\nfunction readToBase64(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            if (reader.readyState !== 2) {\n                return reject(new Error(\"Reader aborted too early\"));\n            }\n            const result = (reader.result ?? \"\");\n            const commaIndex = result.indexOf(\",\");\n            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n            resolve(result.substring(dataOffset));\n        };\n        reader.onabort = () => reject(new Error(\"Read aborted\"));\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(blob);\n    });\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/fetch-http-handler/dist-es/stream-collector.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/hash-blob-browser/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/hash-blob-browser/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"blobHasher\": () => (/* binding */ blobHasher)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_chunked_blob_reader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/chunked-blob-reader */ \"./node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js\");\n\nconst blobHasher = async function blobHasher(hashCtor, blob) {\n    const hash = new hashCtor();\n    await (0,_aws_sdk_chunked_blob_reader__WEBPACK_IMPORTED_MODULE_0__.blobReader)(blob, (chunk) => {\n        hash.update(chunk);\n    });\n    return hash.digest();\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/hash-blob-browser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/invalid-dependency/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/invalid-dependency/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"invalidFunction\": () => (/* reexport safe */ _invalidFunction__WEBPACK_IMPORTED_MODULE_0__.invalidFunction),\n/* harmony export */   \"invalidProvider\": () => (/* reexport safe */ _invalidProvider__WEBPACK_IMPORTED_MODULE_1__.invalidProvider)\n/* harmony export */ });\n/* harmony import */ var _invalidFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalidFunction */ \"./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidFunction.js\");\n/* harmony import */ var _invalidProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./invalidProvider */ \"./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/invalid-dependency/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidFunction.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidFunction.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"invalidFunction\": () => (/* binding */ invalidFunction)\n/* harmony export */ });\nconst invalidFunction = (message) => () => {\n    throw new Error(message);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidFunction.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"invalidProvider\": () => (/* binding */ invalidProvider)\n/* harmony export */ });\nconst invalidProvider = (message) => () => Promise.reject(message);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/invalid-dependency/dist-es/invalidProvider.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isArrayBuffer\": () => (/* binding */ isArrayBuffer)\n/* harmony export */ });\nconst isArrayBuffer = (arg) => (typeof ArrayBuffer === \"function\" && arg instanceof ArrayBuffer) ||\n    Object.prototype.toString.call(arg) === \"[object ArrayBuffer]\";\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/md5-js/dist-es/constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-sdk/md5-js/dist-es/constants.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BLOCK_SIZE\": () => (/* binding */ BLOCK_SIZE),\n/* harmony export */   \"DIGEST_LENGTH\": () => (/* binding */ DIGEST_LENGTH),\n/* harmony export */   \"INIT\": () => (/* binding */ INIT)\n/* harmony export */ });\nconst BLOCK_SIZE = 64;\nconst DIGEST_LENGTH = 16;\nconst INIT = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476];\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/md5-js/dist-es/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/md5-js/dist-es/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/md5-js/dist-es/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Md5\": () => (/* binding */ Md5)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_utf8_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-utf8-node */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/md5-js/dist-es/constants.js\");\n\n\nclass Md5 {\n    constructor() {\n        this.state = Uint32Array.from(_constants__WEBPACK_IMPORTED_MODULE_1__.INIT);\n        this.buffer = new DataView(new ArrayBuffer(_constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE));\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        this.finished = false;\n    }\n    update(sourceData) {\n        if (isEmptyData(sourceData)) {\n            return;\n        }\n        else if (this.finished) {\n            throw new Error(\"Attempted to update an already finished hash.\");\n        }\n        const data = convertToBuffer(sourceData);\n        let position = 0;\n        let { byteLength } = data;\n        this.bytesHashed += byteLength;\n        while (byteLength > 0) {\n            this.buffer.setUint8(this.bufferLength++, data[position++]);\n            byteLength--;\n            if (this.bufferLength === _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE) {\n                this.hashBuffer();\n                this.bufferLength = 0;\n            }\n        }\n    }\n    async digest() {\n        if (!this.finished) {\n            const { buffer, bufferLength: undecoratedLength, bytesHashed } = this;\n            const bitsHashed = bytesHashed * 8;\n            buffer.setUint8(this.bufferLength++, 0b10000000);\n            if (undecoratedLength % _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE >= _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE - 8) {\n                for (let i = this.bufferLength; i < _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE; i++) {\n                    buffer.setUint8(i, 0);\n                }\n                this.hashBuffer();\n                this.bufferLength = 0;\n            }\n            for (let i = this.bufferLength; i < _constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE - 8; i++) {\n                buffer.setUint8(i, 0);\n            }\n            buffer.setUint32(_constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE - 8, bitsHashed >>> 0, true);\n            buffer.setUint32(_constants__WEBPACK_IMPORTED_MODULE_1__.BLOCK_SIZE - 4, Math.floor(bitsHashed / 0x100000000), true);\n            this.hashBuffer();\n            this.finished = true;\n        }\n        const out = new DataView(new ArrayBuffer(_constants__WEBPACK_IMPORTED_MODULE_1__.DIGEST_LENGTH));\n        for (let i = 0; i < 4; i++) {\n            out.setUint32(i * 4, this.state[i], true);\n        }\n        return new Uint8Array(out.buffer, out.byteOffset, out.byteLength);\n    }\n    hashBuffer() {\n        const { buffer, state } = this;\n        let a = state[0], b = state[1], c = state[2], d = state[3];\n        a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);\n        d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);\n        c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);\n        b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);\n        a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);\n        d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);\n        c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);\n        b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);\n        a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);\n        d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);\n        c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);\n        b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);\n        a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);\n        d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);\n        c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);\n        b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);\n        a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);\n        d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);\n        c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);\n        b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);\n        a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);\n        d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);\n        c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);\n        b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);\n        a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);\n        d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);\n        c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);\n        b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);\n        a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);\n        d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);\n        c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);\n        b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);\n        a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);\n        d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);\n        c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);\n        b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);\n        a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);\n        d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);\n        c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);\n        b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);\n        a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);\n        d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);\n        c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);\n        b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);\n        a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);\n        d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);\n        c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);\n        b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);\n        a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);\n        d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);\n        c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);\n        b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);\n        a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);\n        d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);\n        c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);\n        b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);\n        a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);\n        d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);\n        c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);\n        b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);\n        a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);\n        d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);\n        c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);\n        b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);\n        state[0] = (a + state[0]) & 0xffffffff;\n        state[1] = (b + state[1]) & 0xffffffff;\n        state[2] = (c + state[2]) & 0xffffffff;\n        state[3] = (d + state[3]) & 0xffffffff;\n    }\n}\nfunction cmn(q, a, b, x, s, t) {\n    a = (((a + q) & 0xffffffff) + ((x + t) & 0xffffffff)) & 0xffffffff;\n    return (((a << s) | (a >>> (32 - s))) + b) & 0xffffffff;\n}\nfunction ff(a, b, c, d, x, s, t) {\n    return cmn((b & c) | (~b & d), a, b, x, s, t);\n}\nfunction gg(a, b, c, d, x, s, t) {\n    return cmn((b & d) | (c & ~d), a, b, x, s, t);\n}\nfunction hh(a, b, c, d, x, s, t) {\n    return cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction ii(a, b, c, d, x, s, t) {\n    return cmn(c ^ (b | ~d), a, b, x, s, t);\n}\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nfunction convertToBuffer(data) {\n    if (typeof data === \"string\") {\n        return (0,_aws_sdk_util_utf8_node__WEBPACK_IMPORTED_MODULE_0__.fromUtf8)(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/md5-js/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS\": () => (/* binding */ NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME\": () => (/* binding */ NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME),\n/* harmony export */   \"NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME\": () => (/* binding */ NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-config-provider */ \"./node_modules/@aws-sdk/util-config-provider/dist-es/index.js\");\n\nconst NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = \"AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS\";\nconst NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = \"s3_disable_multiregion_access_points\";\nconst NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),\n    configFileSelector: (profile) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),\n    default: false,\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NODE_USE_ARN_REGION_CONFIG_OPTIONS\": () => (/* binding */ NODE_USE_ARN_REGION_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_USE_ARN_REGION_ENV_NAME\": () => (/* binding */ NODE_USE_ARN_REGION_ENV_NAME),\n/* harmony export */   \"NODE_USE_ARN_REGION_INI_NAME\": () => (/* binding */ NODE_USE_ARN_REGION_INI_NAME)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-config-provider */ \"./node_modules/@aws-sdk/util-config-provider/dist-es/index.js\");\n\nconst NODE_USE_ARN_REGION_ENV_NAME = \"AWS_S3_USE_ARN_REGION\";\nconst NODE_USE_ARN_REGION_INI_NAME = \"s3_use_arn_region\";\nconst NODE_USE_ARN_REGION_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(env, NODE_USE_ARN_REGION_ENV_NAME, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ENV),\n    configFileSelector: (profile) => (0,_aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)(profile, NODE_USE_ARN_REGION_INI_NAME, _aws_sdk_util_config_provider__WEBPACK_IMPORTED_MODULE_0__.SelectorType.CONFIG),\n    default: false,\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bucketEndpointMiddleware\": () => (/* binding */ bucketEndpointMiddleware),\n/* harmony export */   \"bucketEndpointMiddlewareOptions\": () => (/* binding */ bucketEndpointMiddlewareOptions),\n/* harmony export */   \"getBucketEndpointPlugin\": () => (/* binding */ getBucketEndpointPlugin)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-arn-parser */ \"./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js\");\n/* harmony import */ var _bucketHostname__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bucketHostname */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js\");\n\n\n\nconst bucketEndpointMiddleware = (options) => (next, context) => async (args) => {\n    const { Bucket: bucketName } = args.input;\n    let replaceBucketInPath = options.bucketEndpoint;\n    const request = args.request;\n    if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {\n        if (options.bucketEndpoint) {\n            request.hostname = bucketName;\n        }\n        else if ((0,_aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_1__.validate)(bucketName)) {\n            const bucketArn = (0,_aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_1__.parse)(bucketName);\n            const clientRegion = await options.region();\n            const useDualstackEndpoint = await options.useDualstackEndpoint();\n            const useFipsEndpoint = await options.useFipsEndpoint();\n            const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint })) || {};\n            const useArnRegion = await options.useArnRegion();\n            const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService, } = (0,_bucketHostname__WEBPACK_IMPORTED_MODULE_2__.bucketHostname)({\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: useDualstackEndpoint,\n                fipsEndpoint: useFipsEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion,\n                clientRegion: clientRegion,\n                isCustomEndpoint: options.isCustomEndpoint,\n                disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints(),\n            });\n            if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n            }\n            if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n            }\n            request.hostname = hostname;\n            replaceBucketInPath = bucketEndpoint;\n        }\n        else {\n            const clientRegion = await options.region();\n            const dualstackEndpoint = await options.useDualstackEndpoint();\n            const fipsEndpoint = await options.useFipsEndpoint();\n            const { hostname, bucketEndpoint } = (0,_bucketHostname__WEBPACK_IMPORTED_MODULE_2__.bucketHostname)({\n                bucketName,\n                clientRegion,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint,\n                fipsEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                isCustomEndpoint: options.isCustomEndpoint,\n            });\n            request.hostname = hostname;\n            replaceBucketInPath = bucketEndpoint;\n        }\n        if (replaceBucketInPath) {\n            request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n            if (request.path === \"\") {\n                request.path = \"/\";\n            }\n        }\n    }\n    return next({ ...args, request });\n};\nconst bucketEndpointMiddlewareOptions = {\n    tags: [\"BUCKET_ENDPOINT\"],\n    name: \"bucketEndpointMiddleware\",\n    relation: \"before\",\n    toMiddleware: \"hostHeaderMiddleware\",\n    override: true,\n};\nconst getBucketEndpointPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bucketHostname\": () => (/* binding */ bucketHostname)\n/* harmony export */ });\n/* harmony import */ var _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bucketHostnameUtils */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js\");\n\nconst bucketHostname = (options) => {\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateCustomEndpoint)(options);\n    return (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.isBucketNameOptions)(options)\n        ?\n            getEndpointFromBucketName(options)\n        :\n            getEndpointFromArn(options);\n};\nconst getEndpointFromBucketName = ({ accelerateEndpoint = false, clientRegion: region, baseHostname, bucketName, dualstackEndpoint = false, fipsEndpoint = false, pathStyleEndpoint = false, tlsCompatible = true, isCustomEndpoint = false, }) => {\n    const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.getSuffix)(baseHostname);\n    if (pathStyleEndpoint || !(0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.isDnsCompatibleBucketName)(bucketName) || (tlsCompatible && _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.DOT_PATTERN.test(bucketName))) {\n        return {\n            bucketEndpoint: false,\n            hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,\n        };\n    }\n    if (accelerateEndpoint) {\n        baseHostname = `s3-accelerate${dualstackEndpoint ? \".dualstack\" : \"\"}.${hostnameSuffix}`;\n    }\n    else if (dualstackEndpoint) {\n        baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;\n    }\n    return {\n        bucketEndpoint: true,\n        hostname: `${bucketName}.${baseHostname}`,\n    };\n};\nconst getEndpointFromArn = (options) => {\n    const { isCustomEndpoint, baseHostname, clientRegion } = options;\n    const hostnameSuffix = isCustomEndpoint ? baseHostname : (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.getSuffixForArnEndpoint)(baseHostname)[1];\n    const { pathStyleEndpoint, accelerateEndpoint = false, fipsEndpoint = false, tlsCompatible = true, bucketName, clientPartition = \"aws\", } = options;\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateArnEndpointOptions)({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });\n    const { service, partition, accountId, region, resource } = bucketName;\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateService)(service);\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validatePartition)(partition, { clientPartition });\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateAccountId)(accountId);\n    const { accesspointName, outpostId } = (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.getArnResources)(resource);\n    if (service === \"s3-object-lambda\") {\n        return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });\n    }\n    if (region === \"\") {\n        return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });\n    }\n    if (outpostId) {\n        return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });\n    }\n    return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });\n};\nconst getEndpointFromObjectLambdaArn = ({ dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, useArnRegion, clientRegion, clientSigningRegion = clientRegion, accesspointName, bucketName, hostnameSuffix, }) => {\n    const { accountId, region, service } = bucketName;\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegionalClient)(clientRegion);\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegion)(region, {\n        useArnRegion,\n        clientRegion,\n        clientSigningRegion,\n        allowFipsRegion: true,\n        useFipsEndpoint: fipsEndpoint,\n    });\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateNoDualstack)(dualstackEndpoint);\n    const DNSHostLabel = `${accesspointName}-${accountId}`;\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateDNSHostLabel)(DNSHostLabel, { tlsCompatible });\n    const endpointRegion = useArnRegion ? region : clientRegion;\n    const signingRegion = useArnRegion ? region : clientSigningRegion;\n    return {\n        bucketEndpoint: true,\n        hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? \"-fips\" : \"\"}.${endpointRegion}.${hostnameSuffix}`,\n        signingRegion,\n        signingService: service,\n    };\n};\nconst getEndpointFromMRAPArn = ({ disableMultiregionAccessPoints, dualstackEndpoint = false, isCustomEndpoint, mrapAlias, hostnameSuffix, }) => {\n    if (disableMultiregionAccessPoints === true) {\n        throw new Error(\"SDK is attempting to use a MRAP ARN. Please enable to feature.\");\n    }\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateMrapAlias)(mrapAlias);\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateNoDualstack)(dualstackEndpoint);\n    return {\n        bucketEndpoint: true,\n        hostname: `${mrapAlias}${isCustomEndpoint ? \"\" : `.accesspoint.s3-global`}.${hostnameSuffix}`,\n        signingRegion: \"*\",\n    };\n};\nconst getEndpointFromOutpostArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, outpostId, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix, }) => {\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegionalClient)(clientRegion);\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegion)(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });\n    const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateDNSHostLabel)(DNSHostLabel, { tlsCompatible });\n    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateOutpostService)(bucketName.service);\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateDNSHostLabel)(outpostId, { tlsCompatible });\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateNoDualstack)(dualstackEndpoint);\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateNoFIPS)(fipsEndpoint);\n    const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;\n    return {\n        bucketEndpoint: true,\n        hostname: `${hostnamePrefix}${isCustomEndpoint ? \"\" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,\n        signingRegion,\n        signingService: \"s3-outposts\",\n    };\n};\nconst getEndpointFromAccessPointArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix, }) => {\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegionalClient)(clientRegion);\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateRegion)(bucketName.region, {\n        useArnRegion,\n        clientRegion,\n        clientSigningRegion,\n        allowFipsRegion: true,\n        useFipsEndpoint: fipsEndpoint,\n    });\n    const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateDNSHostLabel)(hostnamePrefix, { tlsCompatible });\n    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n    (0,_bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_0__.validateS3Service)(bucketName.service);\n    return {\n        bucketEndpoint: true,\n        hostname: `${hostnamePrefix}${isCustomEndpoint\n            ? \"\"\n            : `.s3-accesspoint${fipsEndpoint ? \"-fips\" : \"\"}${dualstackEndpoint ? \".dualstack\" : \"\"}.${endpointRegion}`}.${hostnameSuffix}`,\n        signingRegion,\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOT_PATTERN\": () => (/* binding */ DOT_PATTERN),\n/* harmony export */   \"S3_HOSTNAME_PATTERN\": () => (/* binding */ S3_HOSTNAME_PATTERN),\n/* harmony export */   \"getArnResources\": () => (/* binding */ getArnResources),\n/* harmony export */   \"getSuffix\": () => (/* binding */ getSuffix),\n/* harmony export */   \"getSuffixForArnEndpoint\": () => (/* binding */ getSuffixForArnEndpoint),\n/* harmony export */   \"isBucketNameOptions\": () => (/* binding */ isBucketNameOptions),\n/* harmony export */   \"isDnsCompatibleBucketName\": () => (/* binding */ isDnsCompatibleBucketName),\n/* harmony export */   \"validateAccountId\": () => (/* binding */ validateAccountId),\n/* harmony export */   \"validateArnEndpointOptions\": () => (/* binding */ validateArnEndpointOptions),\n/* harmony export */   \"validateCustomEndpoint\": () => (/* binding */ validateCustomEndpoint),\n/* harmony export */   \"validateDNSHostLabel\": () => (/* binding */ validateDNSHostLabel),\n/* harmony export */   \"validateMrapAlias\": () => (/* binding */ validateMrapAlias),\n/* harmony export */   \"validateNoDualstack\": () => (/* binding */ validateNoDualstack),\n/* harmony export */   \"validateNoFIPS\": () => (/* binding */ validateNoFIPS),\n/* harmony export */   \"validateOutpostService\": () => (/* binding */ validateOutpostService),\n/* harmony export */   \"validatePartition\": () => (/* binding */ validatePartition),\n/* harmony export */   \"validateRegion\": () => (/* binding */ validateRegion),\n/* harmony export */   \"validateRegionalClient\": () => (/* binding */ validateRegionalClient),\n/* harmony export */   \"validateS3Service\": () => (/* binding */ validateS3Service),\n/* harmony export */   \"validateService\": () => (/* binding */ validateService)\n/* harmony export */ });\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nconst DOT_PATTERN = /\\./;\nconst S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nconst S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nconst AWS_PARTITION_SUFFIX = \"amazonaws.com\";\nconst isBucketNameOptions = (options) => typeof options.bucketName === \"string\";\nconst isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\nconst getRegionalSuffix = (hostname) => {\n    const parts = hostname.match(S3_HOSTNAME_PATTERN);\n    return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), \"\")];\n};\nconst getSuffix = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\nconst getSuffixForArnEndpoint = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname)\n    ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, \"\"), AWS_PARTITION_SUFFIX]\n    : getRegionalSuffix(hostname);\nconst validateArnEndpointOptions = (options) => {\n    if (options.pathStyleEndpoint) {\n        throw new Error(\"Path-style S3 endpoint is not supported when bucket is an ARN\");\n    }\n    if (options.accelerateEndpoint) {\n        throw new Error(\"Accelerate endpoint is not supported when bucket is an ARN\");\n    }\n    if (!options.tlsCompatible) {\n        throw new Error(\"HTTPS is required when bucket is an ARN\");\n    }\n};\nconst validateService = (service) => {\n    if (service !== \"s3\" && service !== \"s3-outposts\" && service !== \"s3-object-lambda\") {\n        throw new Error(\"Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component\");\n    }\n};\nconst validateS3Service = (service) => {\n    if (service !== \"s3\") {\n        throw new Error(\"Expect 's3' in Accesspoint ARN service component\");\n    }\n};\nconst validateOutpostService = (service) => {\n    if (service !== \"s3-outposts\") {\n        throw new Error(\"Expect 's3-posts' in Outpost ARN service component\");\n    }\n};\nconst validatePartition = (partition, options) => {\n    if (partition !== options.clientPartition) {\n        throw new Error(`Partition in ARN is incompatible, got \"${partition}\" but expected \"${options.clientPartition}\"`);\n    }\n};\nconst validateRegion = (region, options) => {\n    if (region === \"\") {\n        throw new Error(\"ARN region is empty\");\n    }\n    if (options.useFipsEndpoint) {\n        if (!options.allowFipsRegion) {\n            throw new Error(\"FIPS region is not supported\");\n        }\n        else if (!isEqualRegions(region, options.clientRegion)) {\n            throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);\n        }\n    }\n    if (!options.useArnRegion &&\n        !isEqualRegions(region, options.clientRegion || \"\") &&\n        !isEqualRegions(region, options.clientSigningRegion || \"\")) {\n        throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);\n    }\n};\nconst validateRegionalClient = (region) => {\n    if ([\"s3-external-1\", \"aws-global\"].includes(region)) {\n        throw new Error(`Client region ${region} is not regional`);\n    }\n};\nconst isEqualRegions = (regionA, regionB) => regionA === regionB;\nconst validateAccountId = (accountId) => {\n    if (!/[0-9]{12}/.exec(accountId)) {\n        throw new Error(\"Access point ARN accountID does not match regex '[0-9]{12}'\");\n    }\n};\nconst validateDNSHostLabel = (label, options = { tlsCompatible: true }) => {\n    if (label.length >= 64 ||\n        !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) ||\n        /(\\d+\\.){3}\\d+/.test(label) ||\n        /[.-]{2}/.test(label) ||\n        (options?.tlsCompatible && DOT_PATTERN.test(label))) {\n        throw new Error(`Invalid DNS label ${label}`);\n    }\n};\nconst validateCustomEndpoint = (options) => {\n    if (options.isCustomEndpoint) {\n        if (options.dualstackEndpoint)\n            throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n        if (options.accelerateEndpoint)\n            throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n    }\n};\nconst getArnResources = (resource) => {\n    const delimiter = resource.includes(\":\") ? \":\" : \"/\";\n    const [resourceType, ...rest] = resource.split(delimiter);\n    if (resourceType === \"accesspoint\") {\n        if (rest.length !== 1 || rest[0] === \"\") {\n            throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);\n        }\n        return { accesspointName: rest[0] };\n    }\n    else if (resourceType === \"outpost\") {\n        if (!rest[0] || rest[1] !== \"accesspoint\" || !rest[2] || rest.length !== 3) {\n            throw new Error(`Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`);\n        }\n        const [outpostId, _, accesspointName] = rest;\n        return { outpostId, accesspointName };\n    }\n    else {\n        throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);\n    }\n};\nconst validateNoDualstack = (dualstackEndpoint) => {\n    if (dualstackEndpoint)\n        throw new Error(\"Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.\");\n};\nconst validateNoFIPS = (useFipsEndpoint) => {\n    if (useFipsEndpoint)\n        throw new Error(`FIPS region is not supported with Outpost.`);\n};\nconst validateMrapAlias = (name) => {\n    try {\n        name.split(\".\").forEach((label) => {\n            validateDNSHostLabel(label);\n        });\n    }\n    catch (e) {\n        throw new Error(`\"${name}\" is not a DNS compatible name.`);\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveBucketEndpointConfig\": () => (/* binding */ resolveBucketEndpointConfig)\n/* harmony export */ });\nfunction resolveBucketEndpointConfig(input) {\n    const { bucketEndpoint = false, forcePathStyle = false, useAccelerateEndpoint = false, useArnRegion = false, disableMultiregionAccessPoints = false, } = input;\n    return {\n        ...input,\n        bucketEndpoint,\n        forcePathStyle,\n        useAccelerateEndpoint,\n        useArnRegion: typeof useArnRegion === \"function\" ? useArnRegion : () => Promise.resolve(useArnRegion),\n        disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === \"function\"\n            ? disableMultiregionAccessPoints\n            : () => Promise.resolve(disableMultiregionAccessPoints),\n    };\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS\": () => (/* reexport safe */ _NodeDisableMultiregionAccessPointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME\": () => (/* reexport safe */ _NodeDisableMultiregionAccessPointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME),\n/* harmony export */   \"NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME\": () => (/* reexport safe */ _NodeDisableMultiregionAccessPointConfigOptions__WEBPACK_IMPORTED_MODULE_0__.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME),\n/* harmony export */   \"NODE_USE_ARN_REGION_CONFIG_OPTIONS\": () => (/* reexport safe */ _NodeUseArnRegionConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_ARN_REGION_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_USE_ARN_REGION_ENV_NAME\": () => (/* reexport safe */ _NodeUseArnRegionConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_ARN_REGION_ENV_NAME),\n/* harmony export */   \"NODE_USE_ARN_REGION_INI_NAME\": () => (/* reexport safe */ _NodeUseArnRegionConfigOptions__WEBPACK_IMPORTED_MODULE_1__.NODE_USE_ARN_REGION_INI_NAME),\n/* harmony export */   \"bucketEndpointMiddleware\": () => (/* reexport safe */ _bucketEndpointMiddleware__WEBPACK_IMPORTED_MODULE_2__.bucketEndpointMiddleware),\n/* harmony export */   \"bucketEndpointMiddlewareOptions\": () => (/* reexport safe */ _bucketEndpointMiddleware__WEBPACK_IMPORTED_MODULE_2__.bucketEndpointMiddlewareOptions),\n/* harmony export */   \"bucketHostname\": () => (/* reexport safe */ _bucketHostname__WEBPACK_IMPORTED_MODULE_3__.bucketHostname),\n/* harmony export */   \"getArnResources\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.getArnResources),\n/* harmony export */   \"getBucketEndpointPlugin\": () => (/* reexport safe */ _bucketEndpointMiddleware__WEBPACK_IMPORTED_MODULE_2__.getBucketEndpointPlugin),\n/* harmony export */   \"getSuffixForArnEndpoint\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.getSuffixForArnEndpoint),\n/* harmony export */   \"resolveBucketEndpointConfig\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.resolveBucketEndpointConfig),\n/* harmony export */   \"validateAccountId\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateAccountId),\n/* harmony export */   \"validateDNSHostLabel\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateDNSHostLabel),\n/* harmony export */   \"validateNoDualstack\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateNoDualstack),\n/* harmony export */   \"validateNoFIPS\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateNoFIPS),\n/* harmony export */   \"validateOutpostService\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateOutpostService),\n/* harmony export */   \"validatePartition\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validatePartition),\n/* harmony export */   \"validateRegion\": () => (/* reexport safe */ _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__.validateRegion)\n/* harmony export */ });\n/* harmony import */ var _NodeDisableMultiregionAccessPointConfigOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NodeDisableMultiregionAccessPointConfigOptions */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeDisableMultiregionAccessPointConfigOptions.js\");\n/* harmony import */ var _NodeUseArnRegionConfigOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NodeUseArnRegionConfigOptions */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/NodeUseArnRegionConfigOptions.js\");\n/* harmony import */ var _bucketEndpointMiddleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bucketEndpointMiddleware */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketEndpointMiddleware.js\");\n/* harmony import */ var _bucketHostname__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bucketHostname */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js\");\n/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./configurations */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/configurations.js\");\n/* harmony import */ var _bucketHostnameUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bucketHostnameUtils */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostnameUtils.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"contentLengthMiddleware\": () => (/* binding */ contentLengthMiddleware),\n/* harmony export */   \"contentLengthMiddlewareOptions\": () => (/* binding */ contentLengthMiddlewareOptions),\n/* harmony export */   \"getContentLengthPlugin\": () => (/* binding */ getContentLengthPlugin)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n\nconst CONTENT_LENGTH_HEADER = \"content-length\";\nfunction contentLengthMiddleware(bodyLengthChecker) {\n    return (next) => async (args) => {\n        const request = args.request;\n        if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {\n            const { body, headers } = request;\n            if (body &&\n                Object.keys(headers)\n                    .map((str) => str.toLowerCase())\n                    .indexOf(CONTENT_LENGTH_HEADER) === -1) {\n                try {\n                    const length = bodyLengthChecker(body);\n                    request.headers = {\n                        ...request.headers,\n                        [CONTENT_LENGTH_HEADER]: String(length),\n                    };\n                }\n                catch (error) {\n                }\n            }\n        }\n        return next({\n            ...args,\n            request,\n        });\n    };\n}\nconst contentLengthMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n    name: \"contentLengthMiddleware\",\n    override: true,\n};\nconst getContentLengthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-content-length/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createConfigValueProvider\": () => (/* binding */ createConfigValueProvider)\n/* harmony export */ });\nconst createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n    const configProvider = async () => {\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n        if (typeof configValue === \"function\") {\n            return configValue();\n        }\n        return configValue;\n    };\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n        return async () => {\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n                if (\"url\" in endpoint) {\n                    return endpoint.url.href;\n                }\n                if (\"hostname\" in endpoint) {\n                    const { protocol, hostname, port, path } = endpoint;\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n                }\n            }\n            return endpoint;\n        };\n    }\n    return configProvider;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEndpointFromInstructions\": () => (/* binding */ getEndpointFromInstructions),\n/* harmony export */   \"resolveParams\": () => (/* binding */ resolveParams)\n/* harmony export */ });\n/* harmony import */ var _service_customizations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../service-customizations */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/index.js\");\n/* harmony import */ var _createConfigValueProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createConfigValueProvider */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js\");\n\n\nconst getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\n    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n    if (typeof clientConfig.endpointProvider !== \"function\") {\n        throw new Error(\"config.endpointProvider is not set.\");\n    }\n    const endpoint = clientConfig.endpointProvider(endpointParams, context);\n    return endpoint;\n};\nconst resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\n    const endpointParams = {};\n    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\n    for (const [name, instruction] of Object.entries(instructions)) {\n        switch (instruction.type) {\n            case \"staticContextParams\":\n                endpointParams[name] = instruction.value;\n                break;\n            case \"contextParams\":\n                endpointParams[name] = commandInput[instruction.name];\n                break;\n            case \"clientContextParams\":\n            case \"builtInParams\":\n                endpointParams[name] = await (0,_createConfigValueProvider__WEBPACK_IMPORTED_MODULE_1__.createConfigValueProvider)(instruction.name, name, clientConfig)();\n                break;\n            default:\n                throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n        }\n    }\n    if (Object.keys(instructions).length === 0) {\n        Object.assign(endpointParams, clientConfig);\n    }\n    if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n        await (0,_service_customizations__WEBPACK_IMPORTED_MODULE_0__.resolveParamsForS3)(endpointParams);\n    }\n    return endpointParams;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEndpointFromInstructions\": () => (/* reexport safe */ _getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__.getEndpointFromInstructions),\n/* harmony export */   \"resolveParams\": () => (/* reexport safe */ _getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__.resolveParams),\n/* harmony export */   \"toEndpointV1\": () => (/* reexport safe */ _toEndpointV1__WEBPACK_IMPORTED_MODULE_1__.toEndpointV1)\n/* harmony export */ });\n/* harmony import */ var _getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEndpointFromInstructions */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js\");\n/* harmony import */ var _toEndpointV1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toEndpointV1 */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toEndpointV1\": () => (/* binding */ toEndpointV1)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/url-parser */ \"./node_modules/@aws-sdk/url-parser/dist-es/index.js\");\n\nconst toEndpointV1 = (endpoint) => {\n    if (typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n            return (0,_aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(endpoint.url);\n        }\n        return endpoint;\n    }\n    return (0,_aws_sdk_url_parser__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(endpoint);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"endpointMiddleware\": () => (/* binding */ endpointMiddleware)\n/* harmony export */ });\n/* harmony import */ var _adaptors_getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adaptors/getEndpointFromInstructions */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js\");\n\nconst endpointMiddleware = ({ config, instructions, }) => {\n    return (next, context) => async (args) => {\n        const endpoint = await (0,_adaptors_getEndpointFromInstructions__WEBPACK_IMPORTED_MODULE_0__.getEndpointFromInstructions)(args.input, {\n            getEndpointParameterInstructions() {\n                return instructions;\n            },\n        }, { ...config }, context);\n        context.endpointV2 = endpoint;\n        context.authSchemes = endpoint.properties?.authSchemes;\n        const authScheme = context.authSchemes?.[0];\n        if (authScheme) {\n            context[\"signing_region\"] = authScheme.signingRegion;\n            context[\"signing_service\"] = authScheme.signingName;\n        }\n        return next({\n            ...args,\n        });\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"endpointMiddlewareOptions\": () => (/* binding */ endpointMiddlewareOptions),\n/* harmony export */   \"getEndpointPlugin\": () => (/* binding */ getEndpointPlugin)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/index.js\");\n/* harmony import */ var _endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./endpointMiddleware */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js\");\n\n\nconst endpointMiddlewareOptions = {\n    step: \"serialize\",\n    tags: [\"ENDPOINT_PARAMETERS\", \"ENDPOINT_V2\", \"ENDPOINT\"],\n    name: \"endpointV2Middleware\",\n    override: true,\n    relation: \"before\",\n    toMiddleware: _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_0__.serializerMiddlewareOption.name,\n};\nconst getEndpointPlugin = (config, instructions) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo((0,_endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__.endpointMiddleware)({\n            config,\n            instructions,\n        }), endpointMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"endpointMiddleware\": () => (/* reexport safe */ _endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__.endpointMiddleware),\n/* harmony export */   \"endpointMiddlewareOptions\": () => (/* reexport safe */ _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__.endpointMiddlewareOptions),\n/* harmony export */   \"getEndpointFromInstructions\": () => (/* reexport safe */ _adaptors__WEBPACK_IMPORTED_MODULE_0__.getEndpointFromInstructions),\n/* harmony export */   \"getEndpointPlugin\": () => (/* reexport safe */ _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__.getEndpointPlugin),\n/* harmony export */   \"resolveEndpointConfig\": () => (/* reexport safe */ _resolveEndpointConfig__WEBPACK_IMPORTED_MODULE_3__.resolveEndpointConfig),\n/* harmony export */   \"resolveParams\": () => (/* reexport safe */ _adaptors__WEBPACK_IMPORTED_MODULE_0__.resolveParams),\n/* harmony export */   \"toEndpointV1\": () => (/* reexport safe */ _adaptors__WEBPACK_IMPORTED_MODULE_0__.toEndpointV1)\n/* harmony export */ });\n/* harmony import */ var _adaptors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adaptors */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/index.js\");\n/* harmony import */ var _endpointMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./endpointMiddleware */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js\");\n/* harmony import */ var _getEndpointPlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getEndpointPlugin */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js\");\n/* harmony import */ var _resolveEndpointConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveEndpointConfig */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/types.js\");\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveEndpointConfig\": () => (/* binding */ resolveEndpointConfig)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-middleware */ \"./node_modules/@aws-sdk/util-middleware/dist-es/index.js\");\n/* harmony import */ var _adaptors_toEndpointV1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adaptors/toEndpointV1 */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js\");\n\n\nconst resolveEndpointConfig = (input) => {\n    const tls = input.tls ?? true;\n    const { endpoint } = input;\n    const customEndpointProvider = endpoint != null ? async () => (0,_adaptors_toEndpointV1__WEBPACK_IMPORTED_MODULE_1__.toEndpointV1)(await (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(endpoint)()) : undefined;\n    const isCustomEndpoint = !!endpoint;\n    return {\n        ...input,\n        endpoint: customEndpointProvider,\n        tls,\n        isCustomEndpoint,\n        useDualstackEndpoint: (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useDualstackEndpoint ?? false),\n        useFipsEndpoint: (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.useFipsEndpoint ?? false),\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOT_PATTERN\": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.DOT_PATTERN),\n/* harmony export */   \"S3_HOSTNAME_PATTERN\": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.S3_HOSTNAME_PATTERN),\n/* harmony export */   \"isArnBucketName\": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.isArnBucketName),\n/* harmony export */   \"isDnsCompatibleBucketName\": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.isDnsCompatibleBucketName),\n/* harmony export */   \"resolveParamsForS3\": () => (/* reexport safe */ _s3__WEBPACK_IMPORTED_MODULE_0__.resolveParamsForS3)\n/* harmony export */ });\n/* harmony import */ var _s3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./s3 */ \"./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOT_PATTERN\": () => (/* binding */ DOT_PATTERN),\n/* harmony export */   \"S3_HOSTNAME_PATTERN\": () => (/* binding */ S3_HOSTNAME_PATTERN),\n/* harmony export */   \"isArnBucketName\": () => (/* binding */ isArnBucketName),\n/* harmony export */   \"isDnsCompatibleBucketName\": () => (/* binding */ isDnsCompatibleBucketName),\n/* harmony export */   \"resolveParamsForS3\": () => (/* binding */ resolveParamsForS3)\n/* harmony export */ });\nconst resolveParamsForS3 = async (endpointParams) => {\n    const bucket = endpointParams?.Bucket || \"\";\n    if (typeof endpointParams.Bucket === \"string\") {\n        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\n    }\n    if (isArnBucketName(bucket)) {\n        if (endpointParams.ForcePathStyle === true) {\n            throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n        }\n    }\n    else if (!isDnsCompatibleBucketName(bucket) ||\n        (bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\")) ||\n        bucket.toLowerCase() !== bucket ||\n        bucket.length < 3) {\n        endpointParams.ForcePathStyle = true;\n    }\n    if (endpointParams.DisableMultiRegionAccessPoints) {\n        endpointParams.disableMultiRegionAccessPoints = true;\n        endpointParams.DisableMRAP = true;\n    }\n    return endpointParams;\n};\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nconst DOT_PATTERN = /\\./;\nconst S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nconst isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\nconst isArnBucketName = (bucketName) => {\n    const [arn, partition, service, region, account, typeOrId] = bucketName.split(\":\");\n    const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n    const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;\n    if (isArn && !isValidArn) {\n        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n    }\n    return arn === \"arn\" && !!partition && !!service && !!account && !!typeOrId;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-endpoint/dist-es/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-endpoint/dist-es/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-endpoint/dist-es/types.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addExpectContinueMiddleware\": () => (/* binding */ addExpectContinueMiddleware),\n/* harmony export */   \"addExpectContinueMiddlewareOptions\": () => (/* binding */ addExpectContinueMiddlewareOptions),\n/* harmony export */   \"getAddExpectContinuePlugin\": () => (/* binding */ getAddExpectContinuePlugin)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n\nfunction addExpectContinueMiddleware(options) {\n    return (next) => async (args) => {\n        const { request } = args;\n        if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n            request.headers = {\n                ...request.headers,\n                Expect: \"100-continue\",\n            };\n        }\n        return next({\n            ...args,\n            request,\n        });\n    };\n}\nconst addExpectContinueMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n    name: \"addExpectContinueMiddleware\",\n    override: true,\n};\nconst getAddExpectContinuePlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-expect-continue/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChecksumAlgorithm\": () => (/* binding */ ChecksumAlgorithm),\n/* harmony export */   \"ChecksumLocation\": () => (/* binding */ ChecksumLocation)\n/* harmony export */ });\nvar ChecksumAlgorithm;\n(function (ChecksumAlgorithm) {\n    ChecksumAlgorithm[\"MD5\"] = \"MD5\";\n    ChecksumAlgorithm[\"CRC32\"] = \"CRC32\";\n    ChecksumAlgorithm[\"CRC32C\"] = \"CRC32C\";\n    ChecksumAlgorithm[\"SHA1\"] = \"SHA1\";\n    ChecksumAlgorithm[\"SHA256\"] = \"SHA256\";\n})(ChecksumAlgorithm || (ChecksumAlgorithm = {}));\nvar ChecksumLocation;\n(function (ChecksumLocation) {\n    ChecksumLocation[\"HEADER\"] = \"header\";\n    ChecksumLocation[\"TRAILER\"] = \"trailer\";\n})(ChecksumLocation || (ChecksumLocation = {}));\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"flexibleChecksumsMiddleware\": () => (/* binding */ flexibleChecksumsMiddleware)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n/* harmony import */ var _getChecksumAlgorithmForRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getChecksumAlgorithmForRequest */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js\");\n/* harmony import */ var _getChecksumLocationName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getChecksumLocationName */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js\");\n/* harmony import */ var _hasHeader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hasHeader */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js\");\n/* harmony import */ var _isStreaming__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isStreaming */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js\");\n/* harmony import */ var _selectChecksumAlgorithmFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selectChecksumAlgorithmFunction */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js\");\n/* harmony import */ var _stringHasher__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stringHasher */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js\");\n/* harmony import */ var _validateChecksumFromResponse__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validateChecksumFromResponse */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js\");\n\n\n\n\n\n\n\n\nconst flexibleChecksumsMiddleware = (config, middlewareConfig) => (next) => async (args) => {\n    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request)) {\n        return next(args);\n    }\n    const { request } = args;\n    const { body: requestBody, headers } = request;\n    const { base64Encoder, streamHasher } = config;\n    const { input, requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;\n    const checksumAlgorithm = (0,_getChecksumAlgorithmForRequest__WEBPACK_IMPORTED_MODULE_1__.getChecksumAlgorithmForRequest)(input, {\n        requestChecksumRequired,\n        requestAlgorithmMember,\n    });\n    let updatedBody = requestBody;\n    let updatedHeaders = headers;\n    if (checksumAlgorithm) {\n        const checksumLocationName = (0,_getChecksumLocationName__WEBPACK_IMPORTED_MODULE_2__.getChecksumLocationName)(checksumAlgorithm);\n        const checksumAlgorithmFn = (0,_selectChecksumAlgorithmFunction__WEBPACK_IMPORTED_MODULE_5__.selectChecksumAlgorithmFunction)(checksumAlgorithm, config);\n        if ((0,_isStreaming__WEBPACK_IMPORTED_MODULE_4__.isStreaming)(requestBody)) {\n            const { getAwsChunkedEncodingStream, bodyLengthChecker } = config;\n            updatedBody = getAwsChunkedEncodingStream(requestBody, {\n                base64Encoder,\n                bodyLengthChecker,\n                checksumLocationName,\n                checksumAlgorithmFn,\n                streamHasher,\n            });\n            updatedHeaders = {\n                ...headers,\n                \"content-encoding\": \"aws-chunked\",\n                \"transfer-encoding\": \"chunked\",\n                \"x-amz-decoded-content-length\": headers[\"content-length\"],\n                \"x-amz-content-sha256\": \"STREAMING-UNSIGNED-PAYLOAD-TRAILER\",\n                \"x-amz-trailer\": checksumLocationName,\n            };\n            delete updatedHeaders[\"content-length\"];\n        }\n        else if (!(0,_hasHeader__WEBPACK_IMPORTED_MODULE_3__.hasHeader)(checksumLocationName, headers)) {\n            const rawChecksum = await (0,_stringHasher__WEBPACK_IMPORTED_MODULE_6__.stringHasher)(checksumAlgorithmFn, requestBody);\n            updatedHeaders = {\n                ...headers,\n                [checksumLocationName]: base64Encoder(rawChecksum),\n            };\n        }\n    }\n    const result = await next({\n        ...args,\n        request: {\n            ...request,\n            headers: updatedHeaders,\n            body: updatedBody,\n        },\n    });\n    const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;\n    if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n        (0,_validateChecksumFromResponse__WEBPACK_IMPORTED_MODULE_7__.validateChecksumFromResponse)(result.response, {\n            config,\n            responseAlgorithms,\n        });\n    }\n    return result;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getChecksum\": () => (/* binding */ getChecksum)\n/* harmony export */ });\n/* harmony import */ var _isStreaming__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isStreaming */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js\");\n/* harmony import */ var _stringHasher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringHasher */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js\");\n\n\nconst getChecksum = async (body, { streamHasher, checksumAlgorithmFn, base64Encoder }) => {\n    const digest = (0,_isStreaming__WEBPACK_IMPORTED_MODULE_0__.isStreaming)(body) ? streamHasher(checksumAlgorithmFn, body) : (0,_stringHasher__WEBPACK_IMPORTED_MODULE_1__.stringHasher)(checksumAlgorithmFn, body);\n    return base64Encoder(await digest);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getChecksumAlgorithmForRequest\": () => (/* binding */ getChecksumAlgorithmForRequest)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js\");\n\n\nconst getChecksumAlgorithmForRequest = (input, { requestChecksumRequired, requestAlgorithmMember }) => {\n    if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {\n        return requestChecksumRequired ? _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.MD5 : undefined;\n    }\n    const checksumAlgorithm = input[requestAlgorithmMember];\n    if (!_types__WEBPACK_IMPORTED_MODULE_1__.CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {\n        throw new Error(`The checksum algorithm \"${checksumAlgorithm}\" is not supported by the client.` +\n            ` Select one of ${_types__WEBPACK_IMPORTED_MODULE_1__.CLIENT_SUPPORTED_ALGORITHMS}.`);\n    }\n    return checksumAlgorithm;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmForRequest.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getChecksumAlgorithmListForResponse\": () => (/* binding */ getChecksumAlgorithmListForResponse)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js\");\n\nconst getChecksumAlgorithmListForResponse = (responseAlgorithms = []) => {\n    const validChecksumAlgorithms = [];\n    for (const algorithm of _types__WEBPACK_IMPORTED_MODULE_0__.PRIORITY_ORDER_ALGORITHMS) {\n        if (!responseAlgorithms.includes(algorithm) || !_types__WEBPACK_IMPORTED_MODULE_0__.CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {\n            continue;\n        }\n        validChecksumAlgorithms.push(algorithm);\n    }\n    return validChecksumAlgorithms;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getChecksumLocationName\": () => (/* binding */ getChecksumLocationName)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js\");\n\nconst getChecksumLocationName = (algorithm) => algorithm === _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.MD5 ? \"content-md5\" : `x-amz-checksum-${algorithm.toLowerCase()}`;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"flexibleChecksumsMiddlewareOptions\": () => (/* binding */ flexibleChecksumsMiddlewareOptions),\n/* harmony export */   \"getFlexibleChecksumsPlugin\": () => (/* binding */ getFlexibleChecksumsPlugin)\n/* harmony export */ });\n/* harmony import */ var _flexibleChecksumsMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flexibleChecksumsMiddleware */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js\");\n\nconst flexibleChecksumsMiddlewareOptions = {\n    name: \"flexibleChecksumsMiddleware\",\n    step: \"build\",\n    tags: [\"BODY_CHECKSUM\"],\n    override: true,\n};\nconst getFlexibleChecksumsPlugin = (config, middlewareConfig) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add((0,_flexibleChecksumsMiddleware__WEBPACK_IMPORTED_MODULE_0__.flexibleChecksumsMiddleware)(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasHeader\": () => (/* binding */ hasHeader)\n/* harmony export */ });\nconst hasHeader = (header, headers) => {\n    const soughtHeader = header.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/hasHeader.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChecksumAlgorithm\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm),\n/* harmony export */   \"ChecksumLocation\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumLocation),\n/* harmony export */   \"flexibleChecksumsMiddleware\": () => (/* reexport safe */ _flexibleChecksumsMiddleware__WEBPACK_IMPORTED_MODULE_1__.flexibleChecksumsMiddleware),\n/* harmony export */   \"flexibleChecksumsMiddlewareOptions\": () => (/* reexport safe */ _getFlexibleChecksumsPlugin__WEBPACK_IMPORTED_MODULE_2__.flexibleChecksumsMiddlewareOptions),\n/* harmony export */   \"getFlexibleChecksumsPlugin\": () => (/* reexport safe */ _getFlexibleChecksumsPlugin__WEBPACK_IMPORTED_MODULE_2__.getFlexibleChecksumsPlugin)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js\");\n/* harmony import */ var _flexibleChecksumsMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flexibleChecksumsMiddleware */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js\");\n/* harmony import */ var _getFlexibleChecksumsPlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getFlexibleChecksumsPlugin */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getFlexibleChecksumsPlugin.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isStreaming\": () => (/* binding */ isStreaming)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/is-array-buffer */ \"./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js\");\n\nconst isStreaming = (body) => body !== undefined && typeof body !== \"string\" && !ArrayBuffer.isView(body) && !(0,_aws_sdk_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(body);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/isStreaming.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"selectChecksumAlgorithmFunction\": () => (/* binding */ selectChecksumAlgorithmFunction)\n/* harmony export */ });\n/* harmony import */ var _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/crc32 */ \"./node_modules/@aws-crypto/crc32/build/index.js\");\n/* harmony import */ var _aws_crypto_crc32c__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-crypto/crc32c */ \"./node_modules/@aws-crypto/crc32c/build/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js\");\n\n\n\nconst selectChecksumAlgorithmFunction = (checksumAlgorithm, config) => ({\n    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.MD5]: config.md5,\n    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.CRC32]: _aws_crypto_crc32__WEBPACK_IMPORTED_MODULE_0__.AwsCrc32,\n    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.CRC32C]: _aws_crypto_crc32c__WEBPACK_IMPORTED_MODULE_1__.AwsCrc32c,\n    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.SHA1]: config.sha1,\n    [_constants__WEBPACK_IMPORTED_MODULE_2__.ChecksumAlgorithm.SHA256]: config.sha256,\n}[checksumAlgorithm]);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"stringHasher\": () => (/* binding */ stringHasher)\n/* harmony export */ });\nconst stringHasher = (checksumAlgorithmFn, body) => {\n    const hash = new checksumAlgorithmFn();\n    hash.update(body || \"\");\n    return hash.digest();\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/stringHasher.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CLIENT_SUPPORTED_ALGORITHMS\": () => (/* binding */ CLIENT_SUPPORTED_ALGORITHMS),\n/* harmony export */   \"PRIORITY_ORDER_ALGORITHMS\": () => (/* binding */ PRIORITY_ORDER_ALGORITHMS)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/constants.js\");\n\nconst CLIENT_SUPPORTED_ALGORITHMS = [\n    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.CRC32,\n    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.CRC32C,\n    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.SHA1,\n    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.SHA256,\n];\nconst PRIORITY_ORDER_ALGORITHMS = [\n    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.CRC32,\n    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.CRC32C,\n    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.SHA1,\n    _constants__WEBPACK_IMPORTED_MODULE_0__.ChecksumAlgorithm.SHA256,\n];\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/types.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"validateChecksumFromResponse\": () => (/* binding */ validateChecksumFromResponse)\n/* harmony export */ });\n/* harmony import */ var _getChecksum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getChecksum */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js\");\n/* harmony import */ var _getChecksumAlgorithmListForResponse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getChecksumAlgorithmListForResponse */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumAlgorithmListForResponse.js\");\n/* harmony import */ var _getChecksumLocationName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getChecksumLocationName */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksumLocationName.js\");\n/* harmony import */ var _selectChecksumAlgorithmFunction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectChecksumAlgorithmFunction */ \"./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/selectChecksumAlgorithmFunction.js\");\n\n\n\n\nconst validateChecksumFromResponse = async (response, { config, responseAlgorithms }) => {\n    const checksumAlgorithms = (0,_getChecksumAlgorithmListForResponse__WEBPACK_IMPORTED_MODULE_1__.getChecksumAlgorithmListForResponse)(responseAlgorithms);\n    const { body: responseBody, headers: responseHeaders } = response;\n    for (const algorithm of checksumAlgorithms) {\n        const responseHeader = (0,_getChecksumLocationName__WEBPACK_IMPORTED_MODULE_2__.getChecksumLocationName)(algorithm);\n        const checksumFromResponse = responseHeaders[responseHeader];\n        if (checksumFromResponse) {\n            const checksumAlgorithmFn = (0,_selectChecksumAlgorithmFunction__WEBPACK_IMPORTED_MODULE_3__.selectChecksumAlgorithmFunction)(algorithm, config);\n            const { streamHasher, base64Encoder } = config;\n            const checksum = await (0,_getChecksum__WEBPACK_IMPORTED_MODULE_0__.getChecksum)(responseBody, { streamHasher, checksumAlgorithmFn, base64Encoder });\n            if (checksum === checksumFromResponse) {\n                break;\n            }\n            throw new Error(`Checksum mismatch: expected \"${checksum}\" but received \"${checksumFromResponse}\"` +\n                ` in response header \"${responseHeader}\".`);\n        }\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getHostHeaderPlugin\": () => (/* binding */ getHostHeaderPlugin),\n/* harmony export */   \"hostHeaderMiddleware\": () => (/* binding */ hostHeaderMiddleware),\n/* harmony export */   \"hostHeaderMiddlewareOptions\": () => (/* binding */ hostHeaderMiddlewareOptions),\n/* harmony export */   \"resolveHostHeaderConfig\": () => (/* binding */ resolveHostHeaderConfig)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n\nfunction resolveHostHeaderConfig(input) {\n    return input;\n}\nconst hostHeaderMiddleware = (options) => (next) => async (args) => {\n    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request))\n        return next(args);\n    const { request } = args;\n    const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n    if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n        delete request.headers[\"host\"];\n        request.headers[\":authority\"] = \"\";\n    }\n    else if (!request.headers[\"host\"]) {\n        request.headers[\"host\"] = request.hostname;\n    }\n    return next(args);\n};\nconst hostHeaderMiddlewareOptions = {\n    name: \"hostHeaderMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"HOST\"],\n    override: true,\n};\nconst getHostHeaderPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getLocationConstraintPlugin\": () => (/* binding */ getLocationConstraintPlugin),\n/* harmony export */   \"locationConstraintMiddleware\": () => (/* binding */ locationConstraintMiddleware),\n/* harmony export */   \"locationConstraintMiddlewareOptions\": () => (/* binding */ locationConstraintMiddlewareOptions)\n/* harmony export */ });\nfunction locationConstraintMiddleware(options) {\n    return (next) => async (args) => {\n        const { CreateBucketConfiguration } = args.input;\n        const region = await options.region();\n        if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n            args = {\n                ...args,\n                input: {\n                    ...args.input,\n                    CreateBucketConfiguration: region === \"us-east-1\" ? undefined : { LocationConstraint: region },\n                },\n            };\n        }\n        return next(args);\n    };\n}\nconst locationConstraintMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n    name: \"locationConstraintMiddleware\",\n    override: true,\n};\nconst getLocationConstraintPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-location-constraint/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-logger/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-logger/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getLoggerPlugin\": () => (/* reexport safe */ _loggerMiddleware__WEBPACK_IMPORTED_MODULE_0__.getLoggerPlugin),\n/* harmony export */   \"loggerMiddleware\": () => (/* reexport safe */ _loggerMiddleware__WEBPACK_IMPORTED_MODULE_0__.loggerMiddleware),\n/* harmony export */   \"loggerMiddlewareOptions\": () => (/* reexport safe */ _loggerMiddleware__WEBPACK_IMPORTED_MODULE_0__.loggerMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _loggerMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loggerMiddleware */ \"./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-logger/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getLoggerPlugin\": () => (/* binding */ getLoggerPlugin),\n/* harmony export */   \"loggerMiddleware\": () => (/* binding */ loggerMiddleware),\n/* harmony export */   \"loggerMiddlewareOptions\": () => (/* binding */ loggerMiddlewareOptions)\n/* harmony export */ });\nconst loggerMiddleware = () => (next, context) => async (args) => {\n    const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;\n    const response = await next(args);\n    if (!logger) {\n        return response;\n    }\n    if (typeof logger.info === \"function\") {\n        const { $metadata, ...outputWithoutMetadata } = response.output;\n        logger.info({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            output: outputFilterSensitiveLog(outputWithoutMetadata),\n            metadata: $metadata,\n        });\n    }\n    return response;\n};\nconst loggerMiddlewareOptions = {\n    name: \"loggerMiddleware\",\n    tags: [\"LOGGER\"],\n    step: \"initialize\",\n    override: true,\n};\nconst getLoggerPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addRecursionDetectionMiddlewareOptions\": () => (/* binding */ addRecursionDetectionMiddlewareOptions),\n/* harmony export */   \"getRecursionDetectionPlugin\": () => (/* binding */ getRecursionDetectionPlugin),\n/* harmony export */   \"recursionDetectionMiddleware\": () => (/* binding */ recursionDetectionMiddleware)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n\nconst TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nconst ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nconst ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nconst recursionDetectionMiddleware = (options) => (next) => async (args) => {\n    const { request } = args;\n    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request) ||\n        options.runtime !== \"node\" ||\n        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\n        return next(args);\n    }\n    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n    const traceId = process.env[ENV_TRACE_ID];\n    const nonEmptyString = (str) => typeof str === \"string\" && str.length > 0;\n    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n        request.headers[TRACE_ID_HEADER_NAME] = traceId;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nconst addRecursionDetectionMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"RECURSION_DETECTION\"],\n    name: \"recursionDetectionMiddleware\",\n    override: true,\n    priority: \"low\",\n};\nconst getRecursionDetectionPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AdaptiveRetryStrategy\": () => (/* binding */ AdaptiveRetryStrategy)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/config.js\");\n/* harmony import */ var _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DefaultRateLimiter */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js\");\n/* harmony import */ var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StandardRetryStrategy */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js\");\n\n\n\nclass AdaptiveRetryStrategy extends _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_2__.StandardRetryStrategy {\n    constructor(maxAttemptsProvider, options) {\n        const { rateLimiter, ...superOptions } = options ?? {};\n        super(maxAttemptsProvider, superOptions);\n        this.rateLimiter = rateLimiter ?? new _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_1__.DefaultRateLimiter();\n        this.mode = _config__WEBPACK_IMPORTED_MODULE_0__.RETRY_MODES.ADAPTIVE;\n    }\n    async retry(next, args) {\n        return super.retry(next, args, {\n            beforeRequest: async () => {\n                return this.rateLimiter.getSendToken();\n            },\n            afterRequest: (response) => {\n                this.rateLimiter.updateClientSendingRate(response);\n            },\n        });\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DefaultRateLimiter\": () => (/* binding */ DefaultRateLimiter)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/service-error-classification */ \"./node_modules/@aws-sdk/service-error-classification/dist-es/index.js\");\n\nclass DefaultRateLimiter {\n    constructor(options) {\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = options?.beta ?? 0.7;\n        this.minCapacity = options?.minCapacity ?? 1;\n        this.minFillRate = options?.minFillRate ?? 0.5;\n        this.scaleConstant = options?.scaleConstant ?? 0.4;\n        this.smooth = options?.smooth ?? 0.8;\n        const currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n    }\n    getCurrentTimeInSeconds() {\n        return Date.now() / 1000;\n    }\n    async getSendToken() {\n        return this.acquireTokenBucket(1);\n    }\n    async acquireTokenBucket(amount) {\n        if (!this.enabled) {\n            return;\n        }\n        this.refillTokenBucket();\n        if (amount > this.currentCapacity) {\n            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1000;\n            await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n        this.currentCapacity = this.currentCapacity - amount;\n    }\n    refillTokenBucket() {\n        const timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp;\n            return;\n        }\n        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n    }\n    updateClientSendingRate(response) {\n        let calculatedRate;\n        this.updateMeasuredRate();\n        if ((0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isThrottlingError)(response)) {\n            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n            this.lastMaxRate = rateToUse;\n            this.calculateTimeWindow();\n            this.lastThrottleTime = this.getCurrentTimeInSeconds();\n            calculatedRate = this.cubicThrottle(rateToUse);\n            this.enableTokenBucket();\n        }\n        else {\n            this.calculateTimeWindow();\n            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n    }\n    calculateTimeWindow() {\n        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));\n    }\n    cubicThrottle(rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n    }\n    cubicSuccess(timestamp) {\n        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n    }\n    enableTokenBucket() {\n        this.enabled = true;\n    }\n    updateTokenBucketRate(newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n    }\n    updateMeasuredRate() {\n        const t = this.getCurrentTimeInSeconds();\n        const timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n            this.requestCount = 0;\n            this.lastTxRateBucket = timeBucket;\n        }\n    }\n    getPrecise(num) {\n        return parseFloat(num.toFixed(8));\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StandardRetryStrategy\": () => (/* binding */ StandardRetryStrategy)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/service-error-classification */ \"./node_modules/@aws-sdk/service-error-classification/dist-es/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ \"./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/config.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js\");\n/* harmony import */ var _defaultRetryQuota__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaultRetryQuota */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js\");\n/* harmony import */ var _delayDecider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./delayDecider */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js\");\n/* harmony import */ var _retryDecider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./retryDecider */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js\");\n\n\n\n\n\n\n\n\nclass StandardRetryStrategy {\n    constructor(maxAttemptsProvider, options) {\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = _config__WEBPACK_IMPORTED_MODULE_2__.RETRY_MODES.STANDARD;\n        this.retryDecider = options?.retryDecider ?? _retryDecider__WEBPACK_IMPORTED_MODULE_6__.defaultRetryDecider;\n        this.delayDecider = options?.delayDecider ?? _delayDecider__WEBPACK_IMPORTED_MODULE_5__.defaultDelayDecider;\n        this.retryQuota = options?.retryQuota ?? (0,_defaultRetryQuota__WEBPACK_IMPORTED_MODULE_4__.getDefaultRetryQuota)(_constants__WEBPACK_IMPORTED_MODULE_3__.INITIAL_RETRY_TOKENS);\n    }\n    shouldRetry(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    }\n    async getMaxAttempts() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    }\n    async retry(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {\n            request.headers[_constants__WEBPACK_IMPORTED_MODULE_3__.INVOCATION_ID_HEADER] = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n        }\n        while (true) {\n            try {\n                if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {\n                    request.headers[_constants__WEBPACK_IMPORTED_MODULE_3__.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options?.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options?.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = asSdkError(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider((0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_1__.isThrottlingError)(err) ? _constants__WEBPACK_IMPORTED_MODULE_3__.THROTTLING_RETRY_DELAY_BASE : _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    }\n}\nconst getDelayFromRetryAfterHeader = (response) => {\n    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\nconst asSdkError = (error) => {\n    if (error instanceof Error)\n        return error;\n    if (error instanceof Object)\n        return Object.assign(new Error(), error);\n    if (typeof error === \"string\")\n        return new Error(error);\n    return new Error(`AWS SDK error wrapper for ${error}`);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/config.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/config.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_MAX_ATTEMPTS\": () => (/* binding */ DEFAULT_MAX_ATTEMPTS),\n/* harmony export */   \"DEFAULT_RETRY_MODE\": () => (/* binding */ DEFAULT_RETRY_MODE),\n/* harmony export */   \"RETRY_MODES\": () => (/* binding */ RETRY_MODES)\n/* harmony export */ });\nvar RETRY_MODES;\n(function (RETRY_MODES) {\n    RETRY_MODES[\"STANDARD\"] = \"standard\";\n    RETRY_MODES[\"ADAPTIVE\"] = \"adaptive\";\n})(RETRY_MODES || (RETRY_MODES = {}));\nconst DEFAULT_MAX_ATTEMPTS = 3;\nconst DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/config.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONFIG_MAX_ATTEMPTS\": () => (/* binding */ CONFIG_MAX_ATTEMPTS),\n/* harmony export */   \"CONFIG_RETRY_MODE\": () => (/* binding */ CONFIG_RETRY_MODE),\n/* harmony export */   \"ENV_MAX_ATTEMPTS\": () => (/* binding */ ENV_MAX_ATTEMPTS),\n/* harmony export */   \"ENV_RETRY_MODE\": () => (/* binding */ ENV_RETRY_MODE),\n/* harmony export */   \"NODE_MAX_ATTEMPT_CONFIG_OPTIONS\": () => (/* binding */ NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_RETRY_MODE_CONFIG_OPTIONS\": () => (/* binding */ NODE_RETRY_MODE_CONFIG_OPTIONS),\n/* harmony export */   \"resolveRetryConfig\": () => (/* binding */ resolveRetryConfig)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-middleware */ \"./node_modules/@aws-sdk/util-middleware/dist-es/index.js\");\n/* harmony import */ var _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AdaptiveRetryStrategy */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/config.js\");\n/* harmony import */ var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StandardRetryStrategy */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js\");\n\n\n\n\nconst ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nconst CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nconst NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile) => {\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_MAX_ATTEMPTS,\n};\nconst resolveRetryConfig = (input) => {\n    const maxAttempts = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.maxAttempts ?? _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_MAX_ATTEMPTS);\n    return {\n        ...input,\n        maxAttempts,\n        retryStrategy: async () => {\n            if (input.retryStrategy) {\n                return input.retryStrategy;\n            }\n            const retryMode = await (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)(input.retryMode)();\n            if (retryMode === _config__WEBPACK_IMPORTED_MODULE_2__.RETRY_MODES.ADAPTIVE) {\n                return new _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_1__.AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_3__.StandardRetryStrategy(maxAttempts);\n        },\n    };\n};\nconst ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nconst CONFIG_RETRY_MODE = \"retry_mode\";\nconst NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n    default: _config__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_MODE,\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_RETRY_DELAY_BASE\": () => (/* binding */ DEFAULT_RETRY_DELAY_BASE),\n/* harmony export */   \"INITIAL_RETRY_TOKENS\": () => (/* binding */ INITIAL_RETRY_TOKENS),\n/* harmony export */   \"INVOCATION_ID_HEADER\": () => (/* binding */ INVOCATION_ID_HEADER),\n/* harmony export */   \"MAXIMUM_RETRY_DELAY\": () => (/* binding */ MAXIMUM_RETRY_DELAY),\n/* harmony export */   \"NO_RETRY_INCREMENT\": () => (/* binding */ NO_RETRY_INCREMENT),\n/* harmony export */   \"REQUEST_HEADER\": () => (/* binding */ REQUEST_HEADER),\n/* harmony export */   \"RETRY_COST\": () => (/* binding */ RETRY_COST),\n/* harmony export */   \"THROTTLING_RETRY_DELAY_BASE\": () => (/* binding */ THROTTLING_RETRY_DELAY_BASE),\n/* harmony export */   \"TIMEOUT_RETRY_COST\": () => (/* binding */ TIMEOUT_RETRY_COST)\n/* harmony export */ });\nconst DEFAULT_RETRY_DELAY_BASE = 100;\nconst MAXIMUM_RETRY_DELAY = 20 * 1000;\nconst THROTTLING_RETRY_DELAY_BASE = 500;\nconst INITIAL_RETRY_TOKENS = 500;\nconst RETRY_COST = 5;\nconst TIMEOUT_RETRY_COST = 10;\nconst NO_RETRY_INCREMENT = 1;\nconst INVOCATION_ID_HEADER = \"amz-sdk-invocation-id\";\nconst REQUEST_HEADER = \"amz-sdk-request\";\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getDefaultRetryQuota\": () => (/* binding */ getDefaultRetryQuota)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js\");\n\nconst getDefaultRetryQuota = (initialRetryTokens, options) => {\n    const MAX_CAPACITY = initialRetryTokens;\n    const noRetryIncrement = options?.noRetryIncrement ?? _constants__WEBPACK_IMPORTED_MODULE_0__.NO_RETRY_INCREMENT;\n    const retryCost = options?.retryCost ?? _constants__WEBPACK_IMPORTED_MODULE_0__.RETRY_COST;\n    const timeoutRetryCost = options?.timeoutRetryCost ?? _constants__WEBPACK_IMPORTED_MODULE_0__.TIMEOUT_RETRY_COST;\n    let availableCapacity = initialRetryTokens;\n    const getCapacityAmount = (error) => (error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost);\n    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;\n    const retrieveRetryTokens = (error) => {\n        if (!hasRetryTokens(error)) {\n            throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(error);\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n    };\n    const releaseRetryTokens = (capacityReleaseAmount) => {\n        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n    };\n    return Object.freeze({\n        hasRetryTokens,\n        retrieveRetryTokens,\n        releaseRetryTokens,\n    });\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultDelayDecider\": () => (/* binding */ defaultDelayDecider)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js\");\n\nconst defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(_constants__WEBPACK_IMPORTED_MODULE_0__.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AdaptiveRetryStrategy\": () => (/* reexport safe */ _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_0__.AdaptiveRetryStrategy),\n/* harmony export */   \"CONFIG_MAX_ATTEMPTS\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.CONFIG_MAX_ATTEMPTS),\n/* harmony export */   \"CONFIG_RETRY_MODE\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.CONFIG_RETRY_MODE),\n/* harmony export */   \"DEFAULT_MAX_ATTEMPTS\": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_MAX_ATTEMPTS),\n/* harmony export */   \"DEFAULT_RETRY_MODE\": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_MODE),\n/* harmony export */   \"DefaultRateLimiter\": () => (/* reexport safe */ _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_1__.DefaultRateLimiter),\n/* harmony export */   \"ENV_MAX_ATTEMPTS\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.ENV_MAX_ATTEMPTS),\n/* harmony export */   \"ENV_RETRY_MODE\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.ENV_RETRY_MODE),\n/* harmony export */   \"NODE_MAX_ATTEMPT_CONFIG_OPTIONS\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n/* harmony export */   \"NODE_RETRY_MODE_CONFIG_OPTIONS\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.NODE_RETRY_MODE_CONFIG_OPTIONS),\n/* harmony export */   \"RETRY_MODES\": () => (/* reexport safe */ _config__WEBPACK_IMPORTED_MODULE_3__.RETRY_MODES),\n/* harmony export */   \"StandardRetryStrategy\": () => (/* reexport safe */ _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_2__.StandardRetryStrategy),\n/* harmony export */   \"defaultDelayDecider\": () => (/* reexport safe */ _delayDecider__WEBPACK_IMPORTED_MODULE_5__.defaultDelayDecider),\n/* harmony export */   \"defaultRetryDecider\": () => (/* reexport safe */ _retryDecider__WEBPACK_IMPORTED_MODULE_7__.defaultRetryDecider),\n/* harmony export */   \"getOmitRetryHeadersPlugin\": () => (/* reexport safe */ _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_6__.getOmitRetryHeadersPlugin),\n/* harmony export */   \"getRetryPlugin\": () => (/* reexport safe */ _retryMiddleware__WEBPACK_IMPORTED_MODULE_8__.getRetryPlugin),\n/* harmony export */   \"omitRetryHeadersMiddleware\": () => (/* reexport safe */ _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_6__.omitRetryHeadersMiddleware),\n/* harmony export */   \"omitRetryHeadersMiddlewareOptions\": () => (/* reexport safe */ _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_6__.omitRetryHeadersMiddlewareOptions),\n/* harmony export */   \"resolveRetryConfig\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_4__.resolveRetryConfig),\n/* harmony export */   \"retryMiddleware\": () => (/* reexport safe */ _retryMiddleware__WEBPACK_IMPORTED_MODULE_8__.retryMiddleware),\n/* harmony export */   \"retryMiddlewareOptions\": () => (/* reexport safe */ _retryMiddleware__WEBPACK_IMPORTED_MODULE_8__.retryMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _AdaptiveRetryStrategy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AdaptiveRetryStrategy */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/AdaptiveRetryStrategy.js\");\n/* harmony import */ var _DefaultRateLimiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DefaultRateLimiter */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js\");\n/* harmony import */ var _StandardRetryStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StandardRetryStrategy */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/config.js\");\n/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./configurations */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js\");\n/* harmony import */ var _delayDecider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./delayDecider */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/delayDecider.js\");\n/* harmony import */ var _omitRetryHeadersMiddleware__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./omitRetryHeadersMiddleware */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/omitRetryHeadersMiddleware.js\");\n/* harmony import */ var _retryDecider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./retryDecider */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js\");\n/* harmony import */ var _retryMiddleware__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./retryMiddleware */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./types */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/types.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/omitRetryHeadersMiddleware.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/omitRetryHeadersMiddleware.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getOmitRetryHeadersPlugin\": () => (/* binding */ getOmitRetryHeadersPlugin),\n/* harmony export */   \"omitRetryHeadersMiddleware\": () => (/* binding */ omitRetryHeadersMiddleware),\n/* harmony export */   \"omitRetryHeadersMiddlewareOptions\": () => (/* binding */ omitRetryHeadersMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-retry/dist-es/constants.js\");\n\n\nconst omitRetryHeadersMiddleware = () => (next) => async (args) => {\n    const { request } = args;\n    if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {\n        delete request.headers[_constants__WEBPACK_IMPORTED_MODULE_1__.INVOCATION_ID_HEADER];\n        delete request.headers[_constants__WEBPACK_IMPORTED_MODULE_1__.REQUEST_HEADER];\n    }\n    return next(args);\n};\nconst omitRetryHeadersMiddlewareOptions = {\n    name: \"omitRetryHeadersMiddleware\",\n    tags: [\"RETRY\", \"HEADERS\", \"OMIT_RETRY_HEADERS\"],\n    relation: \"before\",\n    toMiddleware: \"awsAuthMiddleware\",\n    override: true,\n};\nconst getOmitRetryHeadersPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/omitRetryHeadersMiddleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultRetryDecider\": () => (/* binding */ defaultRetryDecider)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/service-error-classification */ \"./node_modules/@aws-sdk/service-error-classification/dist-es/index.js\");\n\nconst defaultRetryDecider = (error) => {\n    if (!error) {\n        return false;\n    }\n    return (0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isRetryableByTrait)(error) || (0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isClockSkewError)(error) || (0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isThrottlingError)(error) || (0,_aws_sdk_service_error_classification__WEBPACK_IMPORTED_MODULE_0__.isTransientError)(error);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/retryDecider.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getRetryPlugin\": () => (/* binding */ getRetryPlugin),\n/* harmony export */   \"retryMiddleware\": () => (/* binding */ retryMiddleware),\n/* harmony export */   \"retryMiddlewareOptions\": () => (/* binding */ retryMiddlewareOptions)\n/* harmony export */ });\nconst retryMiddleware = (options) => (next, context) => async (args) => {\n    const retryStrategy = await options.retryStrategy();\n    if (retryStrategy?.mode)\n        context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", retryStrategy.mode]];\n    return retryStrategy.retry(next, args);\n};\nconst retryMiddlewareOptions = {\n    name: \"retryMiddleware\",\n    tags: [\"RETRY\"],\n    step: \"finalizeRequest\",\n    priority: \"high\",\n    override: true,\n};\nconst getRetryPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/dist-es/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/dist-es/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/dist-es/types.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/regex.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/regex.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/regex.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/rng.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/rng.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/rng.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/stringify.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/stringify.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/stringify.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/v4.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/v4.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rnds);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/v4.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/validate.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/validate.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/regex.js\");\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-retry/node_modules/uuid/dist/esm-browser/validate.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"checkContentLengthHeader\": () => (/* binding */ checkContentLengthHeader),\n/* harmony export */   \"checkContentLengthHeaderMiddlewareOptions\": () => (/* binding */ checkContentLengthHeaderMiddlewareOptions),\n/* harmony export */   \"getCheckContentLengthHeaderPlugin\": () => (/* binding */ getCheckContentLengthHeaderPlugin)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n\nconst CONTENT_LENGTH_HEADER = \"content-length\";\nfunction checkContentLengthHeader() {\n    return (next, context) => async (args) => {\n        const { request } = args;\n        if (_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request)) {\n            if (!request.headers[CONTENT_LENGTH_HEADER]) {\n                const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;\n                if (typeof context?.logger?.warn === \"function\") {\n                    context.logger.warn(message);\n                }\n                else {\n                    console.warn(message);\n                }\n            }\n        }\n        return next({ ...args });\n    };\n}\nconst checkContentLengthHeaderMiddlewareOptions = {\n    step: \"finalizeRequest\",\n    tags: [\"CHECK_CONTENT_LENGTH_HEADER\"],\n    name: \"getCheckContentLengthHeaderPlugin\",\n    override: true,\n};\nconst getCheckContentLengthHeaderPlugin = (unused) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/configuration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/configuration.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveS3Config\": () => (/* binding */ resolveS3Config)\n/* harmony export */ });\nconst resolveS3Config = (input) => ({\n    ...input,\n    forcePathStyle: input.forcePathStyle ?? false,\n    useAccelerateEndpoint: input.useAccelerateEndpoint ?? false,\n    disableMultiregionAccessPoints: input.disableMultiregionAccessPoints ?? false,\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/configuration.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"checkContentLengthHeader\": () => (/* reexport safe */ _check_content_length_header__WEBPACK_IMPORTED_MODULE_0__.checkContentLengthHeader),\n/* harmony export */   \"checkContentLengthHeaderMiddlewareOptions\": () => (/* reexport safe */ _check_content_length_header__WEBPACK_IMPORTED_MODULE_0__.checkContentLengthHeaderMiddlewareOptions),\n/* harmony export */   \"getCheckContentLengthHeaderPlugin\": () => (/* reexport safe */ _check_content_length_header__WEBPACK_IMPORTED_MODULE_0__.getCheckContentLengthHeaderPlugin),\n/* harmony export */   \"getThrow200ExceptionsPlugin\": () => (/* reexport safe */ _throw_200_exceptions__WEBPACK_IMPORTED_MODULE_2__.getThrow200ExceptionsPlugin),\n/* harmony export */   \"getValidateBucketNamePlugin\": () => (/* reexport safe */ _validate_bucket_name__WEBPACK_IMPORTED_MODULE_3__.getValidateBucketNamePlugin),\n/* harmony export */   \"getWriteGetObjectResponseEndpointPlugin\": () => (/* reexport safe */ _write_get_object_response_endpoint__WEBPACK_IMPORTED_MODULE_4__.getWriteGetObjectResponseEndpointPlugin),\n/* harmony export */   \"resolveS3Config\": () => (/* reexport safe */ _configuration__WEBPACK_IMPORTED_MODULE_1__.resolveS3Config),\n/* harmony export */   \"throw200ExceptionsMiddleware\": () => (/* reexport safe */ _throw_200_exceptions__WEBPACK_IMPORTED_MODULE_2__.throw200ExceptionsMiddleware),\n/* harmony export */   \"throw200ExceptionsMiddlewareOptions\": () => (/* reexport safe */ _throw_200_exceptions__WEBPACK_IMPORTED_MODULE_2__.throw200ExceptionsMiddlewareOptions),\n/* harmony export */   \"validateBucketNameMiddleware\": () => (/* reexport safe */ _validate_bucket_name__WEBPACK_IMPORTED_MODULE_3__.validateBucketNameMiddleware),\n/* harmony export */   \"validateBucketNameMiddlewareOptions\": () => (/* reexport safe */ _validate_bucket_name__WEBPACK_IMPORTED_MODULE_3__.validateBucketNameMiddlewareOptions),\n/* harmony export */   \"writeGetObjectResponseEndpointMiddleware\": () => (/* reexport safe */ _write_get_object_response_endpoint__WEBPACK_IMPORTED_MODULE_4__.writeGetObjectResponseEndpointMiddleware),\n/* harmony export */   \"writeGetObjectResponseEndpointMiddlewareOptions\": () => (/* reexport safe */ _write_get_object_response_endpoint__WEBPACK_IMPORTED_MODULE_4__.writeGetObjectResponseEndpointMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _check_content_length_header__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./check-content-length-header */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/check-content-length-header.js\");\n/* harmony import */ var _configuration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./configuration */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/configuration.js\");\n/* harmony import */ var _throw_200_exceptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./throw-200-exceptions */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js\");\n/* harmony import */ var _validate_bucket_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validate-bucket-name */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js\");\n/* harmony import */ var _write_get_object_response_endpoint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./write-get-object-response-endpoint */ \"./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/write-get-object-response-endpoint.js\");\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getThrow200ExceptionsPlugin\": () => (/* binding */ getThrow200ExceptionsPlugin),\n/* harmony export */   \"throw200ExceptionsMiddleware\": () => (/* binding */ throw200ExceptionsMiddleware),\n/* harmony export */   \"throw200ExceptionsMiddlewareOptions\": () => (/* binding */ throw200ExceptionsMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n\nconst throw200ExceptionsMiddleware = (config) => (next) => async (args) => {\n    const result = await next(args);\n    const { response } = result;\n    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response))\n        return result;\n    const { statusCode, body } = response;\n    if (statusCode < 200 || statusCode >= 300)\n        return result;\n    const bodyBytes = await collectBody(body, config);\n    const bodyString = await collectBodyString(bodyBytes, config);\n    if (bodyBytes.length === 0) {\n        const err = new Error(\"S3 aborted request\");\n        err.name = \"InternalError\";\n        throw err;\n    }\n    if (bodyString && bodyString.match(\"<Error>\")) {\n        response.statusCode = 400;\n    }\n    response.body = bodyBytes;\n    return result;\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst throw200ExceptionsMiddlewareOptions = {\n    relation: \"after\",\n    toMiddleware: \"deserializerMiddleware\",\n    tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n    name: \"throw200ExceptionsMiddleware\",\n    override: true,\n};\nconst getThrow200ExceptionsPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getValidateBucketNamePlugin\": () => (/* binding */ getValidateBucketNamePlugin),\n/* harmony export */   \"validateBucketNameMiddleware\": () => (/* binding */ validateBucketNameMiddleware),\n/* harmony export */   \"validateBucketNameMiddlewareOptions\": () => (/* binding */ validateBucketNameMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-arn-parser */ \"./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js\");\n\nfunction validateBucketNameMiddleware() {\n    return (next) => async (args) => {\n        const { input: { Bucket }, } = args;\n        if (typeof Bucket === \"string\" && !(0,_aws_sdk_util_arn_parser__WEBPACK_IMPORTED_MODULE_0__.validate)(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n            const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);\n            err.name = \"InvalidBucketName\";\n            throw err;\n        }\n        return next({ ...args });\n    };\n}\nconst validateBucketNameMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\"VALIDATE_BUCKET_NAME\"],\n    name: \"validateBucketNameMiddleware\",\n    override: true,\n};\nconst getValidateBucketNamePlugin = (unused) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/validate-bucket-name.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/write-get-object-response-endpoint.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/write-get-object-response-endpoint.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getWriteGetObjectResponseEndpointPlugin\": () => (/* binding */ getWriteGetObjectResponseEndpointPlugin),\n/* harmony export */   \"writeGetObjectResponseEndpointMiddleware\": () => (/* binding */ writeGetObjectResponseEndpointMiddleware),\n/* harmony export */   \"writeGetObjectResponseEndpointMiddlewareOptions\": () => (/* binding */ writeGetObjectResponseEndpointMiddlewareOptions)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_bucket_endpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-bucket-endpoint */ \"./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n\n\nconst writeGetObjectResponseEndpointMiddleware = (config) => (next, context) => async (args) => {\n    const { region: regionProvider, isCustomEndpoint, disableHostPrefix } = config;\n    const region = await regionProvider();\n    const { request, input } = args;\n    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_1__.HttpRequest.isInstance(request))\n        return next({ ...args });\n    let hostname = request.hostname;\n    if (hostname.endsWith(\"s3.amazonaws.com\") || hostname.endsWith(\"s3-external-1.amazonaws.com\")) {\n        return next({ ...args });\n    }\n    if (!isCustomEndpoint) {\n        const [, suffix] = (0,_aws_sdk_middleware_bucket_endpoint__WEBPACK_IMPORTED_MODULE_0__.getSuffixForArnEndpoint)(request.hostname);\n        hostname = `s3-object-lambda.${region}.${suffix}`;\n    }\n    if (!disableHostPrefix && input.RequestRoute) {\n        hostname = `${input.RequestRoute}.${hostname}`;\n    }\n    request.hostname = hostname;\n    context[\"signing_service\"] = \"s3-object-lambda\";\n    if (config.runtime === \"node\" && !request.headers[\"content-length\"]) {\n        request.headers[\"transfer-encoding\"] = \"chunked\";\n    }\n    return next({ ...args });\n};\nconst writeGetObjectResponseEndpointMiddlewareOptions = {\n    relation: \"after\",\n    toMiddleware: \"contentLengthMiddleware\",\n    tags: [\"WRITE_GET_OBJECT_RESPONSE\", \"S3\", \"ENDPOINT\"],\n    name: \"writeGetObjectResponseEndpointMiddleware\",\n    override: true,\n};\nconst getWriteGetObjectResponseEndpointPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(writeGetObjectResponseEndpointMiddleware(config), writeGetObjectResponseEndpointMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-sdk-s3/dist-es/write-get-object-response-endpoint.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deserializerMiddleware\": () => (/* binding */ deserializerMiddleware)\n/* harmony export */ });\nconst deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {\n    const { response } = await next(args);\n    try {\n        const parsed = await deserializer(response, options);\n        return {\n            response,\n            output: parsed,\n        };\n    }\n    catch (error) {\n        Object.defineProperty(error, \"$response\", {\n            value: response,\n        });\n        throw error;\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-serde/dist-es/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-serde/dist-es/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deserializerMiddleware\": () => (/* reexport safe */ _deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__.deserializerMiddleware),\n/* harmony export */   \"deserializerMiddlewareOption\": () => (/* reexport safe */ _serdePlugin__WEBPACK_IMPORTED_MODULE_1__.deserializerMiddlewareOption),\n/* harmony export */   \"getSerdePlugin\": () => (/* reexport safe */ _serdePlugin__WEBPACK_IMPORTED_MODULE_1__.getSerdePlugin),\n/* harmony export */   \"serializerMiddleware\": () => (/* reexport safe */ _serializerMiddleware__WEBPACK_IMPORTED_MODULE_2__.serializerMiddleware),\n/* harmony export */   \"serializerMiddlewareOption\": () => (/* reexport safe */ _serdePlugin__WEBPACK_IMPORTED_MODULE_1__.serializerMiddlewareOption)\n/* harmony export */ });\n/* harmony import */ var _deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializerMiddleware */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js\");\n/* harmony import */ var _serdePlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serdePlugin */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js\");\n/* harmony import */ var _serializerMiddleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializerMiddleware */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-serde/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deserializerMiddlewareOption\": () => (/* binding */ deserializerMiddlewareOption),\n/* harmony export */   \"getSerdePlugin\": () => (/* binding */ getSerdePlugin),\n/* harmony export */   \"serializerMiddlewareOption\": () => (/* binding */ serializerMiddlewareOption)\n/* harmony export */ });\n/* harmony import */ var _deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializerMiddleware */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js\");\n/* harmony import */ var _serializerMiddleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serializerMiddleware */ \"./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js\");\n\n\nconst deserializerMiddlewareOption = {\n    name: \"deserializerMiddleware\",\n    step: \"deserialize\",\n    tags: [\"DESERIALIZER\"],\n    override: true,\n};\nconst serializerMiddlewareOption = {\n    name: \"serializerMiddleware\",\n    step: \"serialize\",\n    tags: [\"SERIALIZER\"],\n    override: true,\n};\nfunction getSerdePlugin(config, serializer, deserializer) {\n    return {\n        applyToStack: (commandStack) => {\n            commandStack.add((0,_deserializerMiddleware__WEBPACK_IMPORTED_MODULE_0__.deserializerMiddleware)(config, deserializer), deserializerMiddlewareOption);\n            commandStack.add((0,_serializerMiddleware__WEBPACK_IMPORTED_MODULE_1__.serializerMiddleware)(config, serializer), serializerMiddlewareOption);\n        },\n    };\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"serializerMiddleware\": () => (/* binding */ serializerMiddleware)\n/* harmony export */ });\nconst serializerMiddleware = (options, serializer) => (next, context) => async (args) => {\n    const endpoint = context.endpointV2?.url && options.urlParser\n        ? async () => options.urlParser(context.endpointV2.url)\n        : options.endpoint;\n    if (!endpoint) {\n        throw new Error(\"No valid endpoint provider available.\");\n    }\n    const request = await serializer(args.input, { ...options, endpoint });\n    return next({\n        ...args,\n        request,\n    });\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveAwsAuthConfig\": () => (/* binding */ resolveAwsAuthConfig),\n/* harmony export */   \"resolveSigV4AuthConfig\": () => (/* binding */ resolveSigV4AuthConfig)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/property-provider */ \"./node_modules/@aws-sdk/property-provider/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/signature-v4 */ \"./node_modules/@aws-sdk/signature-v4/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/util-middleware */ \"./node_modules/@aws-sdk/util-middleware/dist-es/index.js\");\n\n\n\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nconst resolveAwsAuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(input.signer);\n    }\n    else if (input.regionInfoProvider) {\n        signer = () => (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(input.region)()\n            .then(async (region) => [\n            (await input.regionInfoProvider(region, {\n                useFipsEndpoint: await input.useFipsEndpoint(),\n                useDualstackEndpoint: await input.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            input.signingRegion = input.signingRegion || signingRegion || region;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_1__.SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: input.signingName || input.defaultSigningName,\n                signingRegion: await (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(input.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            input.signingRegion = input.signingRegion || signingRegion;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_1__.SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nconst resolveSigV4AuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(input.signer);\n    }\n    else {\n        signer = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(new _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_1__.SignatureV4({\n            credentials: normalizedCreds,\n            region: input.region,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n        }));\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nconst normalizeCredentialProvider = (credentials) => {\n    if (typeof credentials === \"function\") {\n        return (0,_aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__.memoize)(credentials, (credentials) => credentials.expiration !== undefined &&\n            credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials) => credentials.expiration !== undefined);\n    }\n    return (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_2__.normalizeProvider)(credentials);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"awsAuthMiddleware\": () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_1__.awsAuthMiddleware),\n/* harmony export */   \"awsAuthMiddlewareOptions\": () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_1__.awsAuthMiddlewareOptions),\n/* harmony export */   \"getAwsAuthPlugin\": () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_1__.getAwsAuthPlugin),\n/* harmony export */   \"getSigV4AuthPlugin\": () => (/* reexport safe */ _middleware__WEBPACK_IMPORTED_MODULE_1__.getSigV4AuthPlugin),\n/* harmony export */   \"resolveAwsAuthConfig\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_0__.resolveAwsAuthConfig),\n/* harmony export */   \"resolveSigV4AuthConfig\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_0__.resolveSigV4AuthConfig)\n/* harmony export */ });\n/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configurations */ \"./node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js\");\n/* harmony import */ var _middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./middleware */ \"./node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-signing/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"awsAuthMiddleware\": () => (/* binding */ awsAuthMiddleware),\n/* harmony export */   \"awsAuthMiddlewareOptions\": () => (/* binding */ awsAuthMiddlewareOptions),\n/* harmony export */   \"getAwsAuthPlugin\": () => (/* binding */ getAwsAuthPlugin),\n/* harmony export */   \"getSigV4AuthPlugin\": () => (/* binding */ getSigV4AuthPlugin)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n/* harmony import */ var _utils_getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/getSkewCorrectedDate */ \"./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js\");\n/* harmony import */ var _utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/getUpdatedSystemClockOffset */ \"./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js\");\n\n\n\nconst awsAuthMiddleware = (options) => (next, context) => async function (args) {\n    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(args.request))\n        return next(args);\n    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const multiRegionOverride = authScheme?.name === \"sigv4a\" ? authScheme?.signingRegionSet?.join(\",\") : undefined;\n    const signer = await options.signer(authScheme);\n    const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n            signingDate: (0,_utils_getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_1__.getSkewCorrectedDate)(options.systemClockOffset),\n            signingRegion: multiRegionOverride || context[\"signing_region\"],\n            signingService: context[\"signing_service\"],\n        }),\n    }).catch((error) => {\n        const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n        if (serverTime) {\n            options.systemClockOffset = (0,_utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);\n        }\n        throw error;\n    });\n    const dateHeader = getDateHeader(output.response);\n    if (dateHeader) {\n        options.systemClockOffset = (0,_utils_getUpdatedSystemClockOffset__WEBPACK_IMPORTED_MODULE_2__.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);\n    }\n    return output;\n};\nconst getDateHeader = (response) => _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;\nconst awsAuthMiddlewareOptions = {\n    name: \"awsAuthMiddleware\",\n    tags: [\"SIGNATURE\", \"AWSAUTH\"],\n    relation: \"after\",\n    toMiddleware: \"retryMiddleware\",\n    override: true,\n};\nconst getAwsAuthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    },\n});\nconst getSigV4AuthPlugin = getAwsAuthPlugin;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSkewCorrectedDate\": () => (/* binding */ getSkewCorrectedDate)\n/* harmony export */ });\nconst getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getUpdatedSystemClockOffset\": () => (/* binding */ getUpdatedSystemClockOffset)\n/* harmony export */ });\n/* harmony import */ var _isClockSkewed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isClockSkewed */ \"./node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js\");\n\nconst getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {\n    const clockTimeInMs = Date.parse(clockTime);\n    if ((0,_isClockSkewed__WEBPACK_IMPORTED_MODULE_0__.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {\n        return clockTimeInMs - Date.now();\n    }\n    return currentSystemClockOffset;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isClockSkewed\": () => (/* binding */ isClockSkewed)\n/* harmony export */ });\n/* harmony import */ var _getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getSkewCorrectedDate */ \"./node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js\");\n\nconst isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0,_getSkewCorrectedDate__WEBPACK_IMPORTED_MODULE_0__.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 300000;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSsecPlugin\": () => (/* binding */ getSsecPlugin),\n/* harmony export */   \"ssecMiddleware\": () => (/* binding */ ssecMiddleware),\n/* harmony export */   \"ssecMiddlewareOptions\": () => (/* binding */ ssecMiddlewareOptions)\n/* harmony export */ });\nfunction ssecMiddleware(options) {\n    return (next) => async (args) => {\n        let input = { ...args.input };\n        const properties = [\n            {\n                target: \"SSECustomerKey\",\n                hash: \"SSECustomerKeyMD5\",\n            },\n            {\n                target: \"CopySourceSSECustomerKey\",\n                hash: \"CopySourceSSECustomerKeyMD5\",\n            },\n        ];\n        for (const prop of properties) {\n            const value = input[prop.target];\n            if (value) {\n                const valueView = ArrayBuffer.isView(value)\n                    ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)\n                    : typeof value === \"string\"\n                        ? options.utf8Decoder(value)\n                        : new Uint8Array(value);\n                const encoded = options.base64Encoder(valueView);\n                const hash = new options.md5();\n                hash.update(valueView);\n                input = {\n                    ...input,\n                    [prop.target]: encoded,\n                    [prop.hash]: options.base64Encoder(await hash.digest()),\n                };\n            }\n        }\n        return next({\n            ...args,\n            input,\n        });\n    };\n}\nconst ssecMiddlewareOptions = {\n    name: \"ssecMiddleware\",\n    step: \"initialize\",\n    tags: [\"SSE\"],\n    override: true,\n};\nconst getSsecPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-ssec/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"constructStack\": () => (/* binding */ constructStack)\n/* harmony export */ });\nconst constructStack = () => {\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    const entriesNameSet = new Set();\n    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n    const removeByName = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.name && entry.name === toRemove) {\n                isRemoved = true;\n                entriesNameSet.delete(toRemove);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const removeByReference = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                if (entry.name)\n                    entriesNameSet.delete(entry.name);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const cloneTo = (toStack) => {\n        absoluteEntries.forEach((entry) => {\n            toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n            toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        return toStack;\n    };\n    const expandRelativeMiddlewareList = (from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    };\n    const getMiddlewareList = (debug = false) => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === undefined) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n            .map(expandRelativeMiddlewareList)\n            .reduce((wholeList, expendedMiddlewareList) => {\n            wholeList.push(...expendedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    };\n    const stack = {\n        add: (middleware, options = {}) => {\n            const { name, override } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = absoluteEntries[toOverrideIndex];\n                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n                        throw new Error(`\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                            `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);\n                    }\n                    absoluteEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n            const { name, override } = options;\n            const entry = {\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = relativeEntries[toOverrideIndex];\n                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                        throw new Error(`\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                            `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n                    }\n                    relativeEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(constructStack()),\n        use: (plugin) => {\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n            if (typeof toRemove === \"string\")\n                return removeByName(toRemove);\n            else\n                return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n            let isRemoved = false;\n            const filterCb = (entry) => {\n                const { tags, name } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    if (name)\n                        entriesNameSet.delete(name);\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            };\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from) => {\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: () => {\n            return getMiddlewareList(true).map((mw) => {\n                return mw.name + \": \" + (mw.tags || []).join(\",\");\n            });\n        },\n        resolve: (handler, context) => {\n            for (const middleware of getMiddlewareList()\n                .map((entry) => entry.middleware)\n                .reverse()) {\n                handler = middleware(handler, context);\n            }\n            return handler;\n        },\n    };\n    return stack;\n};\nconst stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nconst priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-stack/dist-es/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-stack/dist-es/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"constructStack\": () => (/* reexport safe */ _MiddlewareStack__WEBPACK_IMPORTED_MODULE_0__.constructStack)\n/* harmony export */ });\n/* harmony import */ var _MiddlewareStack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MiddlewareStack */ \"./node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-stack/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveUserAgentConfig\": () => (/* binding */ resolveUserAgentConfig)\n/* harmony export */ });\nfunction resolveUserAgentConfig(input) {\n    return {\n        ...input,\n        customUserAgent: typeof input.customUserAgent === \"string\" ? [[input.customUserAgent]] : input.customUserAgent,\n    };\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SPACE\": () => (/* binding */ SPACE),\n/* harmony export */   \"UA_ESCAPE_REGEX\": () => (/* binding */ UA_ESCAPE_REGEX),\n/* harmony export */   \"USER_AGENT\": () => (/* binding */ USER_AGENT),\n/* harmony export */   \"X_AMZ_USER_AGENT\": () => (/* binding */ X_AMZ_USER_AGENT)\n/* harmony export */ });\nconst USER_AGENT = \"user-agent\";\nconst X_AMZ_USER_AGENT = \"x-amz-user-agent\";\nconst SPACE = \" \";\nconst UA_ESCAPE_REGEX = /[^\\!\\#\\$\\%\\&\\'\\*\\+\\-\\.\\^\\_\\`\\|\\~\\d\\w]/g;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getUserAgentMiddlewareOptions\": () => (/* reexport safe */ _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__.getUserAgentMiddlewareOptions),\n/* harmony export */   \"getUserAgentPlugin\": () => (/* reexport safe */ _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__.getUserAgentPlugin),\n/* harmony export */   \"resolveUserAgentConfig\": () => (/* reexport safe */ _configurations__WEBPACK_IMPORTED_MODULE_0__.resolveUserAgentConfig),\n/* harmony export */   \"userAgentMiddleware\": () => (/* reexport safe */ _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__.userAgentMiddleware)\n/* harmony export */ });\n/* harmony import */ var _configurations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./configurations */ \"./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js\");\n/* harmony import */ var _user_agent_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user-agent-middleware */ \"./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getUserAgentMiddlewareOptions\": () => (/* binding */ getUserAgentMiddlewareOptions),\n/* harmony export */   \"getUserAgentPlugin\": () => (/* binding */ getUserAgentPlugin),\n/* harmony export */   \"userAgentMiddleware\": () => (/* binding */ userAgentMiddleware)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ \"./node_modules/@aws-sdk/protocol-http/dist-es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js\");\n\n\nconst userAgentMiddleware = (options) => (next, context) => async (args) => {\n    const { request } = args;\n    if (!_aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest.isInstance(request))\n        return next(args);\n    const { headers } = request;\n    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];\n    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];\n    const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(_constants__WEBPACK_IMPORTED_MODULE_1__.SPACE);\n    const normalUAValue = [\n        ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n        ...customUserAgent,\n    ].join(_constants__WEBPACK_IMPORTED_MODULE_1__.SPACE);\n    if (options.runtime !== \"browser\") {\n        if (normalUAValue) {\n            headers[_constants__WEBPACK_IMPORTED_MODULE_1__.X_AMZ_USER_AGENT] = headers[_constants__WEBPACK_IMPORTED_MODULE_1__.X_AMZ_USER_AGENT]\n                ? `${headers[_constants__WEBPACK_IMPORTED_MODULE_1__.USER_AGENT]} ${normalUAValue}`\n                : normalUAValue;\n        }\n        headers[_constants__WEBPACK_IMPORTED_MODULE_1__.USER_AGENT] = sdkUserAgentValue;\n    }\n    else {\n        headers[_constants__WEBPACK_IMPORTED_MODULE_1__.X_AMZ_USER_AGENT] = sdkUserAgentValue;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nconst escapeUserAgent = ([name, version]) => {\n    const prefixSeparatorIndex = name.indexOf(\"/\");\n    const prefix = name.substring(0, prefixSeparatorIndex);\n    let uaName = name.substring(prefixSeparatorIndex + 1);\n    if (prefix === \"api\") {\n        uaName = uaName.toLowerCase();\n    }\n    return [prefix, uaName, version]\n        .filter((item) => item && item.length > 0)\n        .map((item) => item?.replace(_constants__WEBPACK_IMPORTED_MODULE_1__.UA_ESCAPE_REGEX, \"_\"))\n        .join(\"/\");\n};\nconst getUserAgentMiddlewareOptions = {\n    name: \"getUserAgentMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n    override: true,\n};\nconst getUserAgentPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n    },\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CredentialsProviderError\": () => (/* binding */ CredentialsProviderError)\n/* harmony export */ });\n/* harmony import */ var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */ \"./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js\");\n\nclass CredentialsProviderError extends _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"CredentialsProviderError\";\n        Object.setPrototypeOf(this, CredentialsProviderError.prototype);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ProviderError\": () => (/* binding */ ProviderError)\n/* harmony export */ });\nclass ProviderError extends Error {\n    constructor(message, tryNextLink = true) {\n        super(message);\n        this.tryNextLink = tryNextLink;\n        this.name = \"ProviderError\";\n        Object.setPrototypeOf(this, ProviderError.prototype);\n    }\n    static from(error, tryNextLink = true) {\n        return Object.assign(new this(error.message, tryNextLink), error);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TokenProviderError\": () => (/* binding */ TokenProviderError)\n/* harmony export */ });\n/* harmony import */ var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */ \"./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js\");\n\nclass TokenProviderError extends _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"TokenProviderError\";\n        Object.setPrototypeOf(this, TokenProviderError.prototype);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/chain.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/chain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"chain\": () => (/* binding */ chain)\n/* harmony export */ });\n/* harmony import */ var _ProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProviderError */ \"./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js\");\n\nfunction chain(...providers) {\n    return () => {\n        let promise = Promise.reject(new _ProviderError__WEBPACK_IMPORTED_MODULE_0__.ProviderError(\"No providers in chain\"));\n        for (const provider of providers) {\n            promise = promise.catch((err) => {\n                if (err?.tryNextLink) {\n                    return provider();\n                }\n                throw err;\n            });\n        }\n        return promise;\n    };\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/property-provider/dist-es/chain.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fromStatic\": () => (/* binding */ fromStatic)\n/* harmony export */ });\nconst fromStatic = (staticValue) => () => Promise.resolve(staticValue);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CredentialsProviderError\": () => (/* reexport safe */ _CredentialsProviderError__WEBPACK_IMPORTED_MODULE_0__.CredentialsProviderError),\n/* harmony export */   \"ProviderError\": () => (/* reexport safe */ _ProviderError__WEBPACK_IMPORTED_MODULE_1__.ProviderError),\n/* harmony export */   \"TokenProviderError\": () => (/* reexport safe */ _TokenProviderError__WEBPACK_IMPORTED_MODULE_2__.TokenProviderError),\n/* harmony export */   \"chain\": () => (/* reexport safe */ _chain__WEBPACK_IMPORTED_MODULE_3__.chain),\n/* harmony export */   \"fromStatic\": () => (/* reexport safe */ _fromStatic__WEBPACK_IMPORTED_MODULE_4__.fromStatic),\n/* harmony export */   \"memoize\": () => (/* reexport safe */ _memoize__WEBPACK_IMPORTED_MODULE_5__.memoize)\n/* harmony export */ });\n/* harmony import */ var _CredentialsProviderError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CredentialsProviderError */ \"./node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js\");\n/* harmony import */ var _ProviderError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ProviderError */ \"./node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js\");\n/* harmony import */ var _TokenProviderError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TokenProviderError */ \"./node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js\");\n/* harmony import */ var _chain__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chain */ \"./node_modules/@aws-sdk/property-provider/dist-es/chain.js\");\n/* harmony import */ var _fromStatic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromStatic */ \"./node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js\");\n/* harmony import */ var _memoize__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./memoize */ \"./node_modules/@aws-sdk/property-provider/dist-es/memoize.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/property-provider/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/property-provider/dist-es/memoize.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/property-provider/dist-es/memoize.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"memoize\": () => (/* binding */ memoize)\n/* harmony export */ });\nconst memoize = (provider, isExpired, requiresRefresh) => {\n    let resolved;\n    let pending;\n    let hasResult;\n    let isConstant = false;\n    const coalesceProvider = async () => {\n        if (!pending) {\n            pending = provider();\n        }\n        try {\n            resolved = await pending;\n            hasResult = true;\n            isConstant = false;\n        }\n        finally {\n            pending = undefined;\n        }\n        return resolved;\n    };\n    if (isExpired === undefined) {\n        return async (options) => {\n            if (!hasResult || options?.forceRefresh) {\n                resolved = await coalesceProvider();\n            }\n            return resolved;\n        };\n    }\n    return async (options) => {\n        if (!hasResult || options?.forceRefresh) {\n            resolved = await coalesceProvider();\n        }\n        if (isConstant) {\n            return resolved;\n        }\n        if (requiresRefresh && !requiresRefresh(resolved)) {\n            isConstant = true;\n            return resolved;\n        }\n        if (isExpired(resolved)) {\n            await coalesceProvider();\n            return resolved;\n        }\n        return resolved;\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/property-provider/dist-es/memoize.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/httpHandler.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/httpHandler.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/protocol-http/dist-es/httpHandler.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HttpRequest\": () => (/* binding */ HttpRequest)\n/* harmony export */ });\nclass HttpRequest {\n    constructor(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n            ? options.protocol.slice(-1) !== \":\"\n                ? `${options.protocol}:`\n                : options.protocol\n            : \"https:\";\n        this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n    }\n    static isInstance(request) {\n        if (!request)\n            return false;\n        const req = request;\n        return (\"method\" in req &&\n            \"protocol\" in req &&\n            \"hostname\" in req &&\n            \"path\" in req &&\n            typeof req[\"query\"] === \"object\" &&\n            typeof req[\"headers\"] === \"object\");\n    }\n    clone() {\n        const cloned = new HttpRequest({\n            ...this,\n            headers: { ...this.headers },\n        });\n        if (cloned.query)\n            cloned.query = cloneQuery(cloned.query);\n        return cloned;\n    }\n}\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName) => {\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [...param] : param,\n        };\n    }, {});\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HttpResponse\": () => (/* binding */ HttpResponse)\n/* harmony export */ });\nclass HttpResponse {\n    constructor(options) {\n        this.statusCode = options.statusCode;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    static isInstance(response) {\n        if (!response)\n            return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HttpRequest\": () => (/* reexport safe */ _httpRequest__WEBPACK_IMPORTED_MODULE_1__.HttpRequest),\n/* harmony export */   \"HttpResponse\": () => (/* reexport safe */ _httpResponse__WEBPACK_IMPORTED_MODULE_2__.HttpResponse),\n/* harmony export */   \"isValidHostname\": () => (/* reexport safe */ _isValidHostname__WEBPACK_IMPORTED_MODULE_3__.isValidHostname)\n/* harmony export */ });\n/* harmony import */ var _httpHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpHandler */ \"./node_modules/@aws-sdk/protocol-http/dist-es/httpHandler.js\");\n/* harmony import */ var _httpRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpRequest */ \"./node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js\");\n/* harmony import */ var _httpResponse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./httpResponse */ \"./node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js\");\n/* harmony import */ var _isValidHostname__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isValidHostname */ \"./node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js\");\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/protocol-http/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isValidHostname\": () => (/* binding */ isValidHostname)\n/* harmony export */ });\nfunction isValidHostname(hostname) {\n    const hostPattern = /^[a-z0-9][a-z0-9\\.\\-]*[a-z0-9]$/;\n    return hostPattern.test(hostname);\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/protocol-http/dist-es/isValidHostname.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/querystring-builder/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/querystring-builder/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"buildQueryString\": () => (/* binding */ buildQueryString)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-uri-escape */ \"./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js\");\n\nfunction buildQueryString(query) {\n    const parts = [];\n    for (let key of Object.keys(query).sort()) {\n        const value = query[key];\n        key = (0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(key);\n        if (Array.isArray(value)) {\n            for (let i = 0, iLen = value.length; i < iLen; i++) {\n                parts.push(`${key}=${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value[i])}`);\n            }\n        }\n        else {\n            let qsEntry = key;\n            if (value || typeof value === \"string\") {\n                qsEntry += `=${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value)}`;\n            }\n            parts.push(qsEntry);\n        }\n    }\n    return parts.join(\"&\");\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/querystring-builder/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/querystring-parser/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/querystring-parser/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseQueryString\": () => (/* binding */ parseQueryString)\n/* harmony export */ });\nfunction parseQueryString(querystring) {\n    const query = {};\n    querystring = querystring.replace(/^\\?/, \"\");\n    if (querystring) {\n        for (const pair of querystring.split(\"&\")) {\n            let [key, value = null] = pair.split(\"=\");\n            key = decodeURIComponent(key);\n            if (value) {\n                value = decodeURIComponent(value);\n            }\n            if (!(key in query)) {\n                query[key] = value;\n            }\n            else if (Array.isArray(query[key])) {\n                query[key].push(value);\n            }\n            else {\n                query[key] = [query[key], value];\n            }\n        }\n    }\n    return query;\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/querystring-parser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/service-error-classification/dist-es/constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/service-error-classification/dist-es/constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CLOCK_SKEW_ERROR_CODES\": () => (/* binding */ CLOCK_SKEW_ERROR_CODES),\n/* harmony export */   \"NODEJS_TIMEOUT_ERROR_CODES\": () => (/* binding */ NODEJS_TIMEOUT_ERROR_CODES),\n/* harmony export */   \"THROTTLING_ERROR_CODES\": () => (/* binding */ THROTTLING_ERROR_CODES),\n/* harmony export */   \"TRANSIENT_ERROR_CODES\": () => (/* binding */ TRANSIENT_ERROR_CODES),\n/* harmony export */   \"TRANSIENT_ERROR_STATUS_CODES\": () => (/* binding */ TRANSIENT_ERROR_STATUS_CODES)\n/* harmony export */ });\nconst CLOCK_SKEW_ERROR_CODES = [\n    \"AuthFailure\",\n    \"InvalidSignatureException\",\n    \"RequestExpired\",\n    \"RequestInTheFuture\",\n    \"RequestTimeTooSkewed\",\n    \"SignatureDoesNotMatch\",\n];\nconst THROTTLING_ERROR_CODES = [\n    \"BandwidthLimitExceeded\",\n    \"EC2ThrottledException\",\n    \"LimitExceededException\",\n    \"PriorRequestNotComplete\",\n    \"ProvisionedThroughputExceededException\",\n    \"RequestLimitExceeded\",\n    \"RequestThrottled\",\n    \"RequestThrottledException\",\n    \"SlowDown\",\n    \"ThrottledException\",\n    \"Throttling\",\n    \"ThrottlingException\",\n    \"TooManyRequestsException\",\n    \"TransactionInProgressException\",\n];\nconst TRANSIENT_ERROR_CODES = [\"AbortError\", \"TimeoutError\", \"RequestTimeout\", \"RequestTimeoutException\"];\nconst TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];\nconst NODEJS_TIMEOUT_ERROR_CODES = [\"ECONNRESET\", \"EPIPE\", \"ETIMEDOUT\"];\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/service-error-classification/dist-es/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/service-error-classification/dist-es/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/service-error-classification/dist-es/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isClockSkewError\": () => (/* binding */ isClockSkewError),\n/* harmony export */   \"isRetryableByTrait\": () => (/* binding */ isRetryableByTrait),\n/* harmony export */   \"isThrottlingError\": () => (/* binding */ isThrottlingError),\n/* harmony export */   \"isTransientError\": () => (/* binding */ isTransientError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/service-error-classification/dist-es/constants.js\");\n\nconst isRetryableByTrait = (error) => error.$retryable !== undefined;\nconst isClockSkewError = (error) => _constants__WEBPACK_IMPORTED_MODULE_0__.CLOCK_SKEW_ERROR_CODES.includes(error.name);\nconst isThrottlingError = (error) => error.$metadata?.httpStatusCode === 429 ||\n    _constants__WEBPACK_IMPORTED_MODULE_0__.THROTTLING_ERROR_CODES.includes(error.name) ||\n    error.$retryable?.throttling == true;\nconst isTransientError = (error) => _constants__WEBPACK_IMPORTED_MODULE_0__.TRANSIENT_ERROR_CODES.includes(error.name) ||\n    _constants__WEBPACK_IMPORTED_MODULE_0__.NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || \"\") ||\n    _constants__WEBPACK_IMPORTED_MODULE_0__.TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/service-error-classification/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SignatureV4MultiRegion\": () => (/* binding */ SignatureV4MultiRegion)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/signature-v4 */ \"./node_modules/@aws-sdk/signature-v4/dist-es/index.js\");\n\nclass SignatureV4MultiRegion {\n    constructor(options) {\n        this.sigv4Signer = new _aws_sdk_signature_v4__WEBPACK_IMPORTED_MODULE_0__.SignatureV4(options);\n        this.signerOptions = options;\n    }\n    async sign(requestToSign, options = {}) {\n        if (options.signingRegion === \"*\") {\n            if (this.signerOptions.runtime !== \"node\")\n                throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n            return this.getSigv4aSigner().sign(requestToSign, options);\n        }\n        return this.sigv4Signer.sign(requestToSign, options);\n    }\n    async presign(originalRequest, options = {}) {\n        if (options.signingRegion === \"*\") {\n            if (this.signerOptions.runtime !== \"node\")\n                throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n            return this.getSigv4aSigner().presign(originalRequest, options);\n        }\n        return this.sigv4Signer.presign(originalRequest, options);\n    }\n    getSigv4aSigner() {\n        if (!this.sigv4aSigner) {\n            let CrtSignerV4;\n            try {\n                CrtSignerV4 =  true && (__webpack_require__(/*! @aws-sdk/signature-v4-crt */ \"?7481\").CrtSignerV4);\n                if (typeof CrtSignerV4 !== \"function\")\n                    throw new Error();\n            }\n            catch (e) {\n                e.message =\n                    `${e.message}\\nPlease check if you have installed \"@aws-sdk/signature-v4-crt\" package explicitly. \\n` +\n                        \"For more information please go to \" +\n                        \"https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt\";\n                throw e;\n            }\n            this.sigv4aSigner = new CrtSignerV4({\n                ...this.signerOptions,\n                signingAlgorithm: 1,\n            });\n        }\n        return this.sigv4aSigner;\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SignatureV4MultiRegion\": () => (/* reexport safe */ _SignatureV4MultiRegion__WEBPACK_IMPORTED_MODULE_0__.SignatureV4MultiRegion)\n/* harmony export */ });\n/* harmony import */ var _SignatureV4MultiRegion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SignatureV4MultiRegion */ \"./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/SignatureV4MultiRegion.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4-multi-region/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SignatureV4\": () => (/* binding */ SignatureV4)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ \"./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-middleware */ \"./node_modules/@aws-sdk/util-middleware/dist-es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/signature-v4/dist-es/constants.js\");\n/* harmony import */ var _credentialDerivation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./credentialDerivation */ \"./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js\");\n/* harmony import */ var _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getCanonicalHeaders */ \"./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js\");\n/* harmony import */ var _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getCanonicalQuery */ \"./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js\");\n/* harmony import */ var _getPayloadHash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getPayloadHash */ \"./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js\");\n/* harmony import */ var _headerUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./headerUtil */ \"./node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js\");\n/* harmony import */ var _moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./moveHeadersToQuery */ \"./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js\");\n/* harmony import */ var _prepareRequest__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./prepareRequest */ \"./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js\");\n/* harmony import */ var _utilDate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utilDate */ \"./node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js\");\n\n\n\n\n\n\n\n\n\n\n\nclass SignatureV4 {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider)(region);\n        this.credentialProvider = (0,_aws_sdk_util_middleware__WEBPACK_IMPORTED_MODULE_1__.normalizeProvider)(credentials);\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > _constants__WEBPACK_IMPORTED_MODULE_2__.MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = (0,_credentialDerivation__WEBPACK_IMPORTED_MODULE_3__.createScope)(shortDate, region, signingService ?? this.service);\n        const request = (0,_moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_8__.moveHeadersToQuery)((0,_prepareRequest__WEBPACK_IMPORTED_MODULE_9__.prepareRequest)(originalRequest), { unhoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.ALGORITHM_QUERY_PARAM] = _constants__WEBPACK_IMPORTED_MODULE_2__.ALGORITHM_IDENTIFIER;\n        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = (0,_getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_4__.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);\n        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[_constants__WEBPACK_IMPORTED_MODULE_2__.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0,_getPayloadHash__WEBPACK_IMPORTED_MODULE_6__.getPayloadHash)(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = (0,_credentialDerivation__WEBPACK_IMPORTED_MODULE_3__.createScope)(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await (0,_getPayloadHash__WEBPACK_IMPORTED_MODULE_6__.getPayloadHash)({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(await hash.digest());\n        const stringToSign = [\n            _constants__WEBPACK_IMPORTED_MODULE_2__.EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(stringToSign);\n        return (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = (0,_prepareRequest__WEBPACK_IMPORTED_MODULE_9__.prepareRequest)(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = (0,_credentialDerivation__WEBPACK_IMPORTED_MODULE_3__.createScope)(shortDate, region, signingService ?? this.service);\n        request.headers[_constants__WEBPACK_IMPORTED_MODULE_2__.AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[_constants__WEBPACK_IMPORTED_MODULE_2__.TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await (0,_getPayloadHash__WEBPACK_IMPORTED_MODULE_6__.getPayloadHash)(request, this.sha256);\n        if (!(0,_headerUtil__WEBPACK_IMPORTED_MODULE_7__.hasHeader)(_constants__WEBPACK_IMPORTED_MODULE_2__.SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[_constants__WEBPACK_IMPORTED_MODULE_2__.SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = (0,_getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_4__.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[_constants__WEBPACK_IMPORTED_MODULE_2__.AUTH_HEADER] =\n            `${_constants__WEBPACK_IMPORTED_MODULE_2__.ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${(0,_getCanonicalQuery__WEBPACK_IMPORTED_MODULE_5__.getCanonicalQuery)(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update(canonicalRequest);\n        const hashedRequest = await hash.digest();\n        return `${_constants__WEBPACK_IMPORTED_MODULE_2__.ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const normalizedPathSegments = [];\n            for (const pathSegment of path.split(\"/\")) {\n                if (pathSegment?.length === 0)\n                    continue;\n                if (pathSegment === \".\")\n                    continue;\n                if (pathSegment === \"..\") {\n                    normalizedPathSegments.pop();\n                }\n                else {\n                    normalizedPathSegments.push(pathSegment);\n                }\n            }\n            const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n            const doubleEncoded = encodeURIComponent(normalizedPath);\n            return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(stringToSign);\n        return (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return (0,_credentialDerivation__WEBPACK_IMPORTED_MODULE_3__.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n    validateResolvedCredentials(credentials) {\n        if (typeof credentials !== \"object\" ||\n            typeof credentials.accessKeyId !== \"string\" ||\n            typeof credentials.secretAccessKey !== \"string\") {\n            throw new Error(\"Resolved credential object is not valid\");\n        }\n    }\n}\nconst formatDate = (now) => {\n    const longDate = (0,_utilDate__WEBPACK_IMPORTED_MODULE_10__.iso8601)(now).replace(/[\\-:]/g, \"\");\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    };\n};\nconst getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(\";\");\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cloneQuery\": () => (/* binding */ cloneQuery),\n/* harmony export */   \"cloneRequest\": () => (/* binding */ cloneRequest)\n/* harmony export */ });\nconst cloneRequest = ({ headers, query, ...rest }) => ({\n    ...rest,\n    headers: { ...headers },\n    query: query ? cloneQuery(query) : undefined,\n});\nconst cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {\n    const param = query[paramName];\n    return {\n        ...carry,\n        [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n}, {});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/constants.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/constants.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ALGORITHM_IDENTIFIER\": () => (/* binding */ ALGORITHM_IDENTIFIER),\n/* harmony export */   \"ALGORITHM_IDENTIFIER_V4A\": () => (/* binding */ ALGORITHM_IDENTIFIER_V4A),\n/* harmony export */   \"ALGORITHM_QUERY_PARAM\": () => (/* binding */ ALGORITHM_QUERY_PARAM),\n/* harmony export */   \"ALWAYS_UNSIGNABLE_HEADERS\": () => (/* binding */ ALWAYS_UNSIGNABLE_HEADERS),\n/* harmony export */   \"AMZ_DATE_HEADER\": () => (/* binding */ AMZ_DATE_HEADER),\n/* harmony export */   \"AMZ_DATE_QUERY_PARAM\": () => (/* binding */ AMZ_DATE_QUERY_PARAM),\n/* harmony export */   \"AUTH_HEADER\": () => (/* binding */ AUTH_HEADER),\n/* harmony export */   \"CREDENTIAL_QUERY_PARAM\": () => (/* binding */ CREDENTIAL_QUERY_PARAM),\n/* harmony export */   \"DATE_HEADER\": () => (/* binding */ DATE_HEADER),\n/* harmony export */   \"EVENT_ALGORITHM_IDENTIFIER\": () => (/* binding */ EVENT_ALGORITHM_IDENTIFIER),\n/* harmony export */   \"EXPIRES_QUERY_PARAM\": () => (/* binding */ EXPIRES_QUERY_PARAM),\n/* harmony export */   \"GENERATED_HEADERS\": () => (/* binding */ GENERATED_HEADERS),\n/* harmony export */   \"HOST_HEADER\": () => (/* binding */ HOST_HEADER),\n/* harmony export */   \"KEY_TYPE_IDENTIFIER\": () => (/* binding */ KEY_TYPE_IDENTIFIER),\n/* harmony export */   \"MAX_CACHE_SIZE\": () => (/* binding */ MAX_CACHE_SIZE),\n/* harmony export */   \"MAX_PRESIGNED_TTL\": () => (/* binding */ MAX_PRESIGNED_TTL),\n/* harmony export */   \"PROXY_HEADER_PATTERN\": () => (/* binding */ PROXY_HEADER_PATTERN),\n/* harmony export */   \"REGION_SET_PARAM\": () => (/* binding */ REGION_SET_PARAM),\n/* harmony export */   \"SEC_HEADER_PATTERN\": () => (/* binding */ SEC_HEADER_PATTERN),\n/* harmony export */   \"SHA256_HEADER\": () => (/* binding */ SHA256_HEADER),\n/* harmony export */   \"SIGNATURE_HEADER\": () => (/* binding */ SIGNATURE_HEADER),\n/* harmony export */   \"SIGNATURE_QUERY_PARAM\": () => (/* binding */ SIGNATURE_QUERY_PARAM),\n/* harmony export */   \"SIGNED_HEADERS_QUERY_PARAM\": () => (/* binding */ SIGNED_HEADERS_QUERY_PARAM),\n/* harmony export */   \"TOKEN_HEADER\": () => (/* binding */ TOKEN_HEADER),\n/* harmony export */   \"TOKEN_QUERY_PARAM\": () => (/* binding */ TOKEN_QUERY_PARAM),\n/* harmony export */   \"UNSIGNABLE_PATTERNS\": () => (/* binding */ UNSIGNABLE_PATTERNS),\n/* harmony export */   \"UNSIGNED_PAYLOAD\": () => (/* binding */ UNSIGNED_PAYLOAD)\n/* harmony export */ });\nconst ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\nconst CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\nconst AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\nconst SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\nconst EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\nconst SIGNATURE_QUERY_PARAM = \"X-Amz-Signature\";\nconst TOKEN_QUERY_PARAM = \"X-Amz-Security-Token\";\nconst REGION_SET_PARAM = \"X-Amz-Region-Set\";\nconst AUTH_HEADER = \"authorization\";\nconst AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();\nconst DATE_HEADER = \"date\";\nconst GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];\nconst SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();\nconst SHA256_HEADER = \"x-amz-content-sha256\";\nconst TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();\nconst HOST_HEADER = \"host\";\nconst ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    \"cache-control\": true,\n    connection: true,\n    expect: true,\n    from: true,\n    \"keep-alive\": true,\n    \"max-forwards\": true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true,\n    \"user-agent\": true,\n    \"x-amzn-trace-id\": true,\n};\nconst PROXY_HEADER_PATTERN = /^proxy-/;\nconst SEC_HEADER_PATTERN = /^sec-/;\nconst UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];\nconst ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\nconst ALGORITHM_IDENTIFIER_V4A = \"AWS4-ECDSA-P256-SHA256\";\nconst EVENT_ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256-PAYLOAD\";\nconst UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nconst MAX_CACHE_SIZE = 50;\nconst KEY_TYPE_IDENTIFIER = \"aws4_request\";\nconst MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearCredentialCache\": () => (/* binding */ clearCredentialCache),\n/* harmony export */   \"createScope\": () => (/* binding */ createScope),\n/* harmony export */   \"getSigningKey\": () => (/* binding */ getSigningKey)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ \"./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/signature-v4/dist-es/constants.js\");\n\n\nconst signingKeyCache = {};\nconst cacheQueue = [];\nconst createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${_constants__WEBPACK_IMPORTED_MODULE_1__.KEY_TYPE_IDENTIFIER}`;\nconst getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n    const cacheKey = `${shortDate}:${region}:${service}:${(0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_0__.toHex)(credsHash)}:${credentials.sessionToken}`;\n    if (cacheKey in signingKeyCache) {\n        return signingKeyCache[cacheKey];\n    }\n    cacheQueue.push(cacheKey);\n    while (cacheQueue.length > _constants__WEBPACK_IMPORTED_MODULE_1__.MAX_CACHE_SIZE) {\n        delete signingKeyCache[cacheQueue.shift()];\n    }\n    let key = `AWS4${credentials.secretAccessKey}`;\n    for (const signable of [shortDate, region, service, _constants__WEBPACK_IMPORTED_MODULE_1__.KEY_TYPE_IDENTIFIER]) {\n        key = await hmac(sha256Constructor, key, signable);\n    }\n    return (signingKeyCache[cacheKey] = key);\n};\nconst clearCredentialCache = () => {\n    cacheQueue.length = 0;\n    Object.keys(signingKeyCache).forEach((cacheKey) => {\n        delete signingKeyCache[cacheKey];\n    });\n};\nconst hmac = (ctor, secret, data) => {\n    const hash = new ctor(secret);\n    hash.update(data);\n    return hash.digest();\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getCanonicalHeaders\": () => (/* binding */ getCanonicalHeaders)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/signature-v4/dist-es/constants.js\");\n\nconst getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {\n    const canonical = {};\n    for (const headerName of Object.keys(headers).sort()) {\n        if (headers[headerName] == undefined) {\n            continue;\n        }\n        const canonicalHeaderName = headerName.toLowerCase();\n        if (canonicalHeaderName in _constants__WEBPACK_IMPORTED_MODULE_0__.ALWAYS_UNSIGNABLE_HEADERS ||\n            unsignableHeaders?.has(canonicalHeaderName) ||\n            _constants__WEBPACK_IMPORTED_MODULE_0__.PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n            _constants__WEBPACK_IMPORTED_MODULE_0__.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n                continue;\n            }\n        }\n        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n    return canonical;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getCanonicalQuery\": () => (/* binding */ getCanonicalQuery)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/util-uri-escape */ \"./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/signature-v4/dist-es/constants.js\");\n\n\nconst getCanonicalQuery = ({ query = {} }) => {\n    const keys = [];\n    const serialized = {};\n    for (const key of Object.keys(query).sort()) {\n        if (key.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_1__.SIGNATURE_HEADER) {\n            continue;\n        }\n        keys.push(key);\n        const value = query[key];\n        if (typeof value === \"string\") {\n            serialized[key] = `${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(key)}=${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value)}`;\n        }\n        else if (Array.isArray(value)) {\n            serialized[key] = value\n                .slice(0)\n                .sort()\n                .reduce((encoded, value) => encoded.concat([`${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(key)}=${(0,_aws_sdk_util_uri_escape__WEBPACK_IMPORTED_MODULE_0__.escapeUri)(value)}`]), [])\n                .join(\"&\");\n        }\n    }\n    return keys\n        .map((key) => serialized[key])\n        .filter((serialized) => serialized)\n        .join(\"&\");\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getPayloadHash\": () => (/* binding */ getPayloadHash)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/is-array-buffer */ \"./node_modules/@aws-sdk/is-array-buffer/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ \"./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/signature-v4/dist-es/constants.js\");\n\n\n\nconst getPayloadHash = async ({ headers, body }, hashConstructor) => {\n    for (const headerName of Object.keys(headers)) {\n        if (headerName.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.SHA256_HEADER) {\n            return headers[headerName];\n        }\n    }\n    if (body == undefined) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    }\n    else if (typeof body === \"string\" || ArrayBuffer.isView(body) || (0,_aws_sdk_is_array_buffer__WEBPACK_IMPORTED_MODULE_0__.isArrayBuffer)(body)) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update(body);\n        return (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_1__.toHex)(await hashCtor.digest());\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_2__.UNSIGNED_PAYLOAD;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deleteHeader\": () => (/* binding */ deleteHeader),\n/* harmony export */   \"getHeaderValue\": () => (/* binding */ getHeaderValue),\n/* harmony export */   \"hasHeader\": () => (/* binding */ hasHeader)\n/* harmony export */ });\nconst hasHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n};\nconst getHeaderValue = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return headers[headerName];\n        }\n    }\n    return undefined;\n};\nconst deleteHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            delete headers[headerName];\n        }\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SignatureV4\": () => (/* reexport safe */ _SignatureV4__WEBPACK_IMPORTED_MODULE_0__.SignatureV4),\n/* harmony export */   \"clearCredentialCache\": () => (/* reexport safe */ _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__.clearCredentialCache),\n/* harmony export */   \"createScope\": () => (/* reexport safe */ _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__.createScope),\n/* harmony export */   \"getCanonicalHeaders\": () => (/* reexport safe */ _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_1__.getCanonicalHeaders),\n/* harmony export */   \"getCanonicalQuery\": () => (/* reexport safe */ _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_2__.getCanonicalQuery),\n/* harmony export */   \"getPayloadHash\": () => (/* reexport safe */ _getPayloadHash__WEBPACK_IMPORTED_MODULE_3__.getPayloadHash),\n/* harmony export */   \"getSigningKey\": () => (/* reexport safe */ _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__.getSigningKey),\n/* harmony export */   \"moveHeadersToQuery\": () => (/* reexport safe */ _moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_4__.moveHeadersToQuery),\n/* harmony export */   \"prepareRequest\": () => (/* reexport safe */ _prepareRequest__WEBPACK_IMPORTED_MODULE_5__.prepareRequest)\n/* harmony export */ });\n/* harmony import */ var _SignatureV4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SignatureV4 */ \"./node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js\");\n/* harmony import */ var _getCanonicalHeaders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getCanonicalHeaders */ \"./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js\");\n/* harmony import */ var _getCanonicalQuery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getCanonicalQuery */ \"./node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js\");\n/* harmony import */ var _getPayloadHash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getPayloadHash */ \"./node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js\");\n/* harmony import */ var _moveHeadersToQuery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./moveHeadersToQuery */ \"./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js\");\n/* harmony import */ var _prepareRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./prepareRequest */ \"./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js\");\n/* harmony import */ var _credentialDerivation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentialDerivation */ \"./node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"moveHeadersToQuery\": () => (/* binding */ moveHeadersToQuery)\n/* harmony export */ });\n/* harmony import */ var _cloneRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloneRequest */ \"./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js\");\n\nconst moveHeadersToQuery = (request, options = {}) => {\n    const { headers, query = {} } = typeof request.clone === \"function\" ? request.clone() : (0,_cloneRequest__WEBPACK_IMPORTED_MODULE_0__.cloneRequest)(request);\n    for (const name of Object.keys(headers)) {\n        const lname = name.toLowerCase();\n        if (lname.slice(0, 6) === \"x-amz-\" && !options.unhoistableHeaders?.has(lname)) {\n            query[name] = headers[name];\n            delete headers[name];\n        }\n    }\n    return {\n        ...request,\n        headers,\n        query,\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"prepareRequest\": () => (/* binding */ prepareRequest)\n/* harmony export */ });\n/* harmony import */ var _cloneRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloneRequest */ \"./node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/signature-v4/dist-es/constants.js\");\n\n\nconst prepareRequest = (request) => {\n    request = typeof request.clone === \"function\" ? request.clone() : (0,_cloneRequest__WEBPACK_IMPORTED_MODULE_0__.cloneRequest)(request);\n    for (const headerName of Object.keys(request.headers)) {\n        if (_constants__WEBPACK_IMPORTED_MODULE_1__.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n            delete request.headers[headerName];\n        }\n    }\n    return request;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"iso8601\": () => (/* binding */ iso8601),\n/* harmony export */   \"toDate\": () => (/* binding */ toDate)\n/* harmony export */ });\nconst iso8601 = (time) => toDate(time)\n    .toISOString()\n    .replace(/\\.\\d{3}Z$/, \"Z\");\nconst toDate = (time) => {\n    if (typeof time === \"number\") {\n        return new Date(time * 1000);\n    }\n    if (typeof time === \"string\") {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000);\n        }\n        return new Date(time);\n    }\n    return time;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/client.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/client.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Client\": () => (/* binding */ Client)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-stack */ \"./node_modules/@aws-sdk/middleware-stack/dist-es/index.js\");\n\nclass Client {\n    constructor(config) {\n        this.middlewareStack = (0,_aws_sdk_middleware_stack__WEBPACK_IMPORTED_MODULE_0__.constructStack)();\n        this.config = config;\n    }\n    send(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    }\n    destroy() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/client.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/command.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/command.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Command\": () => (/* binding */ Command)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_middleware_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-stack */ \"./node_modules/@aws-sdk/middleware-stack/dist-es/index.js\");\n\nclass Command {\n    constructor() {\n        this.middlewareStack = (0,_aws_sdk_middleware_stack__WEBPACK_IMPORTED_MODULE_0__.constructStack)();\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/command.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SENSITIVE_STRING\": () => (/* binding */ SENSITIVE_STRING)\n/* harmony export */ });\nconst SENSITIVE_STRING = \"***SensitiveInformation***\";\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"dateToUtcString\": () => (/* binding */ dateToUtcString),\n/* harmony export */   \"parseEpochTimestamp\": () => (/* binding */ parseEpochTimestamp),\n/* harmony export */   \"parseRfc3339DateTime\": () => (/* binding */ parseRfc3339DateTime),\n/* harmony export */   \"parseRfc7231DateTime\": () => (/* binding */ parseRfc7231DateTime)\n/* harmony export */ });\n/* harmony import */ var _parse_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-utils */ \"./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js\");\n\nconst DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nfunction dateToUtcString(date) {\n    const year = date.getUTCFullYear();\n    const month = date.getUTCMonth();\n    const dayOfWeek = date.getUTCDay();\n    const dayOfMonthInt = date.getUTCDate();\n    const hoursInt = date.getUTCHours();\n    const minutesInt = date.getUTCMinutes();\n    const secondsInt = date.getUTCSeconds();\n    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n}\nconst RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nconst parseRfc3339DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    const year = (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n};\nconst IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nconst parseRfc7231DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    let match = IMF_FIXDATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return buildDate((0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds,\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;\n        return buildDate((0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nconst parseEpochTimestamp = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    let valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    }\n    else if (typeof value === \"string\") {\n        valueAsDouble = (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseDouble)(value);\n    }\n    else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1000));\n};\nconst buildDate = (year, month, day, time) => {\n    const adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nconst parseTwoDigitYear = (value) => {\n    const thisYear = new Date().getUTCFullYear();\n    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseShort)(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n};\nconst FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nconst adjustRfc850Year = (input) => {\n    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n};\nconst parseMonthByShortName = (value) => {\n    const monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(`Invalid month: ${value}`);\n    }\n    return monthIdx + 1;\n};\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst validateDayOfMonth = (year, month, day) => {\n    let maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n    }\n};\nconst isLeapYear = (year) => {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nconst parseDateValue = (value, type, lower, upper) => {\n    const dateVal = (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseByte)(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n    }\n    return dateVal;\n};\nconst parseMilliseconds = (value) => {\n    if (value === null || value === undefined) {\n        return 0;\n    }\n    return (0,_parse_utils__WEBPACK_IMPORTED_MODULE_0__.strictParseFloat32)(\"0.\" + value) * 1000;\n};\nconst stripLeadingZeroes = (value) => {\n    let idx = 0;\n    while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"throwDefaultError\": () => (/* binding */ throwDefaultError)\n/* harmony export */ });\n/* harmony import */ var _exceptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exceptions */ \"./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js\");\n\nconst throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {\n    const $metadata = deserializeMetadata(output);\n    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + \"\" : undefined;\n    const response = new exceptionCtor({\n        name: parsedBody.code || parsedBody.Code || errorCode || statusCode || \"UnknownError\",\n        $fault: \"client\",\n        $metadata,\n    });\n    throw (0,_exceptions__WEBPACK_IMPORTED_MODULE_0__.decorateServiceException)(response, parsedBody);\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loadConfigsForDefaultMode\": () => (/* binding */ loadConfigsForDefaultMode)\n/* harmony export */ });\nconst loadConfigsForDefaultMode = (mode) => {\n    switch (mode) {\n        case \"standard\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100,\n            };\n        case \"in-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 1100,\n            };\n        case \"cross-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100,\n            };\n        case \"mobile\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 30000,\n            };\n        default:\n            return {};\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"emitWarningIfUnsupportedVersion\": () => (/* binding */ emitWarningIfUnsupportedVersion)\n/* harmony export */ });\nlet warningEmitted = false;\nconst emitWarningIfUnsupportedVersion = (version) => {\n    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\".\"))) < 14) {\n        warningEmitted = true;\n        process.emitWarning(`The AWS SDK for JavaScript (v3) will\\n` +\n            `no longer support Node.js ${version} on November 1, 2022.\\n\\n` +\n            `To continue receiving updates to AWS services, bug fixes, and security\\n` +\n            `updates please upgrade to Node.js 14.x or later.\\n\\n` +\n            `For details, please refer our blog post: https://a.co/48dbdYz`, `NodeDeprecationWarning`);\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ServiceException\": () => (/* binding */ ServiceException),\n/* harmony export */   \"decorateServiceException\": () => (/* binding */ decorateServiceException)\n/* harmony export */ });\nclass ServiceException extends Error {\n    constructor(options) {\n        super(options.message);\n        Object.setPrototypeOf(this, ServiceException.prototype);\n        this.name = options.name;\n        this.$fault = options.$fault;\n        this.$metadata = options.$metadata;\n    }\n}\nconst decorateServiceException = (exception, additions = {}) => {\n    Object.entries(additions)\n        .filter(([, v]) => v !== undefined)\n        .forEach(([k, v]) => {\n        if (exception[k] == undefined || exception[k] === \"\") {\n            exception[k] = v;\n        }\n    });\n    const message = exception.message || exception.Message || \"UnknownError\";\n    exception.message = message;\n    delete exception.Message;\n    return exception;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extendedEncodeURIComponent\": () => (/* binding */ extendedEncodeURIComponent)\n/* harmony export */ });\nfunction extendedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/get-array-if-single-item.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/get-array-if-single-item.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getArrayIfSingleItem\": () => (/* binding */ getArrayIfSingleItem)\n/* harmony export */ });\nconst getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/get-array-if-single-item.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getValueFromTextNode\": () => (/* binding */ getValueFromTextNode)\n/* harmony export */ });\nconst getValueFromTextNode = (obj) => {\n    const textNodeName = \"#text\";\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {\n            obj[key] = obj[key][textNodeName];\n        }\n        else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n            obj[key] = getValueFromTextNode(obj[key]);\n        }\n    }\n    return obj;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Client\": () => (/* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_0__.Client),\n/* harmony export */   \"Command\": () => (/* reexport safe */ _command__WEBPACK_IMPORTED_MODULE_1__.Command),\n/* harmony export */   \"LazyJsonString\": () => (/* reexport safe */ _lazy_json__WEBPACK_IMPORTED_MODULE_11__.LazyJsonString),\n/* harmony export */   \"SENSITIVE_STRING\": () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_2__.SENSITIVE_STRING),\n/* harmony export */   \"ServiceException\": () => (/* reexport safe */ _exceptions__WEBPACK_IMPORTED_MODULE_7__.ServiceException),\n/* harmony export */   \"StringWrapper\": () => (/* reexport safe */ _lazy_json__WEBPACK_IMPORTED_MODULE_11__.StringWrapper),\n/* harmony export */   \"convertMap\": () => (/* reexport safe */ _object_mapping__WEBPACK_IMPORTED_MODULE_12__.convertMap),\n/* harmony export */   \"dateToUtcString\": () => (/* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_3__.dateToUtcString),\n/* harmony export */   \"decorateServiceException\": () => (/* reexport safe */ _exceptions__WEBPACK_IMPORTED_MODULE_7__.decorateServiceException),\n/* harmony export */   \"emitWarningIfUnsupportedVersion\": () => (/* reexport safe */ _emitWarningIfUnsupportedVersion__WEBPACK_IMPORTED_MODULE_6__.emitWarningIfUnsupportedVersion),\n/* harmony export */   \"expectBoolean\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectBoolean),\n/* harmony export */   \"expectByte\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectByte),\n/* harmony export */   \"expectFloat32\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectFloat32),\n/* harmony export */   \"expectInt\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectInt),\n/* harmony export */   \"expectInt32\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectInt32),\n/* harmony export */   \"expectLong\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectLong),\n/* harmony export */   \"expectNonNull\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectNonNull),\n/* harmony export */   \"expectNumber\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectNumber),\n/* harmony export */   \"expectObject\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectObject),\n/* harmony export */   \"expectShort\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectShort),\n/* harmony export */   \"expectString\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectString),\n/* harmony export */   \"expectUnion\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.expectUnion),\n/* harmony export */   \"extendedEncodeURIComponent\": () => (/* reexport safe */ _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_8__.extendedEncodeURIComponent),\n/* harmony export */   \"getArrayIfSingleItem\": () => (/* reexport safe */ _get_array_if_single_item__WEBPACK_IMPORTED_MODULE_9__.getArrayIfSingleItem),\n/* harmony export */   \"getValueFromTextNode\": () => (/* reexport safe */ _get_value_from_text_node__WEBPACK_IMPORTED_MODULE_10__.getValueFromTextNode),\n/* harmony export */   \"handleFloat\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.handleFloat),\n/* harmony export */   \"limitedParseDouble\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.limitedParseDouble),\n/* harmony export */   \"limitedParseFloat\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.limitedParseFloat),\n/* harmony export */   \"limitedParseFloat32\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.limitedParseFloat32),\n/* harmony export */   \"loadConfigsForDefaultMode\": () => (/* reexport safe */ _defaults_mode__WEBPACK_IMPORTED_MODULE_5__.loadConfigsForDefaultMode),\n/* harmony export */   \"logger\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.logger),\n/* harmony export */   \"map\": () => (/* reexport safe */ _object_mapping__WEBPACK_IMPORTED_MODULE_12__.map),\n/* harmony export */   \"parseBoolean\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.parseBoolean),\n/* harmony export */   \"parseEpochTimestamp\": () => (/* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_3__.parseEpochTimestamp),\n/* harmony export */   \"parseRfc3339DateTime\": () => (/* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_3__.parseRfc3339DateTime),\n/* harmony export */   \"parseRfc7231DateTime\": () => (/* reexport safe */ _date_utils__WEBPACK_IMPORTED_MODULE_3__.parseRfc7231DateTime),\n/* harmony export */   \"resolvedPath\": () => (/* reexport safe */ _resolve_path__WEBPACK_IMPORTED_MODULE_14__.resolvedPath),\n/* harmony export */   \"serializeFloat\": () => (/* reexport safe */ _ser_utils__WEBPACK_IMPORTED_MODULE_15__.serializeFloat),\n/* harmony export */   \"splitEvery\": () => (/* reexport safe */ _split_every__WEBPACK_IMPORTED_MODULE_16__.splitEvery),\n/* harmony export */   \"strictParseByte\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.strictParseByte),\n/* harmony export */   \"strictParseDouble\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.strictParseDouble),\n/* harmony export */   \"strictParseFloat\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.strictParseFloat),\n/* harmony export */   \"strictParseFloat32\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.strictParseFloat32),\n/* harmony export */   \"strictParseInt\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.strictParseInt),\n/* harmony export */   \"strictParseInt32\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.strictParseInt32),\n/* harmony export */   \"strictParseLong\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.strictParseLong),\n/* harmony export */   \"strictParseShort\": () => (/* reexport safe */ _parse_utils__WEBPACK_IMPORTED_MODULE_13__.strictParseShort),\n/* harmony export */   \"throwDefaultError\": () => (/* reexport safe */ _default_error_handler__WEBPACK_IMPORTED_MODULE_4__.throwDefaultError)\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"./node_modules/@aws-sdk/smithy-client/dist-es/client.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./command */ \"./node_modules/@aws-sdk/smithy-client/dist-es/command.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/smithy-client/dist-es/constants.js\");\n/* harmony import */ var _date_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./date-utils */ \"./node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js\");\n/* harmony import */ var _default_error_handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./default-error-handler */ \"./node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js\");\n/* harmony import */ var _defaults_mode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./defaults-mode */ \"./node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js\");\n/* harmony import */ var _emitWarningIfUnsupportedVersion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./emitWarningIfUnsupportedVersion */ \"./node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js\");\n/* harmony import */ var _exceptions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exceptions */ \"./node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js\");\n/* harmony import */ var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extended-encode-uri-component */ \"./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js\");\n/* harmony import */ var _get_array_if_single_item__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./get-array-if-single-item */ \"./node_modules/@aws-sdk/smithy-client/dist-es/get-array-if-single-item.js\");\n/* harmony import */ var _get_value_from_text_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./get-value-from-text-node */ \"./node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js\");\n/* harmony import */ var _lazy_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lazy-json */ \"./node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js\");\n/* harmony import */ var _object_mapping__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./object-mapping */ \"./node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js\");\n/* harmony import */ var _parse_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parse-utils */ \"./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js\");\n/* harmony import */ var _resolve_path__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resolve-path */ \"./node_modules/@aws-sdk/smithy-client/dist-es/resolve-path.js\");\n/* harmony import */ var _ser_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ser-utils */ \"./node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js\");\n/* harmony import */ var _split_every__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./split-every */ \"./node_modules/@aws-sdk/smithy-client/dist-es/split-every.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LazyJsonString\": () => (/* binding */ LazyJsonString),\n/* harmony export */   \"StringWrapper\": () => (/* binding */ StringWrapper)\n/* harmony export */ });\nconst StringWrapper = function () {\n    const Class = Object.getPrototypeOf(this).constructor;\n    const Constructor = Function.bind.apply(String, [null, ...arguments]);\n    const instance = new Constructor();\n    Object.setPrototypeOf(instance, Class.prototype);\n    return instance;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n    constructor: {\n        value: StringWrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n    },\n});\nObject.setPrototypeOf(StringWrapper, String);\nclass LazyJsonString extends StringWrapper {\n    deserializeJSON() {\n        return JSON.parse(super.toString());\n    }\n    toJSON() {\n        return super.toString();\n    }\n    static fromObject(object) {\n        if (object instanceof LazyJsonString) {\n            return object;\n        }\n        else if (object instanceof String || typeof object === \"string\") {\n            return new LazyJsonString(object);\n        }\n        return new LazyJsonString(JSON.stringify(object));\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"convertMap\": () => (/* binding */ convertMap),\n/* harmony export */   \"map\": () => (/* binding */ map)\n/* harmony export */ });\nfunction map(arg0, arg1, arg2) {\n    let target;\n    let filter;\n    let instructions;\n    if (typeof arg1 === \"undefined\" && typeof arg2 === \"undefined\") {\n        target = {};\n        instructions = arg0;\n    }\n    else {\n        target = arg0;\n        if (typeof arg1 === \"function\") {\n            filter = arg1;\n            instructions = arg2;\n            return mapWithFilter(target, filter, instructions);\n        }\n        else {\n            instructions = arg1;\n        }\n    }\n    for (const key of Object.keys(instructions)) {\n        if (!Array.isArray(instructions[key])) {\n            target[key] = instructions[key];\n            continue;\n        }\n        let [filter, value] = instructions[key];\n        if (typeof value === \"function\") {\n            let _value;\n            const defaultFilterPassed = filter === undefined && (_value = value()) != null;\n            const customFilterPassed = (typeof filter === \"function\" && !!filter(void 0)) || (typeof filter !== \"function\" && !!filter);\n            if (defaultFilterPassed) {\n                target[key] = _value;\n            }\n            else if (customFilterPassed) {\n                target[key] = value();\n            }\n        }\n        else {\n            const defaultFilterPassed = filter === undefined && value != null;\n            const customFilterPassed = (typeof filter === \"function\" && !!filter(value)) || (typeof filter !== \"function\" && !!filter);\n            if (defaultFilterPassed || customFilterPassed) {\n                target[key] = value;\n            }\n        }\n    }\n    return target;\n}\nconst convertMap = (target) => {\n    const output = {};\n    for (const [k, v] of Object.entries(target || {})) {\n        output[k] = [, v];\n    }\n    return output;\n};\nconst mapWithFilter = (target, filter, instructions) => {\n    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {\n        if (Array.isArray(value)) {\n            _instructions[key] = value;\n        }\n        else {\n            if (typeof value === \"function\") {\n                _instructions[key] = [filter, value()];\n            }\n            else {\n                _instructions[key] = [filter, value];\n            }\n        }\n        return _instructions;\n    }, {}));\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"expectBoolean\": () => (/* binding */ expectBoolean),\n/* harmony export */   \"expectByte\": () => (/* binding */ expectByte),\n/* harmony export */   \"expectFloat32\": () => (/* binding */ expectFloat32),\n/* harmony export */   \"expectInt\": () => (/* binding */ expectInt),\n/* harmony export */   \"expectInt32\": () => (/* binding */ expectInt32),\n/* harmony export */   \"expectLong\": () => (/* binding */ expectLong),\n/* harmony export */   \"expectNonNull\": () => (/* binding */ expectNonNull),\n/* harmony export */   \"expectNumber\": () => (/* binding */ expectNumber),\n/* harmony export */   \"expectObject\": () => (/* binding */ expectObject),\n/* harmony export */   \"expectShort\": () => (/* binding */ expectShort),\n/* harmony export */   \"expectString\": () => (/* binding */ expectString),\n/* harmony export */   \"expectUnion\": () => (/* binding */ expectUnion),\n/* harmony export */   \"handleFloat\": () => (/* binding */ handleFloat),\n/* harmony export */   \"limitedParseDouble\": () => (/* binding */ limitedParseDouble),\n/* harmony export */   \"limitedParseFloat\": () => (/* binding */ limitedParseFloat),\n/* harmony export */   \"limitedParseFloat32\": () => (/* binding */ limitedParseFloat32),\n/* harmony export */   \"logger\": () => (/* binding */ logger),\n/* harmony export */   \"parseBoolean\": () => (/* binding */ parseBoolean),\n/* harmony export */   \"strictParseByte\": () => (/* binding */ strictParseByte),\n/* harmony export */   \"strictParseDouble\": () => (/* binding */ strictParseDouble),\n/* harmony export */   \"strictParseFloat\": () => (/* binding */ strictParseFloat),\n/* harmony export */   \"strictParseFloat32\": () => (/* binding */ strictParseFloat32),\n/* harmony export */   \"strictParseInt\": () => (/* binding */ strictParseInt),\n/* harmony export */   \"strictParseInt32\": () => (/* binding */ strictParseInt32),\n/* harmony export */   \"strictParseLong\": () => (/* binding */ strictParseLong),\n/* harmony export */   \"strictParseShort\": () => (/* binding */ strictParseShort)\n/* harmony export */ });\nconst parseBoolean = (value) => {\n    switch (value) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(`Unable to parse boolean value \"${value}\"`);\n    }\n};\nconst expectBoolean = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"number\") {\n        if (value === 0 || value === 1) {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (value === 0) {\n            return false;\n        }\n        if (value === 1) {\n            return true;\n        }\n    }\n    if (typeof value === \"string\") {\n        const lower = value.toLowerCase();\n        if (lower === \"false\" || lower === \"true\") {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (lower === \"false\") {\n            return false;\n        }\n        if (lower === \"true\") {\n            return true;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);\n};\nconst expectNumber = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        const parsed = parseFloat(value);\n        if (!Number.isNaN(parsed)) {\n            if (String(parsed) !== String(value)) {\n                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));\n            }\n            return parsed;\n        }\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);\n};\nconst MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\nconst expectFloat32 = (value) => {\n    const expected = expectNumber(value);\n    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(`Expected 32-bit float, got ${value}`);\n        }\n    }\n    return expected;\n};\nconst expectLong = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);\n};\nconst expectInt = expectLong;\nconst expectInt32 = (value) => expectSizedInt(value, 32);\nconst expectShort = (value) => expectSizedInt(value, 16);\nconst expectByte = (value) => expectSizedInt(value, 8);\nconst expectSizedInt = (value, size) => {\n    const expected = expectLong(value);\n    if (expected !== undefined && castInt(expected, size) !== expected) {\n        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n    }\n    return expected;\n};\nconst castInt = (value, size) => {\n    switch (size) {\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n};\nconst expectNonNull = (value, location) => {\n    if (value === null || value === undefined) {\n        if (location) {\n            throw new TypeError(`Expected a non-null value for ${location}`);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n};\nconst expectObject = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    const receivedType = Array.isArray(value) ? \"array\" : typeof value;\n    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);\n};\nconst expectString = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ([\"boolean\", \"number\", \"bigint\"].includes(typeof value)) {\n        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));\n        return String(value);\n    }\n    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);\n};\nconst expectUnion = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    const asObject = expectObject(value);\n    const setKeys = Object.entries(asObject)\n        .filter(([, v]) => v != null)\n        .map(([k]) => k);\n    if (setKeys.length === 0) {\n        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);\n    }\n    return asObject;\n};\nconst strictParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n};\nconst strictParseFloat = strictParseDouble;\nconst strictParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n};\nconst NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nconst parseNumber = (value) => {\n    const matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(`Expected real number, got implicit NaN`);\n    }\n    return parseFloat(value);\n};\nconst limitedParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n};\nconst handleFloat = limitedParseDouble;\nconst limitedParseFloat = limitedParseDouble;\nconst limitedParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n};\nconst parseFloatString = (value) => {\n    switch (value) {\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(`Unable to parse float value: ${value}`);\n    }\n};\nconst strictParseLong = (value) => {\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n};\nconst strictParseInt = strictParseLong;\nconst strictParseInt32 = (value) => {\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n};\nconst strictParseShort = (value) => {\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n};\nconst strictParseByte = (value) => {\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n};\nconst stackTraceWarning = (message) => {\n    return String(new TypeError(message).stack || message)\n        .split(\"\\n\")\n        .slice(0, 5)\n        .filter((s) => !s.includes(\"stackTraceWarning\"))\n        .join(\"\\n\");\n};\nconst logger = {\n    warn: console.warn,\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/resolve-path.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/resolve-path.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolvedPath\": () => (/* binding */ resolvedPath)\n/* harmony export */ });\n/* harmony import */ var _extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extended-encode-uri-component */ \"./node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js\");\n\nconst resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {\n    if (input != null && input[memberName] !== undefined) {\n        const labelValue = labelValueProvider();\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: \" + memberName + \".\");\n        }\n        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel\n            ? labelValue\n                .split(\"/\")\n                .map((segment) => (0,_extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(segment))\n                .join(\"/\")\n            : (0,_extended_encode_uri_component__WEBPACK_IMPORTED_MODULE_0__.extendedEncodeURIComponent)(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: \" + memberName + \".\");\n    }\n    return resolvedPath;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/resolve-path.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"serializeFloat\": () => (/* binding */ serializeFloat)\n/* harmony export */ });\nconst serializeFloat = (value) => {\n    if (value !== value) {\n        return \"NaN\";\n    }\n    switch (value) {\n        case Infinity:\n            return \"Infinity\";\n        case -Infinity:\n            return \"-Infinity\";\n        default:\n            return value;\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/ser-utils.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/smithy-client/dist-es/split-every.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/smithy-client/dist-es/split-every.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"splitEvery\": () => (/* binding */ splitEvery)\n/* harmony export */ });\nfunction splitEvery(value, delimiter, numDelimiters) {\n    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n        throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n    }\n    const segments = value.split(delimiter);\n    if (numDelimiters === 1) {\n        return segments;\n    }\n    const compoundSegments = [];\n    let currentSegment = \"\";\n    for (let i = 0; i < segments.length; i++) {\n        if (currentSegment === \"\") {\n            currentSegment = segments[i];\n        }\n        else {\n            currentSegment += delimiter + segments[i];\n        }\n        if ((i + 1) % numDelimiters === 0) {\n            compoundSegments.push(currentSegment);\n            currentSegment = \"\";\n        }\n    }\n    if (currentSegment !== \"\") {\n        compoundSegments.push(currentSegment);\n    }\n    return compoundSegments;\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/smithy-client/dist-es/split-every.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/abort.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/abort.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/abort.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/auth.js":
/*!*****************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/auth.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/auth.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/client.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/client.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/client.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/command.js":
/*!********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/command.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/command.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/credentials.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/credentials.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/credentials.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/crypto.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/crypto.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/crypto.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/endpoint.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/endpoint.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EndpointURLScheme\": () => (/* binding */ EndpointURLScheme)\n/* harmony export */ });\nvar EndpointURLScheme;\n(function (EndpointURLScheme) {\n    EndpointURLScheme[\"HTTP\"] = \"http\";\n    EndpointURLScheme[\"HTTPS\"] = \"https\";\n})(EndpointURLScheme || (EndpointURLScheme = {}));\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/endpoint.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/eventStream.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/eventStream.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/eventStream.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/http.js":
/*!*****************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/http.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/http.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EndpointURLScheme\": () => (/* reexport safe */ _endpoint__WEBPACK_IMPORTED_MODULE_6__.EndpointURLScheme)\n/* harmony export */ });\n/* harmony import */ var _abort__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abort */ \"./node_modules/@aws-sdk/types/dist-es/abort.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth */ \"./node_modules/@aws-sdk/types/dist-es/auth.js\");\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./client */ \"./node_modules/@aws-sdk/types/dist-es/client.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./command */ \"./node_modules/@aws-sdk/types/dist-es/command.js\");\n/* harmony import */ var _credentials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./credentials */ \"./node_modules/@aws-sdk/types/dist-es/credentials.js\");\n/* harmony import */ var _crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./crypto */ \"./node_modules/@aws-sdk/types/dist-es/crypto.js\");\n/* harmony import */ var _endpoint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./endpoint */ \"./node_modules/@aws-sdk/types/dist-es/endpoint.js\");\n/* harmony import */ var _eventStream__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./eventStream */ \"./node_modules/@aws-sdk/types/dist-es/eventStream.js\");\n/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./http */ \"./node_modules/@aws-sdk/types/dist-es/http.js\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./logger */ \"./node_modules/@aws-sdk/types/dist-es/logger.js\");\n/* harmony import */ var _middleware__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./middleware */ \"./node_modules/@aws-sdk/types/dist-es/middleware.js\");\n/* harmony import */ var _pagination__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./pagination */ \"./node_modules/@aws-sdk/types/dist-es/pagination.js\");\n/* harmony import */ var _profile__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./profile */ \"./node_modules/@aws-sdk/types/dist-es/profile.js\");\n/* harmony import */ var _response__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./response */ \"./node_modules/@aws-sdk/types/dist-es/response.js\");\n/* harmony import */ var _serde__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./serde */ \"./node_modules/@aws-sdk/types/dist-es/serde.js\");\n/* harmony import */ var _shapes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shapes */ \"./node_modules/@aws-sdk/types/dist-es/shapes.js\");\n/* harmony import */ var _signature__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./signature */ \"./node_modules/@aws-sdk/types/dist-es/signature.js\");\n/* harmony import */ var _stream__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./stream */ \"./node_modules/@aws-sdk/types/dist-es/stream.js\");\n/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./token */ \"./node_modules/@aws-sdk/types/dist-es/token.js\");\n/* harmony import */ var _transfer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./transfer */ \"./node_modules/@aws-sdk/types/dist-es/transfer.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./util */ \"./node_modules/@aws-sdk/types/dist-es/util.js\");\n/* harmony import */ var _waiter__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./waiter */ \"./node_modules/@aws-sdk/types/dist-es/waiter.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/logger.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/logger.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/logger.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/middleware.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/middleware.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/middleware.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/pagination.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/pagination.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/pagination.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/profile.js":
/*!********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/profile.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/profile.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/response.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/response.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/response.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/serde.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/serde.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/serde.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/shapes.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/shapes.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/shapes.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/signature.js":
/*!**********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/signature.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/signature.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/stream.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/stream.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/stream.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/token.js":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/token.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/token.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/transfer.js":
/*!*********************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/transfer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/transfer.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/util.js":
/*!*****************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/util.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/util.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/types/dist-es/waiter.js":
/*!*******************************************************!*\
  !*** ./node_modules/@aws-sdk/types/dist-es/waiter.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/types/dist-es/waiter.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/url-parser/dist-es/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@aws-sdk/url-parser/dist-es/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseUrl\": () => (/* binding */ parseUrl)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_querystring_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/querystring-parser */ \"./node_modules/@aws-sdk/querystring-parser/dist-es/index.js\");\n\nconst parseUrl = (url) => {\n    if (typeof url === \"string\") {\n        return parseUrl(new URL(url));\n    }\n    const { hostname, pathname, port, protocol, search } = url;\n    let query;\n    if (search) {\n        query = (0,_aws_sdk_querystring_parser__WEBPACK_IMPORTED_MODULE_0__.parseQueryString)(search);\n    }\n    return {\n        hostname,\n        port: port ? parseInt(port) : undefined,\n        protocol,\n        path: pathname,\n        query,\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/url-parser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"build\": () => (/* binding */ build),\n/* harmony export */   \"parse\": () => (/* binding */ parse),\n/* harmony export */   \"validate\": () => (/* binding */ validate)\n/* harmony export */ });\nconst validate = (str) => typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\nconst parse = (arn) => {\n    const segments = arn.split(\":\");\n    if (segments.length < 6 || segments[0] !== \"arn\")\n        throw new Error(\"Malformed ARN\");\n    const [, partition, service, region, accountId, ...resource] = segments;\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resource: resource.join(\":\"),\n    };\n};\nconst build = (arnObject) => {\n    const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n    if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n        throw new Error(\"Input ARN object is invalid\");\n    }\n    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-arn-parser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-base64-browser/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-base64-browser/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fromBase64\": () => (/* binding */ fromBase64),\n/* harmony export */   \"toBase64\": () => (/* binding */ toBase64)\n/* harmony export */ });\nconst alphabetByEncoding = {};\nconst alphabetByValue = new Array(64);\nfor (let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n    const char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor (let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++) {\n    const char = String.fromCharCode(i + start);\n    const index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor (let i = 0; i < 10; i++) {\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    const char = i.toString(10);\n    const index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nconst bitsPerLetter = 6;\nconst bitsPerByte = 8;\nconst maxLetterValue = 0b111111;\nfunction fromBase64(input) {\n    let totalByteLength = (input.length / 4) * 3;\n    if (input.slice(-2) === \"==\") {\n        totalByteLength -= 2;\n    }\n    else if (input.slice(-1) === \"=\") {\n        totalByteLength--;\n    }\n    const out = new ArrayBuffer(totalByteLength);\n    const dataView = new DataView(out);\n    for (let i = 0; i < input.length; i += 4) {\n        let bits = 0;\n        let bitLength = 0;\n        for (let j = i, limit = i + 3; j <= limit; j++) {\n            if (input[j] !== \"=\") {\n                if (!(input[j] in alphabetByEncoding)) {\n                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\n                }\n                bits |= alphabetByEncoding[input[j]] << ((limit - j) * bitsPerLetter);\n                bitLength += bitsPerLetter;\n            }\n            else {\n                bits >>= bitsPerLetter;\n            }\n        }\n        const chunkOffset = (i / 4) * 3;\n        bits >>= bitLength % bitsPerByte;\n        const byteLength = Math.floor(bitLength / bitsPerByte);\n        for (let k = 0; k < byteLength; k++) {\n            const offset = (byteLength - k - 1) * bitsPerByte;\n            dataView.setUint8(chunkOffset + k, (bits & (255 << offset)) >> offset);\n        }\n    }\n    return new Uint8Array(out);\n}\nfunction toBase64(input) {\n    let str = \"\";\n    for (let i = 0; i < input.length; i += 3) {\n        let bits = 0;\n        let bitLength = 0;\n        for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n            bits |= input[j] << ((limit - j - 1) * bitsPerByte);\n            bitLength += bitsPerByte;\n        }\n        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for (let k = 1; k <= bitClusterCount; k++) {\n            const offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & (maxLetterValue << offset)) >> offset];\n        }\n        str += \"==\".slice(0, 4 - bitClusterCount);\n    }\n    return str;\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-base64-browser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-body-length-browser/dist-es/calculateBodyLength.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-body-length-browser/dist-es/calculateBodyLength.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateBodyLength\": () => (/* binding */ calculateBodyLength)\n/* harmony export */ });\nconst calculateBodyLength = (body) => {\n    if (typeof body === \"string\") {\n        let len = body.length;\n        for (let i = len - 1; i >= 0; i--) {\n            const code = body.charCodeAt(i);\n            if (code > 0x7f && code <= 0x7ff)\n                len++;\n            else if (code > 0x7ff && code <= 0xffff)\n                len += 2;\n            if (code >= 0xdc00 && code <= 0xdfff)\n                i--;\n        }\n        return len;\n    }\n    else if (typeof body.byteLength === \"number\") {\n        return body.byteLength;\n    }\n    else if (typeof body.size === \"number\") {\n        return body.size;\n    }\n    throw new Error(`Body Length computation failed for ${body}`);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-body-length-browser/dist-es/calculateBodyLength.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateBodyLength\": () => (/* reexport safe */ _calculateBodyLength__WEBPACK_IMPORTED_MODULE_0__.calculateBodyLength)\n/* harmony export */ });\n/* harmony import */ var _calculateBodyLength__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculateBodyLength */ \"./node_modules/@aws-sdk/util-body-length-browser/dist-es/calculateBodyLength.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-body-length-browser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SelectorType\": () => (/* binding */ SelectorType),\n/* harmony export */   \"booleanSelector\": () => (/* binding */ booleanSelector)\n/* harmony export */ });\nvar SelectorType;\n(function (SelectorType) {\n    SelectorType[\"ENV\"] = \"env\";\n    SelectorType[\"CONFIG\"] = \"shared config entry\";\n})(SelectorType || (SelectorType = {}));\nconst booleanSelector = (obj, key, type) => {\n    if (!(key in obj))\n        return undefined;\n    if (obj[key] === \"true\")\n        return true;\n    if (obj[key] === \"false\")\n        return false;\n    throw new Error(`Cannot load ${type} \"${key}\". Expected \"true\" or \"false\", got ${obj[key]}.`);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-config-provider/dist-es/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-config-provider/dist-es/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SelectorType\": () => (/* reexport safe */ _booleanSelector__WEBPACK_IMPORTED_MODULE_0__.SelectorType),\n/* harmony export */   \"booleanSelector\": () => (/* reexport safe */ _booleanSelector__WEBPACK_IMPORTED_MODULE_0__.booleanSelector)\n/* harmony export */ });\n/* harmony import */ var _booleanSelector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./booleanSelector */ \"./node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-config-provider/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/constants.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/constants.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULTS_MODE_OPTIONS\": () => (/* binding */ DEFAULTS_MODE_OPTIONS)\n/* harmony export */ });\nconst DEFAULTS_MODE_OPTIONS = [\"in-region\", \"cross-region\", \"mobile\", \"standard\", \"legacy\"];\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/constants.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveDefaultsModeConfig\": () => (/* reexport safe */ _resolveDefaultsModeConfig__WEBPACK_IMPORTED_MODULE_0__.resolveDefaultsModeConfig)\n/* harmony export */ });\n/* harmony import */ var _resolveDefaultsModeConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolveDefaultsModeConfig */ \"./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveDefaultsModeConfig\": () => (/* binding */ resolveDefaultsModeConfig)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/property-provider */ \"./node_modules/@aws-sdk/property-provider/dist-es/index.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bowser */ \"./node_modules/bowser/es5.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bowser__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/constants.js\");\n\n\n\nconst resolveDefaultsModeConfig = ({ defaultsMode, } = {}) => (0,_aws_sdk_property_provider__WEBPACK_IMPORTED_MODULE_0__.memoize)(async () => {\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n    switch (mode?.toLowerCase()) {\n        case \"auto\":\n            return Promise.resolve(isMobileBrowser() ? \"mobile\" : \"standard\");\n        case \"mobile\":\n        case \"in-region\":\n        case \"cross-region\":\n        case \"standard\":\n        case \"legacy\":\n            return Promise.resolve(mode?.toLocaleLowerCase());\n        case undefined:\n            return Promise.resolve(\"legacy\");\n        default:\n            throw new Error(`Invalid parameter for \"defaultsMode\", expect ${_constants__WEBPACK_IMPORTED_MODULE_2__.DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\n    }\n});\nconst isMobileBrowser = () => {\n    const parsedUA = typeof window !== \"undefined\" && window?.navigator?.userAgent\n        ? bowser__WEBPACK_IMPORTED_MODULE_1___default().parse(window.navigator.userAgent)\n        : undefined;\n    const platform = parsedUA?.platform?.type;\n    return platform === \"tablet\" || platform === \"mobile\";\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"debugId\": () => (/* binding */ debugId)\n/* harmony export */ });\nconst debugId = \"endpoints\";\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"debugId\": () => (/* reexport safe */ _debugId__WEBPACK_IMPORTED_MODULE_0__.debugId),\n/* harmony export */   \"toDebugString\": () => (/* reexport safe */ _toDebugString__WEBPACK_IMPORTED_MODULE_1__.toDebugString)\n/* harmony export */ });\n/* harmony import */ var _debugId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debugId */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js\");\n/* harmony import */ var _toDebugString__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toDebugString */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toDebugString\": () => (/* binding */ toDebugString)\n/* harmony export */ });\nfunction toDebugString(input) {\n    if (typeof input !== \"object\" || input == null) {\n        return input;\n    }\n    if (\"ref\" in input) {\n        return `$${toDebugString(input.ref)}`;\n    }\n    if (\"fn\" in input) {\n        return `${input.fn}(${(input.argv || []).map(toDebugString).join(\", \")})`;\n    }\n    return JSON.stringify(input, null, 2);\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EndpointError\": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.EndpointError),\n/* harmony export */   \"partition\": () => (/* reexport safe */ _lib_aws_partition__WEBPACK_IMPORTED_MODULE_0__.partition),\n/* harmony export */   \"resolveEndpoint\": () => (/* reexport safe */ _resolveEndpoint__WEBPACK_IMPORTED_MODULE_1__.resolveEndpoint)\n/* harmony export */ });\n/* harmony import */ var _lib_aws_partition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/aws/partition */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js\");\n/* harmony import */ var _resolveEndpoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolveEndpoint */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isVirtualHostableS3Bucket\": () => (/* reexport safe */ _isVirtualHostableS3Bucket__WEBPACK_IMPORTED_MODULE_0__.isVirtualHostableS3Bucket),\n/* harmony export */   \"parseArn\": () => (/* reexport safe */ _parseArn__WEBPACK_IMPORTED_MODULE_1__.parseArn),\n/* harmony export */   \"partition\": () => (/* reexport safe */ _partition__WEBPACK_IMPORTED_MODULE_2__.partition)\n/* harmony export */ });\n/* harmony import */ var _isVirtualHostableS3Bucket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isVirtualHostableS3Bucket */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js\");\n/* harmony import */ var _parseArn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parseArn */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js\");\n/* harmony import */ var _partition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./partition */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js\");\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isVirtualHostableS3Bucket\": () => (/* binding */ isVirtualHostableS3Bucket)\n/* harmony export */ });\n/* harmony import */ var _isIpAddress__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../isIpAddress */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js\");\n/* harmony import */ var _isValidHostLabel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../isValidHostLabel */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js\");\n\n\nconst isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {\n    if (allowSubDomains) {\n        for (const label of value.split(\".\")) {\n            if (!isVirtualHostableS3Bucket(label)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (!(0,_isValidHostLabel__WEBPACK_IMPORTED_MODULE_1__.isValidHostLabel)(value)) {\n        return false;\n    }\n    if (value.length < 3 || value.length > 63) {\n        return false;\n    }\n    if (value !== value.toLowerCase()) {\n        return false;\n    }\n    if ((0,_isIpAddress__WEBPACK_IMPORTED_MODULE_0__.isIpAddress)(value)) {\n        return false;\n    }\n    return true;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseArn\": () => (/* binding */ parseArn)\n/* harmony export */ });\nconst parseArn = (value) => {\n    const segments = value.split(\":\");\n    if (segments.length < 6)\n        return null;\n    const [arn, partition, service, region, accountId, ...resourceId] = segments;\n    if (arn !== \"arn\" || partition === \"\" || service === \"\" || resourceId[0] === \"\")\n        return null;\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resourceId: resourceId[0].includes(\"/\") ? resourceId[0].split(\"/\") : resourceId,\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"partition\": () => (/* binding */ partition)\n/* harmony export */ });\n/* harmony import */ var _partitions_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./partitions.json */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json\");\n\nconst { partitions } = _partitions_json__WEBPACK_IMPORTED_MODULE_0__;\nconst DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\nconst partition = (value) => {\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"booleanEquals\": () => (/* binding */ booleanEquals)\n/* harmony export */ });\nconst booleanEquals = (value1, value2) => value1 === value2;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAttr\": () => (/* binding */ getAttr)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _getAttrPathList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getAttrPathList */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js\");\n\n\nconst getAttr = (value, path) => (0,_getAttrPathList__WEBPACK_IMPORTED_MODULE_1__.getAttrPathList)(path).reduce((acc, index) => {\n    if (typeof acc !== \"object\") {\n        throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);\n    }\n    else if (Array.isArray(acc)) {\n        return acc[parseInt(index)];\n    }\n    return acc[index];\n}, value);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAttrPathList\": () => (/* binding */ getAttrPathList)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n\nconst getAttrPathList = (path) => {\n    const parts = path.split(\".\");\n    const pathList = [];\n    for (const part of parts) {\n        const squareBracketIndex = part.indexOf(\"[\");\n        if (squareBracketIndex !== -1) {\n            if (part.indexOf(\"]\") !== part.length - 1) {\n                throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Path: '${path}' does not end with ']'`);\n            }\n            const arrayIndex = part.slice(squareBracketIndex + 1, -1);\n            if (Number.isNaN(parseInt(arrayIndex))) {\n                throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);\n            }\n            if (squareBracketIndex !== 0) {\n                pathList.push(part.slice(0, squareBracketIndex));\n            }\n            pathList.push(arrayIndex);\n        }\n        else {\n            pathList.push(part);\n        }\n    }\n    return pathList;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"aws\": () => (/* reexport module object */ _aws__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"booleanEquals\": () => (/* reexport safe */ _booleanEquals__WEBPACK_IMPORTED_MODULE_1__.booleanEquals),\n/* harmony export */   \"getAttr\": () => (/* reexport safe */ _getAttr__WEBPACK_IMPORTED_MODULE_2__.getAttr),\n/* harmony export */   \"isSet\": () => (/* reexport safe */ _isSet__WEBPACK_IMPORTED_MODULE_3__.isSet),\n/* harmony export */   \"isValidHostLabel\": () => (/* reexport safe */ _isValidHostLabel__WEBPACK_IMPORTED_MODULE_4__.isValidHostLabel),\n/* harmony export */   \"not\": () => (/* reexport safe */ _not__WEBPACK_IMPORTED_MODULE_5__.not),\n/* harmony export */   \"parseURL\": () => (/* reexport safe */ _parseURL__WEBPACK_IMPORTED_MODULE_6__.parseURL),\n/* harmony export */   \"stringEquals\": () => (/* reexport safe */ _stringEquals__WEBPACK_IMPORTED_MODULE_7__.stringEquals),\n/* harmony export */   \"substring\": () => (/* reexport safe */ _substring__WEBPACK_IMPORTED_MODULE_8__.substring),\n/* harmony export */   \"uriEncode\": () => (/* reexport safe */ _uriEncode__WEBPACK_IMPORTED_MODULE_9__.uriEncode)\n/* harmony export */ });\n/* harmony import */ var _aws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aws */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js\");\n/* harmony import */ var _booleanEquals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./booleanEquals */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js\");\n/* harmony import */ var _getAttr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getAttr */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js\");\n/* harmony import */ var _isSet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isSet */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js\");\n/* harmony import */ var _isValidHostLabel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isValidHostLabel */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js\");\n/* harmony import */ var _not__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./not */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js\");\n/* harmony import */ var _parseURL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parseURL */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js\");\n/* harmony import */ var _stringEquals__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringEquals */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js\");\n/* harmony import */ var _substring__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./substring */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js\");\n/* harmony import */ var _uriEncode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./uriEncode */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isIpAddress\": () => (/* binding */ isIpAddress)\n/* harmony export */ });\nconst IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}$`);\nconst isIpAddress = (value) => IP_V4_REGEX.test(value) || (value.startsWith(\"[\") && value.endsWith(\"]\"));\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isSet\": () => (/* binding */ isSet)\n/* harmony export */ });\nconst isSet = (value) => value != null;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isValidHostLabel\": () => (/* binding */ isValidHostLabel)\n/* harmony export */ });\nconst VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);\nconst isValidHostLabel = (value, allowSubDomains = false) => {\n    if (!allowSubDomains) {\n        return VALID_HOST_LABEL_REGEX.test(value);\n    }\n    const labels = value.split(\".\");\n    for (const label of labels) {\n        if (!isValidHostLabel(label)) {\n            return false;\n        }\n    }\n    return true;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"not\": () => (/* binding */ not)\n/* harmony export */ });\nconst not = (value) => !value;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parseURL\": () => (/* binding */ parseURL)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/types */ \"./node_modules/@aws-sdk/types/dist-es/index.js\");\n/* harmony import */ var _isIpAddress__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isIpAddress */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js\");\n\n\nconst DEFAULT_PORTS = {\n    [_aws_sdk_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme.HTTP]: 80,\n    [_aws_sdk_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme.HTTPS]: 443,\n};\nconst parseURL = (value) => {\n    const whatwgURL = (() => {\n        try {\n            if (value instanceof URL) {\n                return value;\n            }\n            if (typeof value === \"object\" && \"hostname\" in value) {\n                const { hostname, port, protocol = \"\", path = \"\", query = {} } = value;\n                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n                url.search = Object.entries(query)\n                    .map(([k, v]) => `${k}=${v}`)\n                    .join(\"&\");\n                return url;\n            }\n            return new URL(value);\n        }\n        catch (error) {\n            return null;\n        }\n    })();\n    if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n    }\n    const urlString = whatwgURL.href;\n    const { host, hostname, pathname, protocol, search } = whatwgURL;\n    if (search) {\n        return null;\n    }\n    const scheme = protocol.slice(0, -1);\n    if (!Object.values(_aws_sdk_types__WEBPACK_IMPORTED_MODULE_0__.EndpointURLScheme).includes(scheme)) {\n        return null;\n    }\n    const isIp = (0,_isIpAddress__WEBPACK_IMPORTED_MODULE_1__.isIpAddress)(hostname);\n    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||\n        (typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));\n    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n    return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp,\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"stringEquals\": () => (/* binding */ stringEquals)\n/* harmony export */ });\nconst stringEquals = (value1, value2) => value1 === value2;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"substring\": () => (/* binding */ substring)\n/* harmony export */ });\nconst substring = (input, start, stop, reverse) => {\n    if (start >= stop || input.length < stop) {\n        return null;\n    }\n    if (!reverse) {\n        return input.substring(start, stop);\n    }\n    return input.substring(input.length - stop, input.length - start);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"uriEncode\": () => (/* binding */ uriEncode)\n/* harmony export */ });\nconst uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"resolveEndpoint\": () => (/* binding */ resolveEndpoint)\n/* harmony export */ });\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js\");\n\n\n\nconst resolveEndpoint = (ruleSetObject, options) => {\n    const { endpointParams, logger } = options;\n    const { parameters, rules } = ruleSetObject;\n    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `Initial EndpointParams: ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(endpointParams)}`);\n    const paramsWithDefault = Object.entries(parameters)\n        .filter(([, v]) => v.default != null)\n        .map(([k, v]) => [k, v.default]);\n    if (paramsWithDefault.length > 0) {\n        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {\n            endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;\n        }\n    }\n    const requiredParams = Object.entries(parameters)\n        .filter(([, v]) => v.required)\n        .map(([k]) => k);\n    for (const requiredParam of requiredParams) {\n        if (endpointParams[requiredParam] == null) {\n            throw new _types__WEBPACK_IMPORTED_MODULE_1__.EndpointError(`Missing required parameter: '${requiredParam}'`);\n        }\n    }\n    const endpoint = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });\n    if (options.endpointParams?.Endpoint) {\n        try {\n            const givenEndpoint = new URL(options.endpointParams.Endpoint);\n            const { protocol, port } = givenEndpoint;\n            endpoint.url.protocol = protocol;\n            endpoint.url.port = port;\n        }\n        catch (e) {\n        }\n    }\n    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `Resolved endpoint: ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(endpoint)}`);\n    return endpoint;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EndpointError\": () => (/* binding */ EndpointError)\n/* harmony export */ });\nclass EndpointError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"EndpointError\";\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EndpointError\": () => (/* reexport safe */ _EndpointError__WEBPACK_IMPORTED_MODULE_0__.EndpointError)\n/* harmony export */ });\n/* harmony import */ var _EndpointError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EndpointError */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js\");\n/* harmony import */ var _EndpointRuleObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EndpointRuleObject */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js\");\n/* harmony import */ var _ErrorRuleObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ErrorRuleObject */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js\");\n/* harmony import */ var _RuleSetObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RuleSetObject */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js\");\n/* harmony import */ var _TreeRuleObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TreeRuleObject */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js\");\n/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shared */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"callFunction\": () => (/* binding */ callFunction)\n/* harmony export */ });\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js\");\n/* harmony import */ var _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateExpression */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js\");\n\n\nconst callFunction = ({ fn, argv }, options) => {\n    const evaluatedArgs = argv.map((arg) => [\"boolean\", \"number\"].includes(typeof arg) ? arg : (0,_evaluateExpression__WEBPACK_IMPORTED_MODULE_1__.evaluateExpression)(arg, \"arg\", options));\n    return fn.split(\".\").reduce((acc, key) => acc[key], _lib__WEBPACK_IMPORTED_MODULE_0__)(...evaluatedArgs);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateCondition\": () => (/* binding */ evaluateCondition)\n/* harmony export */ });\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _callFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./callFunction */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js\");\n\n\n\nconst evaluateCondition = ({ assign, ...fnArgs }, options) => {\n    if (assign && assign in options.referenceRecord) {\n        throw new _types__WEBPACK_IMPORTED_MODULE_1__.EndpointError(`'${assign}' is already defined in Reference Record.`);\n    }\n    const value = (0,_callFunction__WEBPACK_IMPORTED_MODULE_2__.callFunction)(fnArgs, options);\n    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `evaluateCondition: ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(fnArgs)} = ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(value)}`);\n    return {\n        result: value === \"\" ? true : !!value,\n        ...(assign != null && { toAssign: { name: assign, value } }),\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateConditions\": () => (/* binding */ evaluateConditions)\n/* harmony export */ });\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js\");\n/* harmony import */ var _evaluateCondition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateCondition */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js\");\n\n\nconst evaluateConditions = (conditions = [], options) => {\n    const conditionsReferenceRecord = {};\n    for (const condition of conditions) {\n        const { result, toAssign } = (0,_evaluateCondition__WEBPACK_IMPORTED_MODULE_1__.evaluateCondition)(condition, {\n            ...options,\n            referenceRecord: {\n                ...options.referenceRecord,\n                ...conditionsReferenceRecord,\n            },\n        });\n        if (!result) {\n            return { result };\n        }\n        if (toAssign) {\n            conditionsReferenceRecord[toAssign.name] = toAssign.value;\n            options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `assign: ${toAssign.name} := ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(toAssign.value)}`);\n        }\n    }\n    return { result: true, referenceRecord: conditionsReferenceRecord };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateEndpointRule\": () => (/* binding */ evaluateEndpointRule)\n/* harmony export */ });\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/debug/index.js\");\n/* harmony import */ var _evaluateConditions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateConditions */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js\");\n/* harmony import */ var _getEndpointHeaders__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getEndpointHeaders */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js\");\n/* harmony import */ var _getEndpointProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getEndpointProperties */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js\");\n/* harmony import */ var _getEndpointUrl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getEndpointUrl */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js\");\n\n\n\n\n\nconst evaluateEndpointRule = (endpointRule, options) => {\n    const { conditions, endpoint } = endpointRule;\n    const { result, referenceRecord } = (0,_evaluateConditions__WEBPACK_IMPORTED_MODULE_1__.evaluateConditions)(conditions, options);\n    if (!result) {\n        return;\n    }\n    const endpointRuleOptions = {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    };\n    const { url, properties, headers } = endpoint;\n    options.logger?.debug?.(_debug__WEBPACK_IMPORTED_MODULE_0__.debugId, `Resolving endpoint from template: ${(0,_debug__WEBPACK_IMPORTED_MODULE_0__.toDebugString)(endpoint)}`);\n    return {\n        ...(headers != undefined && {\n            headers: (0,_getEndpointHeaders__WEBPACK_IMPORTED_MODULE_2__.getEndpointHeaders)(headers, endpointRuleOptions),\n        }),\n        ...(properties != undefined && {\n            properties: (0,_getEndpointProperties__WEBPACK_IMPORTED_MODULE_3__.getEndpointProperties)(properties, endpointRuleOptions),\n        }),\n        url: (0,_getEndpointUrl__WEBPACK_IMPORTED_MODULE_4__.getEndpointUrl)(url, endpointRuleOptions),\n    };\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateErrorRule\": () => (/* binding */ evaluateErrorRule)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _evaluateConditions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateConditions */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js\");\n/* harmony import */ var _evaluateExpression__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evaluateExpression */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js\");\n\n\n\nconst evaluateErrorRule = (errorRule, options) => {\n    const { conditions, error } = errorRule;\n    const { result, referenceRecord } = (0,_evaluateConditions__WEBPACK_IMPORTED_MODULE_1__.evaluateConditions)(conditions, options);\n    if (!result) {\n        return;\n    }\n    throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError((0,_evaluateExpression__WEBPACK_IMPORTED_MODULE_2__.evaluateExpression)(error, \"Error\", {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    }));\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateExpression\": () => (/* binding */ evaluateExpression)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _callFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./callFunction */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js\");\n/* harmony import */ var _evaluateTemplate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evaluateTemplate */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js\");\n/* harmony import */ var _getReferenceValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getReferenceValue */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js\");\n\n\n\n\nconst evaluateExpression = (obj, keyName, options) => {\n    if (typeof obj === \"string\") {\n        return (0,_evaluateTemplate__WEBPACK_IMPORTED_MODULE_2__.evaluateTemplate)(obj, options);\n    }\n    else if (obj[\"fn\"]) {\n        return (0,_callFunction__WEBPACK_IMPORTED_MODULE_1__.callFunction)(obj, options);\n    }\n    else if (obj[\"ref\"]) {\n        return (0,_getReferenceValue__WEBPACK_IMPORTED_MODULE_3__.getReferenceValue)(obj, options);\n    }\n    throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateRules\": () => (/* binding */ evaluateRules)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _evaluateEndpointRule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateEndpointRule */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js\");\n/* harmony import */ var _evaluateErrorRule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evaluateErrorRule */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js\");\n/* harmony import */ var _evaluateTreeRule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./evaluateTreeRule */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js\");\n\n\n\n\nconst evaluateRules = (rules, options) => {\n    for (const rule of rules) {\n        if (rule.type === \"endpoint\") {\n            const endpointOrUndefined = (0,_evaluateEndpointRule__WEBPACK_IMPORTED_MODULE_1__.evaluateEndpointRule)(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        }\n        else if (rule.type === \"error\") {\n            (0,_evaluateErrorRule__WEBPACK_IMPORTED_MODULE_2__.evaluateErrorRule)(rule, options);\n        }\n        else if (rule.type === \"tree\") {\n            const endpointOrUndefined = (0,_evaluateTreeRule__WEBPACK_IMPORTED_MODULE_3__.evaluateTreeRule)(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        }\n        else {\n            throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Unknown endpoint rule: ${rule}`);\n        }\n    }\n    throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Rules evaluation failed`);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateTemplate\": () => (/* binding */ evaluateTemplate)\n/* harmony export */ });\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js\");\n\nconst ATTR_SHORTHAND_REGEX = new RegExp(\"\\\\${([\\\\w]+)#([\\\\w]+)}\", \"g\");\nconst evaluateTemplate = (template, options) => {\n    const templateToEvaluate = template\n        .replace(new RegExp(`\\{([^{}]+)\\}`, \"g\"), \"${$1}\")\n        .replace(new RegExp(`\\{\\\\$\\{([^{}]+)\\}\\}`, \"g\"), \"{$1}\");\n    const templateContext = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n    };\n    const attrShortHandList = templateToEvaluate.match(ATTR_SHORTHAND_REGEX) || [];\n    const attrShortHandMap = attrShortHandList.reduce((acc, attrShortHand) => {\n        const indexOfHash = attrShortHand.indexOf(\"#\");\n        const refName = attrShortHand.substring(2, indexOfHash);\n        const attrName = attrShortHand.substring(indexOfHash + 1, attrShortHand.length - 1);\n        acc[attrShortHand] = (0,_lib__WEBPACK_IMPORTED_MODULE_0__.getAttr)(templateContext[refName], attrName);\n        return acc;\n    }, {});\n    const templateWithAttr = Object.entries(attrShortHandMap).reduce((acc, [shortHand, value]) => acc.replace(shortHand, value), templateToEvaluate);\n    const templateContextNames = Object.keys(templateContext);\n    const templateContextValues = Object.values(templateContext);\n    const templateWithTildeEscaped = templateWithAttr.replace(/\\`/g, \"\\\\`\");\n    return new Function(...templateContextNames, `return \\`${templateWithTildeEscaped}\\``)(...templateContextValues);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateTreeRule\": () => (/* binding */ evaluateTreeRule)\n/* harmony export */ });\n/* harmony import */ var _evaluateConditions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateConditions */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js\");\n/* harmony import */ var _evaluateRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateRules */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js\");\n\n\nconst evaluateTreeRule = (treeRule, options) => {\n    const { conditions, rules } = treeRule;\n    const { result, referenceRecord } = (0,_evaluateConditions__WEBPACK_IMPORTED_MODULE_0__.evaluateConditions)(conditions, options);\n    if (!result) {\n        return;\n    }\n    return (0,_evaluateRules__WEBPACK_IMPORTED_MODULE_1__.evaluateRules)(rules, {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    });\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEndpointHeaders\": () => (/* binding */ getEndpointHeaders)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateExpression */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js\");\n\n\nconst getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({\n    ...acc,\n    [headerKey]: headerVal.map((headerValEntry) => {\n        const processedExpr = (0,_evaluateExpression__WEBPACK_IMPORTED_MODULE_1__.evaluateExpression)(headerValEntry, \"Header value entry\", options);\n        if (typeof processedExpr !== \"string\") {\n            throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);\n        }\n        return processedExpr;\n    }),\n}), {});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEndpointProperties\": () => (/* binding */ getEndpointProperties)\n/* harmony export */ });\n/* harmony import */ var _getEndpointProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEndpointProperty */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js\");\n\nconst getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({\n    ...acc,\n    [propertyKey]: (0,_getEndpointProperty__WEBPACK_IMPORTED_MODULE_0__.getEndpointProperty)(propertyVal, options),\n}), {});\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEndpointProperty\": () => (/* binding */ getEndpointProperty)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _evaluateTemplate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateTemplate */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js\");\n/* harmony import */ var _getEndpointProperties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getEndpointProperties */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js\");\n\n\n\nconst getEndpointProperty = (property, options) => {\n    if (Array.isArray(property)) {\n        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));\n    }\n    switch (typeof property) {\n        case \"string\":\n            return (0,_evaluateTemplate__WEBPACK_IMPORTED_MODULE_1__.evaluateTemplate)(property, options);\n        case \"object\":\n            if (property === null) {\n                throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Unexpected endpoint property: ${property}`);\n            }\n            return (0,_getEndpointProperties__WEBPACK_IMPORTED_MODULE_2__.getEndpointProperties)(property, options);\n        case \"boolean\":\n            return property;\n        default:\n            throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Unexpected endpoint property type: ${typeof property}`);\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEndpointUrl\": () => (/* binding */ getEndpointUrl)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js\");\n/* harmony import */ var _evaluateExpression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evaluateExpression */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js\");\n\n\nconst getEndpointUrl = (endpointUrl, options) => {\n    const expression = (0,_evaluateExpression__WEBPACK_IMPORTED_MODULE_1__.evaluateExpression)(endpointUrl, \"Endpoint URL\", options);\n    if (typeof expression === \"string\") {\n        try {\n            return new URL(expression);\n        }\n        catch (error) {\n            console.error(`Failed to construct URL with ${expression}`, error);\n            throw error;\n        }\n    }\n    throw new _types__WEBPACK_IMPORTED_MODULE_0__.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getReferenceValue\": () => (/* binding */ getReferenceValue)\n/* harmony export */ });\nconst getReferenceValue = ({ ref }, options) => {\n    const referenceRecord = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n    };\n    return referenceRecord[ref];\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluateRules\": () => (/* reexport safe */ _evaluateRules__WEBPACK_IMPORTED_MODULE_0__.evaluateRules)\n/* harmony export */ });\n/* harmony import */ var _evaluateRules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./evaluateRules */ \"./node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/utils/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fromHex\": () => (/* binding */ fromHex),\n/* harmony export */   \"toHex\": () => (/* binding */ toHex)\n/* harmony export */ });\nconst SHORT_TO_HEX = {};\nconst HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n    let encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n    }\n    SHORT_TO_HEX[i] = encodedByte;\n    HEX_TO_SHORT[encodedByte] = i;\n}\nfunction fromHex(encoded) {\n    if (encoded.length % 2 !== 0) {\n        throw new Error(\"Hex encoded strings must have an even number length\");\n    }\n    const out = new Uint8Array(encoded.length / 2);\n    for (let i = 0; i < encoded.length; i += 2) {\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        }\n        else {\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n    }\n    return out;\n}\nfunction toHex(bytes) {\n    let out = \"\";\n    for (let i = 0; i < bytes.byteLength; i++) {\n        out += SHORT_TO_HEX[bytes[i]];\n    }\n    return out;\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-locate-window/dist-es/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-locate-window/dist-es/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"locateWindow\": () => (/* binding */ locateWindow)\n/* harmony export */ });\nconst fallbackWindow = {};\nfunction locateWindow() {\n    if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else if (typeof self !== \"undefined\") {\n        return self;\n    }\n    return fallbackWindow;\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-locate-window/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-middleware/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-middleware/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"normalizeProvider\": () => (/* reexport safe */ _normalizeProvider__WEBPACK_IMPORTED_MODULE_0__.normalizeProvider)\n/* harmony export */ });\n/* harmony import */ var _normalizeProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalizeProvider */ \"./node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js\");\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-middleware/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"normalizeProvider\": () => (/* binding */ normalizeProvider)\n/* harmony export */ });\nconst normalizeProvider = (input) => {\n    if (typeof input === \"function\")\n        return input;\n    const promisified = Promise.resolve(input);\n    return () => promisified;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-stream-browser/dist-es/getAwsChunkedEncodingStream.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-stream-browser/dist-es/getAwsChunkedEncodingStream.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAwsChunkedEncodingStream\": () => (/* binding */ getAwsChunkedEncodingStream)\n/* harmony export */ });\nconst getAwsChunkedEncodingStream = (readableStream, options) => {\n    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;\n    const checksumRequired = base64Encoder !== undefined &&\n        bodyLengthChecker !== undefined &&\n        checksumAlgorithmFn !== undefined &&\n        checksumLocationName !== undefined &&\n        streamHasher !== undefined;\n    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;\n    const reader = readableStream.getReader();\n    return new ReadableStream({\n        async pull(controller) {\n            const { value, done } = await reader.read();\n            if (done) {\n                controller.enqueue(`0\\r\\n`);\n                if (checksumRequired) {\n                    const checksum = base64Encoder(await digest);\n                    controller.enqueue(`${checksumLocationName}:${checksum}\\r\\n`);\n                    controller.enqueue(`\\r\\n`);\n                }\n                controller.close();\n            }\n            else {\n                controller.enqueue(`${(bodyLengthChecker(value) || 0).toString(16)}\\r\\n${value}\\r\\n`);\n            }\n        },\n    });\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-stream-browser/dist-es/getAwsChunkedEncodingStream.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-stream-browser/dist-es/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-stream-browser/dist-es/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAwsChunkedEncodingStream\": () => (/* reexport safe */ _getAwsChunkedEncodingStream__WEBPACK_IMPORTED_MODULE_0__.getAwsChunkedEncodingStream),\n/* harmony export */   \"sdkStreamMixin\": () => (/* reexport safe */ _sdk_stream_mixin__WEBPACK_IMPORTED_MODULE_1__.sdkStreamMixin)\n/* harmony export */ });\n/* harmony import */ var _getAwsChunkedEncodingStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getAwsChunkedEncodingStream */ \"./node_modules/@aws-sdk/util-stream-browser/dist-es/getAwsChunkedEncodingStream.js\");\n/* harmony import */ var _sdk_stream_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdk-stream-mixin */ \"./node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-stream-browser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sdkStreamMixin\": () => (/* binding */ sdkStreamMixin)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/fetch-http-handler */ \"./node_modules/@aws-sdk/fetch-http-handler/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/util-base64-browser */ \"./node_modules/@aws-sdk/util-base64-browser/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/util-hex-encoding */ \"./node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js\");\n/* harmony import */ var _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js\");\n\n\n\n\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nconst sdkStreamMixin = (stream) => {\n    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {\n        const name = stream?.__proto__?.constructor?.name || stream;\n        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);\n    }\n    let transformed = false;\n    const transformToByteArray = async () => {\n        if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await (0,_aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_0__.streamCollector)(stream);\n    };\n    const blobToWebStream = (blob) => {\n        if (typeof blob.stream !== \"function\") {\n            throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" +\n                \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n        }\n        return blob.stream();\n    };\n    return Object.assign(stream, {\n        transformToByteArray: transformToByteArray,\n        transformToString: async (encoding) => {\n            const buf = await transformToByteArray();\n            if (encoding === \"base64\") {\n                return (0,_aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_1__.toBase64)(buf);\n            }\n            else if (encoding === \"hex\") {\n                return (0,_aws_sdk_util_hex_encoding__WEBPACK_IMPORTED_MODULE_2__.toHex)(buf);\n            }\n            else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n                return (0,_aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_3__.toUtf8)(buf);\n            }\n            else if (typeof TextDecoder === \"function\") {\n                return new TextDecoder(encoding).decode(buf);\n            }\n            else {\n                throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n            }\n        },\n        transformToWebStream: () => {\n            if (transformed) {\n                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n            transformed = true;\n            if (isBlobInstance(stream)) {\n                return blobToWebStream(stream);\n            }\n            else if (isReadableStreamInstance(stream)) {\n                return stream;\n            }\n            else {\n                throw new Error(`Cannot transform payload to web stream, got ${stream}`);\n            }\n        },\n    });\n};\nconst isBlobInstance = (stream) => typeof Blob === \"function\" && stream instanceof Blob;\nconst isReadableStreamInstance = (stream) => typeof ReadableStream === \"function\" && stream instanceof ReadableStream;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri-path.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri-path.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"escapeUriPath\": () => (/* binding */ escapeUriPath)\n/* harmony export */ });\n/* harmony import */ var _escape_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-uri */ \"./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js\");\n\nconst escapeUriPath = (uri) => uri.split(\"/\").map(_escape_uri__WEBPACK_IMPORTED_MODULE_0__.escapeUri).join(\"/\");\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri-path.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"escapeUri\": () => (/* binding */ escapeUri)\n/* harmony export */ });\nconst escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);\nconst hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"escapeUri\": () => (/* reexport safe */ _escape_uri__WEBPACK_IMPORTED_MODULE_0__.escapeUri),\n/* harmony export */   \"escapeUriPath\": () => (/* reexport safe */ _escape_uri_path__WEBPACK_IMPORTED_MODULE_1__.escapeUriPath)\n/* harmony export */ });\n/* harmony import */ var _escape_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-uri */ \"./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js\");\n/* harmony import */ var _escape_uri_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./escape-uri-path */ \"./node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri-path.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-uri-escape/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"defaultUserAgent\": () => (/* binding */ defaultUserAgent)\n/* harmony export */ });\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bowser */ \"./node_modules/bowser/es5.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bowser__WEBPACK_IMPORTED_MODULE_0__);\n\nconst defaultUserAgent = ({ serviceId, clientVersion }) => async () => {\n    const parsedUA = typeof window !== \"undefined\" && window?.navigator?.userAgent\n        ? bowser__WEBPACK_IMPORTED_MODULE_0___default().parse(window.navigator.userAgent)\n        : undefined;\n    const sections = [\n        [\"aws-sdk-js\", clientVersion],\n        [`os/${parsedUA?.os?.name || \"other\"}`, parsedUA?.os?.version],\n        [\"lang/js\"],\n        [\"md/browser\", `${parsedUA?.browser?.name ?? \"unknown\"}_${parsedUA?.browser?.version ?? \"unknown\"}`],\n    ];\n    if (serviceId) {\n        sections.push([`api/${serviceId}`, clientVersion]);\n    }\n    return sections;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fromUtf8\": () => (/* binding */ fromUtf8),\n/* harmony export */   \"toUtf8\": () => (/* binding */ toUtf8)\n/* harmony export */ });\n/* harmony import */ var _pureJs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pureJs */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js\");\n/* harmony import */ var _whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./whatwgEncodingApi */ \"./node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js\");\n\n\nconst fromUtf8 = (input) => typeof TextEncoder === \"function\" ? (0,_whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(input) : (0,_pureJs__WEBPACK_IMPORTED_MODULE_0__.fromUtf8)(input);\nconst toUtf8 = (input) => typeof TextDecoder === \"function\" ? (0,_whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(input) : (0,_pureJs__WEBPACK_IMPORTED_MODULE_0__.toUtf8)(input);\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fromUtf8\": () => (/* binding */ fromUtf8),\n/* harmony export */   \"toUtf8\": () => (/* binding */ toUtf8)\n/* harmony export */ });\nconst fromUtf8 = (input) => {\n    const bytes = [];\n    for (let i = 0, len = input.length; i < len; i++) {\n        const value = input.charCodeAt(i);\n        if (value < 0x80) {\n            bytes.push(value);\n        }\n        else if (value < 0x800) {\n            bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\n        }\n        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n            const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\n            bytes.push((surrogatePair >> 18) | 0b11110000, ((surrogatePair >> 12) & 0b111111) | 0b10000000, ((surrogatePair >> 6) & 0b111111) | 0b10000000, (surrogatePair & 0b111111) | 0b10000000);\n        }\n        else {\n            bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);\n        }\n    }\n    return Uint8Array.from(bytes);\n};\nconst toUtf8 = (input) => {\n    let decoded = \"\";\n    for (let i = 0, len = input.length; i < len; i++) {\n        const byte = input[i];\n        if (byte < 0x80) {\n            decoded += String.fromCharCode(byte);\n        }\n        else if (0b11000000 <= byte && byte < 0b11100000) {\n            const nextByte = input[++i];\n            decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));\n        }\n        else if (0b11110000 <= byte && byte < 0b101101101) {\n            const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n            const encoded = \"%\" + surrogatePair.map((byteValue) => byteValue.toString(16)).join(\"%\");\n            decoded += decodeURIComponent(encoded);\n        }\n        else {\n            decoded += String.fromCharCode(((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111));\n        }\n    }\n    return decoded;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fromUtf8\": () => (/* binding */ fromUtf8),\n/* harmony export */   \"toUtf8\": () => (/* binding */ toUtf8)\n/* harmony export */ });\nfunction fromUtf8(input) {\n    return new TextEncoder().encode(input);\n}\nfunction toUtf8(input) {\n    return new TextDecoder(\"utf-8\").decode(input);\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/createWaiter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/createWaiter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createWaiter\": () => (/* binding */ createWaiter)\n/* harmony export */ });\n/* harmony import */ var _poller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./poller */ \"./node_modules/@aws-sdk/util-waiter/dist-es/poller.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./node_modules/@aws-sdk/util-waiter/dist-es/utils/index.js\");\n/* harmony import */ var _waiter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./waiter */ \"./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js\");\n\n\n\nconst abortTimeout = async (abortSignal) => {\n    return new Promise((resolve) => {\n        abortSignal.onabort = () => resolve({ state: _waiter__WEBPACK_IMPORTED_MODULE_2__.WaiterState.ABORTED });\n    });\n};\nconst createWaiter = async (options, input, acceptorChecks) => {\n    const params = {\n        ..._waiter__WEBPACK_IMPORTED_MODULE_2__.waiterServiceDefaults,\n        ...options,\n    };\n    (0,_utils__WEBPACK_IMPORTED_MODULE_1__.validateWaiterOptions)(params);\n    const exitConditions = [(0,_poller__WEBPACK_IMPORTED_MODULE_0__.runPolling)(params, input, acceptorChecks)];\n    if (options.abortController) {\n        exitConditions.push(abortTimeout(options.abortController.signal));\n    }\n    if (options.abortSignal) {\n        exitConditions.push(abortTimeout(options.abortSignal));\n    }\n    return Promise.race(exitConditions);\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-waiter/dist-es/createWaiter.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WaiterState\": () => (/* reexport safe */ _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState),\n/* harmony export */   \"checkExceptions\": () => (/* reexport safe */ _waiter__WEBPACK_IMPORTED_MODULE_1__.checkExceptions),\n/* harmony export */   \"createWaiter\": () => (/* reexport safe */ _createWaiter__WEBPACK_IMPORTED_MODULE_0__.createWaiter),\n/* harmony export */   \"waiterServiceDefaults\": () => (/* reexport safe */ _waiter__WEBPACK_IMPORTED_MODULE_1__.waiterServiceDefaults)\n/* harmony export */ });\n/* harmony import */ var _createWaiter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createWaiter */ \"./node_modules/@aws-sdk/util-waiter/dist-es/createWaiter.js\");\n/* harmony import */ var _waiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./waiter */ \"./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-waiter/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/poller.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/poller.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"runPolling\": () => (/* binding */ runPolling)\n/* harmony export */ });\n/* harmony import */ var _utils_sleep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/sleep */ \"./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js\");\n/* harmony import */ var _waiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./waiter */ \"./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js\");\n\n\nconst exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {\n    if (attempt > attemptCeiling)\n        return maxDelay;\n    const delay = minDelay * 2 ** (attempt - 1);\n    return randomInRange(minDelay, delay);\n};\nconst randomInRange = (min, max) => min + Math.random() * (max - min);\nconst runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {\n    const { state, reason } = await acceptorChecks(client, input);\n    if (state !== _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState.RETRY) {\n        return { state, reason };\n    }\n    let currentAttempt = 1;\n    const waitUntil = Date.now() + maxWaitTime * 1000;\n    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n    while (true) {\n        if (abortController?.signal?.aborted || abortSignal?.aborted) {\n            return { state: _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState.ABORTED };\n        }\n        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);\n        if (Date.now() + delay * 1000 > waitUntil) {\n            return { state: _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState.TIMEOUT };\n        }\n        await (0,_utils_sleep__WEBPACK_IMPORTED_MODULE_0__.sleep)(delay);\n        const { state, reason } = await acceptorChecks(client, input);\n        if (state !== _waiter__WEBPACK_IMPORTED_MODULE_1__.WaiterState.RETRY) {\n            return { state, reason };\n        }\n        currentAttempt += 1;\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-waiter/dist-es/poller.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/utils/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sleep\": () => (/* reexport safe */ _sleep__WEBPACK_IMPORTED_MODULE_0__.sleep),\n/* harmony export */   \"validateWaiterOptions\": () => (/* reexport safe */ _validate__WEBPACK_IMPORTED_MODULE_1__.validateWaiterOptions)\n/* harmony export */ });\n/* harmony import */ var _sleep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sleep */ \"./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js\");\n/* harmony import */ var _validate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validate */ \"./node_modules/@aws-sdk/util-waiter/dist-es/utils/validate.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-waiter/dist-es/utils/index.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js":
/*!******************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sleep\": () => (/* binding */ sleep)\n/* harmony export */ });\nconst sleep = (seconds) => {\n    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-waiter/dist-es/utils/sleep.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/utils/validate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/utils/validate.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"validateWaiterOptions\": () => (/* binding */ validateWaiterOptions)\n/* harmony export */ });\nconst validateWaiterOptions = (options) => {\n    if (options.maxWaitTime < 1) {\n        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);\n    }\n    else if (options.minDelay < 1) {\n        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);\n    }\n    else if (options.maxDelay < 1) {\n        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);\n    }\n    else if (options.maxWaitTime <= options.minDelay) {\n        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);\n    }\n    else if (options.maxDelay < options.minDelay) {\n        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);\n    }\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-waiter/dist-es/utils/validate.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js":
/*!*************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WaiterState\": () => (/* binding */ WaiterState),\n/* harmony export */   \"checkExceptions\": () => (/* binding */ checkExceptions),\n/* harmony export */   \"waiterServiceDefaults\": () => (/* binding */ waiterServiceDefaults)\n/* harmony export */ });\nconst waiterServiceDefaults = {\n    minDelay: 2,\n    maxDelay: 120,\n};\nvar WaiterState;\n(function (WaiterState) {\n    WaiterState[\"ABORTED\"] = \"ABORTED\";\n    WaiterState[\"FAILURE\"] = \"FAILURE\";\n    WaiterState[\"SUCCESS\"] = \"SUCCESS\";\n    WaiterState[\"RETRY\"] = \"RETRY\";\n    WaiterState[\"TIMEOUT\"] = \"TIMEOUT\";\n})(WaiterState || (WaiterState = {}));\nconst checkExceptions = (result) => {\n    if (result.state === WaiterState.ABORTED) {\n        const abortError = new Error(`${JSON.stringify({\n            ...result,\n            reason: \"Request was aborted\",\n        })}`);\n        abortError.name = \"AbortError\";\n        throw abortError;\n    }\n    else if (result.state === WaiterState.TIMEOUT) {\n        const timeoutError = new Error(`${JSON.stringify({\n            ...result,\n            reason: \"Waiter has timed out\",\n        })}`);\n        timeoutError.name = \"TimeoutError\";\n        throw timeoutError;\n    }\n    else if (result.state !== WaiterState.SUCCESS) {\n        throw new Error(`${JSON.stringify({ result })}`);\n    }\n    return result;\n};\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-waiter/dist-es/waiter.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XmlNode\": () => (/* binding */ XmlNode)\n/* harmony export */ });\n/* harmony import */ var _escape_attribute__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-attribute */ \"./node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js\");\n/* harmony import */ var _XmlText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XmlText */ \"./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js\");\n\n\nclass XmlNode {\n    constructor(name, children = []) {\n        this.name = name;\n        this.children = children;\n        this.attributes = {};\n    }\n    static of(name, childText, withName) {\n        const node = new XmlNode(name);\n        if (childText !== undefined) {\n            node.addChildNode(new _XmlText__WEBPACK_IMPORTED_MODULE_1__.XmlText(childText));\n        }\n        if (withName !== undefined) {\n            node.withName(withName);\n        }\n        return node;\n    }\n    withName(name) {\n        this.name = name;\n        return this;\n    }\n    addAttribute(name, value) {\n        this.attributes[name] = value;\n        return this;\n    }\n    addChildNode(child) {\n        this.children.push(child);\n        return this;\n    }\n    removeAttribute(name) {\n        delete this.attributes[name];\n        return this;\n    }\n    toString() {\n        const hasChildren = Boolean(this.children.length);\n        let xmlText = `<${this.name}`;\n        const attributes = this.attributes;\n        for (const attributeName of Object.keys(attributes)) {\n            const attribute = attributes[attributeName];\n            if (typeof attribute !== \"undefined\" && attribute !== null) {\n                xmlText += ` ${attributeName}=\"${(0,_escape_attribute__WEBPACK_IMPORTED_MODULE_0__.escapeAttribute)(\"\" + attribute)}\"`;\n            }\n        }\n        return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js":
/*!**************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XmlText\": () => (/* binding */ XmlText)\n/* harmony export */ });\n/* harmony import */ var _escape_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./escape-element */ \"./node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js\");\n\nclass XmlText {\n    constructor(value) {\n        this.value = value;\n    }\n    toString() {\n        return (0,_escape_element__WEBPACK_IMPORTED_MODULE_0__.escapeElement)(\"\" + this.value);\n    }\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"escapeAttribute\": () => (/* binding */ escapeAttribute)\n/* harmony export */ });\nfunction escapeAttribute(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/xml-builder/dist-es/escape-attribute.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"escapeElement\": () => (/* binding */ escapeElement)\n/* harmony export */ });\nfunction escapeElement(value) {\n    return value\n        .replace(/&/g, \"&amp;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&apos;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\r/g, \"&#x0D;\")\n        .replace(/\\n/g, \"&#x0A;\")\n        .replace(/\\u0085/g, \"&#x85;\")\n        .replace(/\\u2028/, \"&#x2028;\");\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/xml-builder/dist-es/escape-element.js?");

/***/ }),

/***/ "./node_modules/@aws-sdk/xml-builder/dist-es/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@aws-sdk/xml-builder/dist-es/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"XmlNode\": () => (/* reexport safe */ _XmlNode__WEBPACK_IMPORTED_MODULE_0__.XmlNode),\n/* harmony export */   \"XmlText\": () => (/* reexport safe */ _XmlText__WEBPACK_IMPORTED_MODULE_1__.XmlText)\n/* harmony export */ });\n/* harmony import */ var _XmlNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./XmlNode */ \"./node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js\");\n/* harmony import */ var _XmlText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./XmlText */ \"./node_modules/@aws-sdk/xml-builder/dist-es/XmlText.js\");\n\n\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/xml-builder/dist-es/index.js?");

/***/ }),

/***/ "./node_modules/bowser/es5.js":
/*!************************************!*\
  !*** ./node_modules/bowser/es5.js ***!
  \************************************/
/***/ (function(module) {

eval("!function(e,t){ true?module.exports=t():0}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(\".0\");return e.map(n.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1}else if(u[0][a]<u[1][a])return-1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];\"object\"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t]}))};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||\"\"},e}();t.default=i,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Electron:\"electron\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",electron:\"Electron\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];\"string\"==typeof a?(i[t]=a,s+=1):\"object\"==typeof a&&(r[t]=a,n+=1)})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if(\"string\"==typeof i)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(n=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=i.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=i.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=i.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=i.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=i.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\\/\\d+(?:.?_?\\d+)+/i],describe:function(e){var t={name:\"Opera Touch\"},r=i.default.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=i.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=i.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=i.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=i.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=i.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=i.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=i.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=i.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=i.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=i.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=i.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=i.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=i.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=i.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:\"Electron\"},r=i.default.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:\"Miui\"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=i.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=i.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=i.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||i.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default}})}));\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/bowser/es5.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/fxp.js":
/*!*************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/fxp.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst validator = __webpack_require__(/*! ./validator */ \"./node_modules/fast-xml-parser/src/validator.js\");\nconst XMLParser = __webpack_require__(/*! ./xmlparser/XMLParser */ \"./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\");\nconst XMLBuilder = __webpack_require__(/*! ./xmlbuilder/json2xml */ \"./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\");\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/fxp.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/util.js":
/*!**************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/util.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/util.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/validator.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/validator.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst util = __webpack_require__(/*! ./util */ \"./node_modules/fast-xml-parser/src/util.js\");\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/validator.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = __webpack_require__(/*! ./orderedJs2Xml */ \"./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\");\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  transformTagName: false,\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.buildAttrPairStr = buildAttrPairStr;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction buildAttrPairStr(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  let tagEndExp = '</' + key + this.tagEndChar;\n  let piClosingChar = \"\";\n  \n  if(key[0] === \"?\") {\n    piClosingChar = \"?\";\n    tagEndExp = \"\";\n  }\n\n  if (attrStr && val.indexOf('<') === -1) {\n    return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n    return this.indentate(level) + `<!--${val}-->` + this.newLine;\n  }else {\n    return (\n      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n      val +\n      this.indentate(level) + tagEndExp    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n      if(this.options.suppressUnpairedNode){\n        return this.indentate(level) + '<' + key + this.tagEndChar;\n      }else{\n        return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n      }\n    } else{\n      return (\n        this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar  );\n    }\n\n  }\n}\n\nfunction replaceEntitiesValue(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else if (val !== '') { //empty\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options){\n    return arrToStr( jArray, options, \"\", 0);\n}\n\nfunction arrToStr(arr, options, jPath, level){\n    let xmlStr = \"\";\n\n    let indentation = \"\";\n    if(options.format && options.indentBy.length > 0){//TODO: this logic can be avoided for each call\n        indentation = EOL + \"\" + options.indentBy.repeat(level);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if(jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if(tagName === options.textNodeName){\n            let tagText = tagObj[tagName];\n            if(!isStopNode(newJPath, options)){\n                tagText = options.tagValueProcessor( tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            xmlStr += indentation + tagText;\n            continue;\n        }else if( tagName === options.cdataPropName){\n            xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            continue;\n        }else if( tagName === options.commentPropName){\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            continue;\n        }else if( tagName[0] === \"?\"){\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            continue;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        let tagStart =  indentation + `<${tagName}${attStr}`;\n        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);\n        if(options.unpairedTags.indexOf(tagName) !== -1){\n            if(options.suppressUnpairedNode)  xmlStr += tagStart + \">\"; \n            else xmlStr += tagStart + \"/>\"; \n        }else if( (!tagValue || tagValue.length === 0) && options.suppressEmptyNode){ \n            xmlStr += tagStart + \"/>\"; \n        }else{ \n            //TODO: node with only text value should not parse the text value in next line\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` ;\n        }\n    }\n    \n    return xmlStr;\n}\n\nfunction propName(obj){\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if(key !== \":@\") return key;\n    }\n  }\n\nfunction attr_to_str(attrMap, options){\n    let attrStr = \"\";\n    if(attrMap && !options.ignoreAttributes){\n        for (let attr in attrMap){\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if(attrVal === true && options.suppressBooleanAttributes){\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            }else{\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options){\n    jPath = jPath.substr(0,jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for(let index in options.stopNodes){\n        if(options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\"+tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options){\n    if(textValue && textValue.length > 0 && options.processEntities){\n      for (let i=0; i< options.entities.length; i++) {\n        const entity = options.entities[i];\n        textValue = textValue.replace(entity.regex, entity.val);\n      }\n    }\n    return textValue;\n  }\nmodule.exports = toXml;\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js":
/*!*********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'A' &&\n                    xmlData[i+3] === 'T' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'L' &&\n                    xmlData[i+6] === 'I' &&\n                    xmlData[i+7] === 'S' &&\n                    xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'N' &&\n                    xmlData[i+3] === 'O' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'A' &&\n                    xmlData[i+6] === 'T' &&\n                    xmlData[i+7] === 'I' &&\n                    xmlData[i+8] === 'O' &&\n                    xmlData[i+9] === 'N'\n                ){\n                    //Not supported\n                    i += 9;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js":
/*!************************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n///@ts-check\n\nconst util = __webpack_require__(/*! ../util */ \"./node_modules/fast-xml-parser/src/util.js\");\nconst xmlNode = __webpack_require__(/*! ./xmlNode */ \"./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\");\nconst readDocType = __webpack_require__(/*! ./DocTypeReader */ \"./node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\");\nconst toNumber = __webpack_require__(/*! strnum */ \"./node_modules/strnum/strnum.js\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      const aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this. options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { buildOptions} = __webpack_require__(/*! ./OptionsBuilder */ \"./node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\");\nconst OrderedObjParser = __webpack_require__(/*! ./OrderedObjParser */ \"./node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\");\nconst { prettify} = __webpack_require__(/*! ./node2json */ \"./node_modules/fast-xml-parser/src/xmlparser/node2json.js\");\nconst validator = __webpack_require__(/*! ../validator */ \"./node_modules/fast-xml-parser/src/validator.js\");\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/xmlparser/XMLParser.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/node2json.js":
/*!*****************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/node2json.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/xmlparser/node2json.js?");

/***/ }),

/***/ "./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js":
/*!***************************************************************!*\
  !*** ./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/fast-xml-parser/src/xmlparser/xmlNode.js?");

/***/ }),

/***/ "./node_modules/strnum/strnum.js":
/*!***************************************!*\
  !*** ./node_modules/strnum/strnum.js ***!
  \***************************************/
/***/ ((module) => {

eval("const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/strnum/strnum.js?");

/***/ }),

/***/ "./src-injectables/getBlob.ts":
/*!************************************!*\
  !*** ./src-injectables/getBlob.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\nvar client_s3_1 = __webpack_require__(/*! @aws-sdk/client-s3 */ \"./node_modules/@aws-sdk/client-s3/dist-es/index.js\");\nexports[\"default\"] = (function (hash) { return __awaiter(void 0, void 0, void 0, function () {\n    var s3Client, params, command, res;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                s3Client = new client_s3_1.S3Client({\n                    region: 'us-east-1',\n                    credentials: {\n                        // @ts-ignore - will be injected via string\n                        accessKeyId: accessKey,\n                        // @ts-ignore - will be injected via string\n                        secretAccessKey: secretKey\n                    },\n                    // @ts-ignore - will be injected via string\n                    endpoint: endpoint,\n                    forcePathStyle: true\n                });\n                params = {\n                    // @ts-ignore - will be injected via string\n                    Bucket: bucketName,\n                    Key: \"blob/\".concat(hash)\n                };\n                command = new client_s3_1.GetObjectCommand(params);\n                return [4 /*yield*/, s3Client.send(command)];\n            case 1:\n                res = _a.sent();\n                return [2 /*return*/, res.Body];\n        }\n    });\n}); });\n\n\n//# sourceURL=webpack://@hummhive/content-delivery/./src-injectables/getBlob.ts?");

/***/ }),

/***/ "?7481":
/*!*******************************************!*\
  !*** @aws-sdk/signature-v4-crt (ignored) ***!
  \*******************************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://@hummhive/content-delivery/@aws-sdk/signature-v4-crt_(ignored)?");

/***/ }),

/***/ "./node_modules/@aws-sdk/client-s3/package.json":
/*!******************************************************!*\
  !*** ./node_modules/@aws-sdk/client-s3/package.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"name\":\"@aws-sdk/client-s3\",\"description\":\"AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native\",\"version\":\"3.199.0\",\"scripts\":{\"build\":\"concurrently \\'yarn:build:cjs\\' \\'yarn:build:es\\' \\'yarn:build:types\\'\",\"build:cjs\":\"tsc -p tsconfig.cjs.json\",\"build:docs\":\"typedoc\",\"build:es\":\"tsc -p tsconfig.es.json\",\"build:include:deps\":\"lerna run --scope $npm_package_name --include-dependencies build\",\"build:types\":\"tsc -p tsconfig.types.json\",\"build:types:downlevel\":\"downlevel-dts dist-types dist-types/ts3.4\",\"clean\":\"rimraf ./dist-* && rimraf *.tsbuildinfo\",\"test\":\"yarn test:unit\",\"test:e2e\":\"ts-mocha test/**/*.ispec.ts && karma start karma.conf.js\",\"test:unit\":\"ts-mocha test/**/*.spec.ts\"},\"main\":\"./dist-cjs/index.js\",\"types\":\"./dist-types/index.d.ts\",\"module\":\"./dist-es/index.js\",\"sideEffects\":false,\"dependencies\":{\"@aws-crypto/sha1-browser\":\"2.0.0\",\"@aws-crypto/sha256-browser\":\"2.0.0\",\"@aws-crypto/sha256-js\":\"2.0.0\",\"@aws-sdk/client-sts\":\"3.199.0\",\"@aws-sdk/config-resolver\":\"3.198.0\",\"@aws-sdk/credential-provider-node\":\"3.199.0\",\"@aws-sdk/eventstream-serde-browser\":\"3.199.0\",\"@aws-sdk/eventstream-serde-config-resolver\":\"3.198.0\",\"@aws-sdk/eventstream-serde-node\":\"3.199.0\",\"@aws-sdk/fetch-http-handler\":\"3.199.0\",\"@aws-sdk/hash-blob-browser\":\"3.198.0\",\"@aws-sdk/hash-node\":\"3.198.0\",\"@aws-sdk/hash-stream-node\":\"3.198.0\",\"@aws-sdk/invalid-dependency\":\"3.198.0\",\"@aws-sdk/md5-js\":\"3.199.0\",\"@aws-sdk/middleware-bucket-endpoint\":\"3.198.0\",\"@aws-sdk/middleware-content-length\":\"3.199.0\",\"@aws-sdk/middleware-endpoint\":\"3.198.0\",\"@aws-sdk/middleware-expect-continue\":\"3.198.0\",\"@aws-sdk/middleware-flexible-checksums\":\"3.198.0\",\"@aws-sdk/middleware-host-header\":\"3.198.0\",\"@aws-sdk/middleware-location-constraint\":\"3.198.0\",\"@aws-sdk/middleware-logger\":\"3.198.0\",\"@aws-sdk/middleware-recursion-detection\":\"3.198.0\",\"@aws-sdk/middleware-retry\":\"3.198.0\",\"@aws-sdk/middleware-sdk-s3\":\"3.198.0\",\"@aws-sdk/middleware-serde\":\"3.198.0\",\"@aws-sdk/middleware-signing\":\"3.198.0\",\"@aws-sdk/middleware-ssec\":\"3.198.0\",\"@aws-sdk/middleware-stack\":\"3.198.0\",\"@aws-sdk/middleware-user-agent\":\"3.198.0\",\"@aws-sdk/node-config-provider\":\"3.198.0\",\"@aws-sdk/node-http-handler\":\"3.199.0\",\"@aws-sdk/protocol-http\":\"3.198.0\",\"@aws-sdk/signature-v4-multi-region\":\"3.198.0\",\"@aws-sdk/smithy-client\":\"3.198.0\",\"@aws-sdk/types\":\"3.198.0\",\"@aws-sdk/url-parser\":\"3.198.0\",\"@aws-sdk/util-base64-browser\":\"3.188.0\",\"@aws-sdk/util-base64-node\":\"3.188.0\",\"@aws-sdk/util-body-length-browser\":\"3.188.0\",\"@aws-sdk/util-body-length-node\":\"3.188.0\",\"@aws-sdk/util-defaults-mode-browser\":\"3.198.0\",\"@aws-sdk/util-defaults-mode-node\":\"3.198.0\",\"@aws-sdk/util-endpoints\":\"3.198.0\",\"@aws-sdk/util-stream-browser\":\"3.199.0\",\"@aws-sdk/util-stream-node\":\"3.199.0\",\"@aws-sdk/util-user-agent-browser\":\"3.198.0\",\"@aws-sdk/util-user-agent-node\":\"3.198.0\",\"@aws-sdk/util-utf8-browser\":\"3.188.0\",\"@aws-sdk/util-utf8-node\":\"3.199.0\",\"@aws-sdk/util-waiter\":\"3.198.0\",\"@aws-sdk/xml-builder\":\"3.188.0\",\"fast-xml-parser\":\"4.0.11\",\"tslib\":\"^2.3.1\"},\"devDependencies\":{\"@aws-sdk/service-client-documentation-generator\":\"3.188.0\",\"@tsconfig/recommended\":\"1.0.1\",\"@types/chai\":\"^4.2.11\",\"@types/mocha\":\"^8.0.4\",\"@types/node\":\"^12.7.5\",\"concurrently\":\"7.0.0\",\"downlevel-dts\":\"0.10.1\",\"rimraf\":\"3.0.2\",\"typedoc\":\"0.19.2\",\"typescript\":\"~4.6.2\"},\"overrides\":{\"typedoc\":{\"typescript\":\"~4.6.2\"}},\"engines\":{\"node\":\">=12.0.0\"},\"typesVersions\":{\"<4.0\":{\"dist-types/*\":[\"dist-types/ts3.4/*\"]}},\"files\":[\"dist-*\"],\"author\":{\"name\":\"AWS SDK for JavaScript Team\",\"url\":\"https://aws.amazon.com/javascript/\"},\"license\":\"Apache-2.0\",\"browser\":{\"./dist-es/runtimeConfig\":\"./dist-es/runtimeConfig.browser\"},\"react-native\":{\"./dist-es/runtimeConfig\":\"./dist-es/runtimeConfig.native\"},\"homepage\":\"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/aws/aws-sdk-js-v3.git\",\"directory\":\"clients/client-s3\"}}');\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/client-s3/package.json?");

/***/ }),

/***/ "./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json":
/*!******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"version\":\"1.1\",\"partitions\":[{\"id\":\"aws\",\"regionRegex\":\"^(us|eu|ap|sa|ca|me|af)-\\\\\\\\w+-\\\\\\\\d+$\",\"regions\":{\"af-south-1\":{},\"af-east-1\":{},\"ap-northeast-1\":{},\"ap-northeast-2\":{},\"ap-northeast-3\":{},\"ap-south-1\":{},\"ap-southeast-1\":{},\"ap-southeast-2\":{},\"ap-southeast-3\":{},\"ca-central-1\":{},\"eu-central-1\":{},\"eu-north-1\":{},\"eu-south-1\":{},\"eu-west-1\":{},\"eu-west-2\":{},\"eu-west-3\":{},\"me-south-1\":{},\"sa-east-1\":{},\"us-east-1\":{},\"us-east-2\":{},\"us-west-1\":{},\"us-west-2\":{},\"aws-global\":{}},\"outputs\":{\"name\":\"aws\",\"dnsSuffix\":\"amazonaws.com\",\"dualStackDnsSuffix\":\"api.aws\",\"supportsFIPS\":true,\"supportsDualStack\":true}},{\"id\":\"aws-us-gov\",\"regionRegex\":\"^us\\\\\\\\-gov\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\",\"regions\":{\"us-gov-west-1\":{},\"us-gov-east-1\":{},\"aws-us-gov-global\":{}},\"outputs\":{\"name\":\"aws-us-gov\",\"dnsSuffix\":\"amazonaws.com\",\"dualStackDnsSuffix\":\"api.aws\",\"supportsFIPS\":true,\"supportsDualStack\":true}},{\"id\":\"aws-cn\",\"regionRegex\":\"^cn\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\",\"regions\":{\"cn-north-1\":{},\"cn-northwest-1\":{},\"aws-cn-global\":{}},\"outputs\":{\"name\":\"aws-cn\",\"dnsSuffix\":\"amazonaws.com.cn\",\"dualStackDnsSuffix\":\"api.amazonwebservices.com.cn\",\"supportsFIPS\":true,\"supportsDualStack\":true}},{\"id\":\"aws-iso\",\"regionRegex\":\"^us\\\\\\\\-iso\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\",\"outputs\":{\"name\":\"aws-iso\",\"dnsSuffix\":\"c2s.ic.gov\",\"supportsFIPS\":true,\"supportsDualStack\":false,\"dualStackDnsSuffix\":\"c2s.ic.gov\"},\"regions\":{\"aws-iso-global\":{}}},{\"id\":\"aws-iso-b\",\"regionRegex\":\"^us\\\\\\\\-isob\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\",\"outputs\":{\"name\":\"aws-iso-b\",\"dnsSuffix\":\"sc2s.sgov.gov\",\"supportsFIPS\":true,\"supportsDualStack\":false,\"dualStackDnsSuffix\":\"sc2s.sgov.gov\"},\"regions\":{\"aws-iso-b-global\":{}}}]}');\n\n//# sourceURL=webpack://@hummhive/content-delivery/./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src-injectables/getBlob.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});